{"version":3,"sources":["webpack:///src/app/main/logs-history/charging-profile/view-dialog/view-dialog.component.ts","webpack:///src/app/main/logs-history/charging-profile/view-dialog/view-dialog.component.html","webpack:///src/app/main/logs-history/charging-profile/charging-profile-crud/routes.ts","webpack:///src/app/main/logs-history/charging-profile/addItem-dialog/addItem-dialog.component.ts","webpack:///src/app/main/logs-history/charging-profile/addItem-dialog/addItem-dialog.component.html","webpack:///src/app/main/logs-history/charging-profile/charging-profile-routing.module.ts","webpack:///src/app/main/logs-history/charging-profile/charging-profile.module.ts","webpack:///src/app/main/logs-history/charging-profile/list/list.component.ts","webpack:///src/app/main/logs-history/charging-profile/list/list.component.html","webpack:///src/app/main/logs-history/charging-profile/charging-profile-crud/charging-profile-crud.component.ts","webpack:///src/app/main/logs-history/charging-profile/charging-profile-crud/charging-profile-crud.component.html","webpack:///src/app/main/logs-history/charging-profile/action-dialog/action-dialog.component.ts","webpack:///src/app/main/logs-history/charging-profile/action-dialog/action-dialog.component.html","webpack:///src/app/main/logs-history/charging-profile/create/create.component.ts","webpack:///src/app/main/logs-history/charging-profile/create/create.component.html"],"names":["autocompleteObjectValidator","control","value","ViewDialogComponent","fb","chargingProfileService","dateService","snackBar","dialogRef","data","datePipe","dialog","cdr","selectedIndex","isFirstTab","isSecondTab","disabled","showSpinners","showSeconds","touchUi","enableMeridian","minDate","Date","stepHour","stepMinute","stepSecond","scheduleTab","periodTab","isEditMode","status","tempDate","currDate","sched_tab","status2","status3","cancleBtn","initialize","localStorage","JSON","parse","getItem","menuArray","params","chargingProfId","chargingProfileId","action","charProf_forms","group","stack_level","required","pattern","char_proName","char_profKind","charg_profPur","recur_kind","toDate","fromDate","charSchud_forms","duration","charging_rate_unit","start_schedule","charge_rate","schPerio_forms","periodForm","array","getChargingProgilePurpose","getChargingRecurrencyKind","getChargingProfileKind","assignValuesCharProfile","assignValuesCharSchedule","getChargingRateUnit","getNum_Phases","id","start_period","limit","num_phases","close","form","get","hasError","event","index","setValue","charging_profile_name","validTo","validFrom","getScheduleByProfileId","checked","ref","getChargingProfilePurpose","subscribe","resp","charProfPurpose","toSelect","find","c","chargingProfilePurpose","filteredOptionsCharProfPurp","controls","valueChanges","pipe","name","_filterCharProfPurpose","open","statusFalse","err","filterValue","toLowerCase","filter","option","includes","item","getRecurrencyKind","recurKind","recurrencyKind","filteredOptionsRecurKind","_filterCharRecurKind","profileKind","chargingProfileKind","filteredOptionsProfileKind","_filterCharProfileKind","char_SchudData","undefined","schu_PeriodData","NoRecordFoundMessage","charRateUnit","charging_rate_unit_id","filteredOptionsCharRate","_filterCharRateUnit","ref2","getNumberPhases","num_Phases","ref3","PERform","push","createAddPerForm","i","width","autoFocus","disableClose","panelClass","afterClosed","result","formPre","detectChanges","formRemove","length","removeAt","reset","charProfileId","getChargerScheduleByProfileId","mincharging_rate","getSchedulePeriodByScheduleId","error","charSchudId","getChargerSchedulePeriodByScheduleId","formPeriod","SchPeriodStatus","childForm","period_limit","numberof_phase_id","closeActionPanel","onTabChange","$event","stopPropagation","updateStatus","updateCharProfile","updateStatus2","updateCharSchedule","updateStatus3","selector","templateUrl","styleUrls","encapsulation","None","animations","providers","TABS_DEMO_ROUTES","path","component","canActivate","redirectTo","pathMatch","AddItemDialogComponent","valuedilog","seat1","seat2","totelSec","hours","max","min","minute","key","second","totalSec","addSeconds","routes","children","ChargingProfileRoutingModule","forChild","imports","exports","COMPONENTS","COMPONENTS_DYNAMIC","ChargingProfile","declarations","entryComponents","ListComponent","clientService","displayedColumns","head","charProNameSearch","charProPurSearch","recuKindSearch","durationSearch","numPhasesSearch","charProfKindSearch","stack_levelSearch","statusSearch","getChargingProfile","filterEntity","filterType","ANYWHERE","target","dataSource","trim","paginator","firstPage","getAllChargingProfileList","chargingProList","statusString","sort","confirmDialogRef","chargingProfileDelete","userId","deleteMessage","errorMessage","visibleOption","numberPhases","exportedData","filteredData","chargingProf","minChargingRate","ChargingRateUnit","startSchedule","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","doc","img","Image","imgRight","src","srcSparkEV","createdDate","toLocaleString","setFontSize","setTextColor","autoTable","body","theme","headStyles","fontStyle","fillColor","styles","cellPadding","fontSize","margin","top","didDrawCell","didDrawPage","addImage","text","internal","pageSize","getWidth","align","setGState","GState","opacity","f_Name","addWaterMark","output","save","newpage","getNumberOfPages","String","tableExport","pdfExport","ChargingProfileCrudComponent","router","_utilityService","tabLinks","tempLinks","activeMenuItems$","menuItemSelecte","title","nav_list","nav_list_with_tab","x","objectData","y","objectChildData","z","isDefaultRoutePermeted","label","link","navigate","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","ActionDialogComponent","fgroup","valid","formValues","charging_profile_kind_id","recurrency_kind_id","charging_profile_purpose_id","valid_from","transform","valid_to","modifyby","created_by","updateChargingProfile","recordUpdateMessage","chargingProfileCreation","chargingProfileCreate","formInvalid","charging_profile_id","updateChargingSchedule","errorMessageForChargingProfilePeriod","chargingScheduleCreation","chargingScheduleCreate","errorMessageForChargingProfileSchedule","perForm","forEach","charging_schedule_id","scheduleData","updateChargingSchedulePeriod","chargingSchedulePeriodCreation","chargingSchedulePeriodCreate","updateSchuPeriod","CreateComponent","chargingProfileID","message","chargingScheduleID","filteredOptionsNumPhases","_filterNumPhases","charProfSubmit","charSchuSubmit","schuPeriodSubmit","addItem"],"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","file":"charging-profile-charging-profile-module-es5.js","sourcesContent":["import { Component, OnInit, Inject, ElementRef, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn, AbstractControl, FormControl, FormArray } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { DateService } from 'app/shared/services/utility/date.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith, tap } from 'rxjs/operators';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { DatePipe } from '@angular/common';\r\nimport { ChargingProfileService } from 'app/shared/services/charging-profile/charging-profile.service';\r\nimport { AddItemDialogComponent } from '../addItem-dialog/addItem-dialog.component';\r\n\r\nexport interface ChargingProfileSchedule{\r\n  id:number;\r\n  charging_schedule_id:number;\r\n  scheduleData:ChargingSchedulePeriod[]\r\n  status:string;\r\n  created_by:number;\r\n  modifyby:number;\r\n}\r\nexport interface ChargingSchedulePeriod{\r\n  id:number;\r\n  start_period:number;\r\n  limit:number;\r\n  numberof_phase_id:number;\r\n}\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-dialog',\r\n  templateUrl: './view-dialog.component.html',\r\n  styleUrls: ['./view-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n  providers: [DatePipe]\r\n})\r\n\r\nexport class ViewDialogComponent implements OnInit {\r\n\r\n  selectedIndex = 0;\r\n  isFirstTab = true;\r\n  isSecondTab = true;\r\n  chargingProfId: any;\r\n  charProf_forms: FormGroup;\r\n  localStorage: any;\r\n  charProfPurpose: any;\r\n  recurKind: any;\r\n  profileKind: any;\r\n  params: any;\r\n  filteredOptionsCharProfPurp: Observable<any[]>;\r\n  filteredOptionsRecurKind: Observable<any[]>;\r\n  filteredOptionsProfileKind: Observable<any[]>;\r\n  public date: moment.Moment;\r\n  public disabled = false;\r\n  public showSpinners = true;\r\n  public showSeconds = true;\r\n  public touchUi = false;\r\n  public enableMeridian = false;\r\n  minDate = new Date();\r\n  public maxDate: moment.Moment;\r\n  public stepHour = 1;\r\n  public stepMinute = 1;\r\n  public stepSecond = 1;\r\n  scheduleTab: boolean = false;\r\n  periodTab: boolean = false;\r\n  isEditMode = false;\r\n  status = true;\r\n  tempDate = new Date();\r\n  currDate: any = new Date();\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  //messageConstant = MessageConstant;\r\n  charSchud_forms: FormGroup;\r\n  charRateUnit: any;\r\n  @ViewChild(\"toggleElement2\") ref2: any;\r\n  filteredOptionsCharRate: Observable<any[]>;\r\n  char_ProfileID: any;\r\n  sched_tab: boolean = false;\r\n  status2 = true;\r\n\r\n  schPerio_forms: FormGroup;\r\n  num_Phases: any;\r\n  @ViewChild(\"toggleElement3\") ref3: any;\r\n  status3 = true;\r\n  filteredOptionsNumPhases: Observable<any[]>;\r\n  menuArray: any;\r\n  schu_PeriodData:any;\r\n  char_SchudData:any;\r\n  SchPeriodStatus:string;\r\n  cancleBtn = false;\r\n\r\n  constructor(private fb: FormBuilder, private chargingProfileService: ChargingProfileService,\r\n    private dateService: DateService, private snackBar: MatSnackBar,\r\n    public dialogRef: MatDialogRef<ViewDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, private datePipe: DatePipe,\r\n    public dialog: MatDialog,private cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.menuArray  = JSON.parse( localStorage.getItem('activeMenuItems'));\r\n    //const fgroup = this.createAddPerForm();\r\n    this.params = this.data;\r\n    this.chargingProfId = this.params.data.chargingProfileId;\r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.charProf_forms = this.fb.group({\r\n      stack_level: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      char_proName: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      char_profKind: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      charg_profPur: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      recur_kind: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      toDate: [''],\r\n      fromDate: [''],\r\n      status: this.status == true ? 'Y' : 'N'\r\n    });\r\n\r\n    this.charSchud_forms = this.fb.group({\r\n      duration: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      charging_rate_unit: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      start_schedule: [new Date()],\r\n      charge_rate: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      status2: this.status2 == true ? 'Y' : 'N'\r\n    });\r\n\r\n    this.schPerio_forms = this.fb.group({\r\n      periodForm : this.fb.array([]),\r\n      status3: this.status3 == true ? 'Y' : 'N'\r\n     \r\n    });\r\n    if (this.isEditMode) {\r\n      this.getChargingProgilePurpose();\r\n      this.getChargingRecurrencyKind();\r\n      this.getChargingProfileKind();\r\n      this.assignValuesCharProfile(this.params);\r\n      this.assignValuesCharSchedule(this.params);\r\n      this.getChargingRateUnit();\r\n      //this.assignValuesCharPeriod(this.params);\r\n      this.getNum_Phases();\r\n    } \r\n\r\n  }\r\n\r\n  createAddPerForm() {\r\n    return this.fb.group({\r\n      id: new FormControl(''),\r\n      start_period: new FormControl('',[Validators.required, Validators.pattern(/^[0-9]*$/)]),\r\n      limit: new FormControl('',[Validators.required, Validators.pattern(/^[0-9]*$/)]),\r\n      num_phases: new FormControl(''),\r\n    });\r\n  }\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel() {\r\n    this.dialogRef.close();\r\n  }\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n        ? 'Not a valid email'\r\n        : '';\r\n  }\r\n  onTabChange(event) {\r\n    this.selectedIndex = event.index;\r\n  }\r\n  assignValuesCharProfile(params) {\r\n    this.charProf_forms.get('stack_level').setValue(params.data.stack_level);\r\n    this.charProf_forms.get('char_proName').setValue(params.data.charging_profile_name);\r\n    this.charProf_forms.get('toDate').setValue(params.data.validTo);\r\n    this.charProf_forms.get('fromDate').setValue(params.data.validFrom);\r\n    this.status = params.data.status == 'Y' ? true : false;\r\n  }\r\n  assignValuesCharSchedule(params) {\r\n    this.getScheduleByProfileId(params.data.chargingProfileId);\r\n }\r\n\r\n  \r\n  updateStatus(event) {\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n  updateCharProfile() {\r\n    this.isFirstTab = false;\r\n    this.selectedIndex += 1;\r\n  }\r\n\r\n  getChargingProgilePurpose() {\r\n    this.chargingProfileService.getChargingProfilePurpose().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.charProfPurpose = resp.data;\r\n          if (this.isEditMode) {\r\n            const toSelect = this.charProfPurpose.find(c => c.value == this.params.data.chargingProfilePurpose);\r\n            this.charProf_forms.get('charg_profPur').setValue(toSelect);\r\n          }\r\n          this.filteredOptionsCharProfPurp = this.charProf_forms.controls.charg_profPur.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.value),\r\n            map(name => name ? this._filterCharProfPurpose(name) : this.charProfPurpose)\r\n          );\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n  private _filterCharProfPurpose(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.charProfPurpose.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharProfPur(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  getChargingRecurrencyKind() {\r\n    this.chargingProfileService.getRecurrencyKind().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.recurKind = resp.data;\r\n          if (this.isEditMode) {\r\n            const toSelect = this.recurKind.find(c => c.value == this.params.data.recurrencyKind);\r\n            this.charProf_forms.get('recur_kind').setValue(toSelect);\r\n          }\r\n          this.filteredOptionsRecurKind = this.charProf_forms.controls.recur_kind.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.value),\r\n            map(name => name ? this._filterCharRecurKind(name) : this.recurKind)\r\n          );\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n  }\r\n  private _filterCharRecurKind(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.recurKind.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharRecurKind(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n\r\n  getChargingProfileKind() {\r\n    this.chargingProfileService.getChargingProfileKind().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.profileKind = resp.data;\r\n          if (this.isEditMode) {\r\n            const toSelect = this.profileKind.find(c => c.value == this.params.data.chargingProfileKind);\r\n            this.charProf_forms.get('char_profKind').setValue(toSelect);\r\n          }\r\n          this.filteredOptionsProfileKind = this.charProf_forms.controls.char_profKind.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.value),\r\n            map(name => name ? this._filterCharProfileKind(name) : this.profileKind)\r\n          );\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n  private _filterCharProfileKind(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.profileKind.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharProfileKind(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n\r\n  //tab-2\r\n  updateCharSchedule() {\r\n    if(this.char_SchudData != undefined && this.char_SchudData != null){\r\n        if(this.schu_PeriodData != undefined && this.schu_PeriodData != null){\r\n          this.isSecondTab = false;\r\n          this.selectedIndex += 1;\r\n        }else{\r\n          this.isSecondTab = true\r\n          this.snackBar.open(MessageConstant.NoRecordFoundMessage, 'Dismiss', { duration: 5000 })\r\n          this.cancleBtn = true\r\n        }\r\n    }else{\r\n      this.isSecondTab = true\r\n      this.snackBar.open(MessageConstant.NoRecordFoundMessage, 'Dismiss', { duration: 5000 })\r\n      this.cancleBtn = true\r\n    }\r\n    \r\n  }\r\n\r\n  getChargingRateUnit() {\r\n    this.chargingProfileService.getChargingRateUnit().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.charRateUnit = resp.data;\r\n          if (this.isEditMode) {\r\n\r\n            if(this.char_SchudData != undefined && this.char_SchudData.charging_rate_unit_id != undefined){\r\n              const toSelect = this.charRateUnit.find(c => c.id == this.char_SchudData.charging_rate_unit_id); //this.char_SchudData.charging_rate_unit_id //this.params.data.ChargingRateUnit\r\n              this.charSchud_forms.get('charging_rate_unit').setValue(toSelect);\r\n            }\r\n          }\r\n          this.filteredOptionsCharRate = this.charSchud_forms.controls.charging_rate_unit.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.value),\r\n            map(name => name ? this._filterCharRateUnit(name) : this.charRateUnit)\r\n          );\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  private _filterCharRateUnit(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.charRateUnit.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharRate(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  updateStatus2(event) {\r\n    this.status2 = event.checked;\r\n    this.ref2.checked = this.status2;\r\n  }\r\n\r\n  //tab-3\r\n\r\n  updateSchuPeriod() {\r\n    this.dialogRef.close();\r\n  }\r\n  getNum_Phases() {\r\n    this.chargingProfileService.getNumberPhases().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.num_Phases = resp.data;\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  updateStatus3(event) {\r\n    this.status3 = event.checked;\r\n    this.ref3.checked = this.status3;\r\n  }\r\n\r\n  addItem(){\r\n    const PERform = this.schPerio_forms.get('periodForm') as FormArray;\r\n    //const fgroup = this.createAddPerForm();\r\n    PERform.push(this.createAddPerForm());\r\n  }\r\n  setStartPeriod(i) {  \r\n    const dialogRef = this.dialog.open(AddItemDialogComponent, {\r\n      width: '600px',\r\n      data: {i},\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog',\r\n      //position: {top: '0%', left:'10%'}\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if(result != undefined && result != 0 ){ \r\n          const formPre = this.schPerio_forms.get('periodForm') as FormArray;\r\n          formPre.controls[i].get('start_period').setValue(result);\r\n          //this.schPerio_forms.get('periodForm')['controls']\r\n          this.cdr.detectChanges();\r\n        }else{\r\n          return;\r\n        }\r\n      \r\n    });\r\n  }\r\n  removevalue(i){\r\n    const formRemove = this.schPerio_forms.get('periodForm') as FormArray\r\n   if (formRemove.length > 1) {\r\n     formRemove.removeAt(i)\r\n   } else {\r\n     formRemove.reset()\r\n   }\r\n }\r\n\r\n getScheduleByProfileId(charProfileId){\r\n  this.chargingProfileService.getChargerScheduleByProfileId(charProfileId).subscribe(\r\n    (resp:any) => {\r\n      if(resp.status == true){\r\n         this.char_SchudData = resp.data[0];\r\n         this.charSchud_forms.get('duration').setValue(this.char_SchudData.duration);\r\n         this.charSchud_forms.get('start_schedule').setValue(this.char_SchudData.start_schedule);\r\n         //this.charSchud_forms.get('charging_rate_unit').setValue(this.char_SchudData.charging_rate_unit_id);\r\n         this.charSchud_forms.get('charge_rate').setValue(this.char_SchudData.mincharging_rate);\r\n         this.status2 = this.char_SchudData.status == 'Y' ? true : false;\r\n         this.getSchedulePeriodByScheduleId(this.char_SchudData.id);\r\n         this.getChargingRateUnit()\r\n      }\r\n    },(error) =>{\r\n\r\n    }\r\n  );\r\n}\r\n\r\n getSchedulePeriodByScheduleId(charSchudId){\r\n  this.chargingProfileService.getChargerSchedulePeriodByScheduleId(charSchudId).subscribe(\r\n    (resp:any) => {\r\n      if(resp.status == true){\r\n          this.schu_PeriodData =  resp.data\r\n          const formPeriod = this.schPerio_forms.get('periodForm') as FormArray;\r\n          for(var i=0; i< this.schu_PeriodData.length; i++){ \r\n            this.SchPeriodStatus = this.schu_PeriodData[i].status;\r\n             const childForm =   this.createAddPerForm();\r\n             formPeriod.push(childForm);\r\n             formPeriod.controls[i].get('id').setValue(this.schu_PeriodData[i].id);\r\n             formPeriod.controls[i].get('start_period').setValue(this.schu_PeriodData[i].start_period);\r\n             formPeriod.controls[i].get('limit').setValue(this.schu_PeriodData[i].period_limit);\r\n             formPeriod.controls[i].get('num_phases').setValue(this.schu_PeriodData[i].numberof_phase_id);\r\n          }\r\n          this.status3 = this.SchPeriodStatus == 'Y' ? true : false;\r\n      }\r\n\r\n    },(error) =>{\r\n\r\n    }\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n\r\n<mat-toolbar class=\"action_toolbar\">{{menuArray?.title}}</mat-toolbar>\r\n<div style=\"max-height: 22vw;overflow: auto;\">\r\n\r\n  <mat-tab-group [selectedIndex]=\"selectedIndex\" (selectedTabChange)=\"onTabChange($event)\" class=\"pt-0 pb-0 mt-0 mb-0\">\r\n\r\n    <!-- tab-1 -->\r\n    <mat-tab label=\"Create Charging Profile\">\r\n      <div id=\"charProf_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n        <form [formGroup]=\"charProf_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\">\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Stack Level</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"stack_level\" type=\"number\" min=\"0\" readonly\r\n                autocomplete=\"off\" id=\"stack_level\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter duration\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charProf_forms.get('stack_level').hasError('required')\">Please enter stack level\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charProf_forms.get('stack_level').hasError('pattern')\">Special character are not allowed\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Kind</mat-label>\r\n              <input type=\"text\" readonly matInput formControlName=\"char_profKind\" id=\"chargerCreateCModel\"\r\n                [matAutocomplete]=\"chargingProfAuto\" id=\"chargingModelAutomat\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter charging profile kind\">help\r\n                </mat-icon>\r\n              </div>\r\n              <mat-autocomplete #chargingProfAuto=\"matAutocomplete\" [displayWith]=\"displayCharProfileKind\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsProfileKind | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_profKind').hasError('required')\">Please select charging profile\r\n                kind\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Name</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"char_proName\" type=\"search\" maxlength=\"50\" readonly\r\n                autocomplete=\"off\" id=\"char_proName\">\r\n              <mat-error *ngIf=\"charProf_forms.get('char_proName').hasError('required')\">Please enter charging profile\r\n                name\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_proName').hasError('pattern')\">Special character are not\r\n                allowed\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Recurrency Kind</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"recur_kind\" required id=\"recur_kind\"\r\n                [matAutocomplete]=\"recuKindAuto\" type=\"search\" autocomplete=\"off\" readonly>\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select recurrency kind \">help</mat-icon>\r\n              </div>\r\n              <mat-autocomplete #recuKindAuto=\"matAutocomplete\" [displayWith]=\"displayCharRecurKind\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsRecurKind | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_profKind').hasError('required')\">Please select recurrency kind\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Purpose</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"charg_profPur\" required id=\"charg_profPur\"\r\n                [matAutocomplete]=\"profPurposeAuto\" type=\"search\" autocomplete=\"off\" readonly>\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charging profile purpose \">help\r\n                </mat-icon>\r\n              </div>\r\n              <mat-autocomplete #profPurposeAuto=\"matAutocomplete\" [displayWith]=\"displayCharProfPur\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsCharProfPurp | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('charg_profPur').hasError('required')\">Please select charging profile\r\n                purpose\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"23\" class=\"pr-4\">\r\n              <mat-label>Valid From</mat-label>\r\n              <input matInput [ngxMatDatetimePicker]=\"fDate\" formControlName=\"fromDate\" [min]=\"minDate\" [max]=\"maxDate\"\r\n                [disabled]=\"disabled\" readonly>\r\n\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon class=\"secondary-text\" matTooltip=\"Please enter valid from date and time\">help</mat-icon>\r\n                <mat-icon mat-icon-button type=\"button\" (click)=\"fDate.open(); $event.stopPropagation();\">today\r\n                </mat-icon>\r\n              </div>\r\n              <ngx-mat-datetime-picker #fDate [showSpinners]=\"showSpinners\" [showSeconds]=\"showSeconds\"\r\n                [stepHour]=\"stepHour\" [stepMinute]=\"stepMinute\" [stepSecond]=\"stepSecond\" [touchUi]=\"touchUi\"\r\n                [enableMeridian]=\"enableMeridian\">\r\n              </ngx-mat-datetime-picker>\r\n              <mat-error *ngIf=\"charProf_forms.get('fromDate').invalid\">Please enter valid from date and time\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"23\" class=\"pr-4\">\r\n              <mat-label>Valid To</mat-label>\r\n              <input matInput [ngxMatDatetimePicker]=\"tDate\" formControlName=\"toDate\" [min]=\"minDate\" [max]=\"maxDate\"\r\n                [disabled]=\"disabled\" readonly>\r\n\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon class=\"secondary-text\" matTooltip=\"Please enter valid to date and time\">help</mat-icon>\r\n                <mat-icon mat-icon-button type=\"button\" (click)=\"tDate.open(); $event.stopPropagation();\">today\r\n                </mat-icon>\r\n              </div>\r\n              <ngx-mat-datetime-picker #tDate [showSpinners]=\"showSpinners\" [showSeconds]=\"showSeconds\"\r\n                [stepHour]=\"stepHour\" [stepMinute]=\"stepMinute\" [stepSecond]=\"stepSecond\" [touchUi]=\"touchUi\"\r\n                [enableMeridian]=\"enableMeridian\">\r\n              </ngx-mat-datetime-picker>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\" #toggleElement [disabled]=\"true\">\r\n              {{status ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <!-- <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"updateCharProfile()\">\r\n              {{isEditMode? 'Save' : 'Save'}}</button> -->\r\n            <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"updateCharProfile()\">View\r\n              Next</button>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n\r\n    <!-- tab-2 -->\r\n    <mat-tab label=\"Create Charging Schedule\" [disabled]=\"isFirstTab\">\r\n      <div id=\"charSchud_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n        <form [formGroup]=\"charSchud_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"charSchud_forms\">\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Duration</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"duration\" type=\"number\" min=\"0\" readonly\r\n                autocomplete=\"off\" id=\"duration\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <!-- <mat-icon matSuffix class=\"secondary-text\">add_circle</mat-icon> -->\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter duration\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('duration').hasError('required')\">Please enter duration</mat-error>\r\n              <mat-error *ngIf=\"charSchud_forms.get('duration').hasError('pattern')\">Only number is allowd</mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Rate Unit</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"charging_rate_unit\" id=\"charging_rate_unit\"\r\n                [matAutocomplete]=\"charRateAuto\" type=\"search\" autocomplete=\"off\" readonly>\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter charging rate unit\">help</mat-icon>\r\n              </div>\r\n              <mat-autocomplete #charRateAuto=\"matAutocomplete\" [displayWith]=\"displayCharRate\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsCharRate | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charging_rate_unit').hasError('required')\">Please enter charging\r\n                rate unit\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Start Schedule</mat-label>\r\n              <input matInput [matDatepicker]=\"dp3\" formControlName=\"start_schedule\" disabled>\r\n              <div matSuffix style=\"display: flex;\" readonly>\r\n                <mat-icon style=\"padding-top:7px;\" class=\"secondary-text\" matTooltip=\"Please enter start schedule\">help\r\n                </mat-icon>\r\n                <mat-datepicker-toggle [for]=\"dp3\"></mat-datepicker-toggle>\r\n                <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('start_schedule').invalid\">Please enter start schedule</mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Min Charge Rate</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"charge_rate\" type=\"number\" min=\"0\" maxlength=\"50\" autocomplete=\"off\"\r\n                id=\"charge_rate\" readonly>\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter min charger rate\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charge_rate').hasError('required')\">Please enter min charger rate only number is allowed\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charge_rate').hasError('pattern')\">Special character are not\r\n                allowed</mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status2\" (change)=\"updateStatus2($event)\" #toggleElement2 [disabled]=\"true\">\r\n              {{status2 ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <!-- <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"updateCharSchedule()\">\r\n              {{isEditMode? 'Save' : 'Save'}}</button> -->\r\n            <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"updateCharSchedule()\">View\r\n              Next</button>\r\n              <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\" *ngIf=\"cancleBtn\">Cancel</button>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n\r\n    <!-- tab-3 -->\r\n    <mat-tab label=\"Create Schedule Period\" [disabled]=\"isSecondTab\">\r\n      <div id=\"schPerio_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n        <form [formGroup]=\"schPerio_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"schPerio_forms\">\r\n\r\n          <div formArrayName=\"periodForm\">\r\n            <div *ngFor=\"let period of schPerio_forms.get('periodForm')['controls']; let i = index;\" [formGroupName]=\"i\">\r\n\r\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Start Period(Sec)</mat-label>\r\n                  <input matInput formControlName=\"start_period\" type=\"number\" min=\"0\"  autocomplete=\"off\" readonly>\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter start period\">help</mat-icon>\r\n                  </div>\r\n                  <!-- <mat-error *ngIf=\"period.get('start_period').hasError('required')\">Please enter start period\r\n                  </mat-error> -->\r\n                  <!-- <mat-error *ngIf=\"period.get('start_period').hasError('pattern')\">Only number is allowed\r\n                  </mat-error> -->\r\n                </mat-form-field>\r\n                <!-- <div fxFlex=\"1\" hidden>\r\n                  <mat-icon  matTooltip=\"Set start period\" (click)=\"setStartPeriod(i)\" \r\n                  style=\"font-size: 2rem;color: darkcyan;float: right; margin-bottom: 1.5rem;\">add_circle</mat-icon>\r\n                </div> -->\r\n\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Limit</mat-label>\r\n                  <input matInput placeholder=\"\" formControlName=\"limit\" type=\"number\" min=\"0\" \r\n                    autocomplete=\"off\" readonly>\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter limit\">help\r\n                    </mat-icon>\r\n                  </div>\r\n                </mat-form-field>\r\n\r\n\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Number Phases</mat-label>\r\n                  <mat-select formControlName=\"num_phases\" disabled>\r\n                    <mat-option *ngFor=\"let option of num_Phases\" [value]=\"option.id\" >\r\n                      {{option.value}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select number phases\">help\r\n                  </mat-icon>\r\n                  <!-- <input type=\"text\" matInput formControlName=\"num_phases\" required id=\"num_phases\"\r\n                    [matAutocomplete]=\"numPhasesAuto\" type=\"search\" autocomplete=\"off\" readonly>\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select number phases\">help\r\n                    </mat-icon>\r\n                  </div>\r\n                  <mat-autocomplete #numPhasesAuto=\"matAutocomplete\" [displayWith]=\"displayNumPhases\">\r\n                    <mat-option *ngFor=\"let option of filteredOptionsNumPhases | async\" [value]=\"option\">\r\n                      {{option.value}}\r\n                    </mat-option>\r\n                  </mat-autocomplete> -->\r\n                  <!-- <mat-error *ngIf=\"period.get('num_phases').hasError('required')\">Please select number phases\r\n                  </mat-error> -->\r\n                </mat-form-field>\r\n\r\n                <!-- <div fxFlex=\"5\" class=\"pr-4\" hidden=\"true\">\r\n                  <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"removevalue(i)\" style=\"cursor:pointer;margin-bottom: 2rem !important;\">delete\r\n                  </mat-icon>\r\n                </div> -->\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status3\" (change)=\"updateStatus3($event)\" #toggleElement3 [disabled]=\"true\">\r\n              {{status3 ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n              <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n            </div>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n\r\n\r\n  </mat-tab-group>\r\n\r\n</div>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\n\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent ,canActivate:[AuthGuard] },\r\n  { path : 'list', component : ListComponent ,canActivate: [AuthGuard] },\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { DateService } from 'app/shared/services/utility/date.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith,tap} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n\r\n@Component({\r\n  selector: 'app-addItem-dialog',\r\n  templateUrl: './addItem-dialog.component.html',\r\n  styleUrls: ['./addItem-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\n\r\n\r\nexport class AddItemDialogComponent implements OnInit {\r\n \r\n\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  status = false;\r\n  valuedilog = {\r\n    seat1: undefined,\r\n    seat2: undefined,\r\n    totelSec:undefined\r\n  }\r\n //totelSec:any;\r\n\r\n  \r\n  @ViewChild(\"toggleElement\") ref: any;\r\n \r\n  \r\n  //messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder,  private dateService : DateService, private snackBar: MatSnackBar,\r\n    public dialogRef: MatDialogRef<AddItemDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, private datePipe: DatePipe,) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    //this.params = this.data;\r\n    //this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      hours: ['', [Validators.pattern(/^[0-9]*$/),Validators.max(24),Validators.min(0)]],\r\n      minute: ['', [Validators.required, Validators.pattern(/^[0-9]*$/),]],\r\n      \r\n    });\r\n    this.form.get('hours').setValue(0);\r\n    this.form.get('minute').setValue(0);\r\n\r\n  \r\n  }\r\n  \r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  seat1Modified(event): void {\r\n      let minute = 60 * event.value.key;\r\n      let second = 60 * event.value.key;\r\n      //this.form.get('minute').setValue(minute);\r\n      //value.seat2 = minute ;\r\n      event.totelSec = minute + second;\r\n    \r\n  }\r\n\r\n  addSeconds(){\r\n    let hours = this.form.get('hours').value;\r\n    let minute = this.form.get('minute').value;\r\n    var totalSec =  ( ( (hours *60) + minute) *60 );\r\n    this.dialogRef.close(totalSec);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n\r\n<mat-toolbar class=\"action_toolbar\">Add Item</mat-toolbar>\r\n<div style=\"padding:24px;max-height: 22vw;overflow: auto;\">\r\n  <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n    <form [formGroup]=\"form\" class=\"mat-elevation-z4 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n      name=\"form\">\r\n\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Hours</mat-label>\r\n          <input matInput  formControlName=\"hours\" type=\"number\" min=\"0\" max=\"24\"  autocomplete=\"off\">\r\n           <mat-error *ngIf=\"form.get('hours').hasError('max')\">Maximum value is not greater then equal 24\r\n          </mat-error>\r\n          <mat-error *ngIf=\"form.get('hours').hasError('min')\">Maximum value is not greater then equal 0\r\n          </mat-error>\r\n          <!-- <mat-error *ngIf=\"form.get('hour').hasError('required')\">Please enter hours</mat-error>\r\n          <mat-error *ngIf=\"form.get('hour').hasError('pattern')\">Only number is allowed</mat-error> -->\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Minute</mat-label>\r\n          <input matInput  formControlName=\"minute\"    type=\"number\" min=\"0\" required autocomplete=\"off\" >\r\n          <!-- <mat-error *ngIf=\"form.get('minute').hasError('required')\">Please enter minute</mat-error>\r\n          <mat-error *ngIf=\"form.get('minute').hasError('pattern')\">Only number is allowed</mat-error> -->\r\n        </mat-form-field>\r\n        \r\n      </div>\r\n      <!-- <div *ngFor=\"let val of newRow; let i = index\"> \r\n        <input type=\"text\" [(ngModel)]=\"val.value\" #name=\"ngModel\" name=\"value{{i}}\">\r\n        <button (click)=\"removevalue(i)\">Remove</button>\r\n      </div> -->\r\n      \r\n      \r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;;\">\r\n        <!-- <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\"\r\n                (click)=\"onYesClick()\">{{isEditMode ? 'Save' : 'Save'}}</button> -->\r\n        <button mat-raised-button type=\"button\" color=\"primary\" class=\"mr-8\" (click)=\"addSeconds()\" [disabled]=\"!form.valid\" >Add</button>\r\n        <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>","import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ChargingProfileCrudComponent } from './charging-profile-crud/charging-profile-crud.component';\r\nimport { TABS_DEMO_ROUTES } from './charging-profile-crud/routes';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : 'crud',component : ChargingProfileCrudComponent, children : TABS_DEMO_ROUTES\r\n    },\r\n    \r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class ChargingProfileRoutingModule{}","import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ChargingProfileRoutingModule } from './charging-profile-routing.module';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { ChargingProfileCrudComponent } from './charging-profile-crud/charging-profile-crud.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nimport { AddItemDialogComponent } from './addItem-dialog/addItem-dialog.component';\r\nimport {\r\n    NgxMatDatetimePickerModule, \r\n    NgxMatNativeDateModule, \r\n    NgxMatTimepickerModule ,\r\n    NgxMatDateFormats,\r\n    NGX_MAT_DATE_FORMATS,\r\n    NgxMatDateAdapter,\r\n    \r\n  } from '@angular-material-components/datetime-picker';\r\nconst COMPONENTS =[ChargingProfileCrudComponent, CreateComponent, ListComponent];\r\nconst COMPONENTS_DYNAMIC =[ActionDialogComponent,ViewDialogComponent,AddItemDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, ChargingProfileRoutingModule,FuseSharedModule,NgxMatDatetimePickerModule, \r\n        NgxMatNativeDateModule, \r\n        NgxMatTimepickerModule ,],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class ChargingProfile{}","\r\nimport { ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport { ViewDialogComponent } from '../view-dialog/view-dialog.component';\r\nimport { ChargingProfileService } from 'app/shared/services/charging-profile/charging-profile.service';\r\n\r\nexport class ChargingProfile {\r\n  chargingProfileId: string;\r\n  stack_level:number;\r\n  schedule_id:number;\r\n  schedule_period_id:number;\r\n  charging_profile_name: string;\r\n  validFrom: string;\r\n  validTo: string;\r\n  duration: string;\r\n  startSchedule: string;\r\n  minChargingRate: string;\r\n  startPeriod: string;\r\n  limit: string;\r\n  numberPhases: string;\r\n  ChargingRateUnit: string;\r\n  chargingProfilePurpose: string;\r\n  chargingProfileKind: string;\r\n  recurrencyKind: string;\r\n  status: string;\r\n  statusString: string;\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class ListComponent implements OnInit {\r\n  filterEntity: ChargingProfile;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['charging_profile_name','stack_level', 'chargingProfilePurpose', 'chargingProfileKind','status','action'];\r\n  head = [['Charging Profile Name','Stack Level', 'Charging Profile Kind','Charging Profile Purpose',  'Recurrency Kind','Duration',\r\n    'Number Phase','Min Charging Rate','Charging Rate Unit','Status']];\r\n\r\n  dataSource: MatTableDataSource<ChargingProfile>;\r\n\r\n  chargingProList: ChargingProfile[];\r\n  localStorage: any;\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  dialogRef: any;\r\n  charProNameSearch = false;\r\n  charProPurSearch = false;\r\n  recuKindSearch = false;\r\n  durationSearch = false;\r\n  numPhasesSearch =false;\r\n  charProfKindSearch = false;\r\n  stack_levelSearch= false;\r\n  statusSearch =false;\r\n  exportedData: any[];\r\n  constructor(private clientService: ClientService, public dialog: MatDialog, private chargingProfileService: ChargingProfileService,\r\n    private snackBar: MatSnackBar,private cdr: ChangeDetectorRef) {\r\n    // Create 100 users\r\n    // const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\r\n\r\n    // Assign the data to the data source for the table to render\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getChargingProfile();\r\n    this.filterEntity = new ChargingProfile();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getChargingProfile() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.chargingProfileService.getAllChargingProfileList().subscribe(\r\n      (resp: any) => {\r\n        if (resp != null) {\r\n          this.chargingProList = resp.data;\r\n          for (var i = 0; i < this.chargingProList.length; i++) {\r\n            if (this.chargingProList[i].status == 'N') {\r\n              this.chargingProList[i].statusString = 'Inactive';\r\n            } else {\r\n              this.chargingProList[i].statusString = 'Active';\r\n            }\r\n          }\r\n          this.dataSource = new MatTableDataSource(this.chargingProList);\r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n        }\r\n        else {\r\n          this.snackBar.open(MessageConstant.NoRecordFoundMessage, 'Dismiss', { duration: 3000 })\r\n          return;\r\n        }\r\n      },\r\n      (err) => {\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  delete(id) {\r\n    this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n      disableClose: true\r\n    });\r\n    //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n    this.confirmDialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.chargingProfileService.chargingProfileDelete(id,this.localStorage.userId).subscribe(\r\n          (resp: any) => {\r\n            if(resp.status == true){\r\n              this.getChargingProfile();\r\n              this.snackBar.open(MessageConstant.deleteMessage, 'Dismiss', { duration: 2000 });\r\n              this.cdr.detectChanges();\r\n            }else{\r\n                this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 2000 });\r\n            }\r\n            \r\n          }, (err) => {\r\n              this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 2000 });\r\n          }\r\n        )\r\n      }\r\n      this.confirmDialogRef = null;\r\n    });\r\n\r\n  }\r\n\r\n\r\n  openDialog(action,data): void {\r\n    \r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '1200px',\r\n      data: params,\r\n      autoFocus: false,\r\n      disableClose: true, \r\n      panelClass: 'app-action-dialog',   \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.getChargingProfile();\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n  viewDialog(action,data) : void{\r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n      width: '1200px',\r\n      data: params,\r\n      panelClass: 'app-action-dialog',\r\n      autoFocus: false,\r\n      disableClose: true    \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getChargingProfile();\r\n    });\r\n  }\r\n  changeVisibility(visibleOption) {\r\n    if (visibleOption == 'charProNameSearch') {\r\n      this.charProNameSearch = !this.charProNameSearch;\r\n      this.filterEntity.charging_profile_name = '';\r\n    }\r\n    if (visibleOption == 'charProfKindSearch') {\r\n      this.charProfKindSearch = !this.charProfKindSearch;\r\n      this.filterEntity.chargingProfileKind = '';\r\n    }\r\n    if (visibleOption == 'charProPurSearch') {\r\n      this.charProPurSearch = !this.charProPurSearch;\r\n      this.filterEntity.chargingProfilePurpose = '';\r\n    }\r\n\r\n    if (visibleOption == 'recuKindSearch') {\r\n      this.recuKindSearch = !this.recuKindSearch;\r\n      this.filterEntity.recurrencyKind = '';\r\n    }\r\n\r\n    if (visibleOption == 'durationSearch') {\r\n      this.durationSearch = !this.durationSearch;\r\n      this.filterEntity.duration = '';\r\n    }\r\n    if (visibleOption == 'numPhasesSearch') {\r\n      this.numPhasesSearch = !this.numPhasesSearch;\r\n      this.filterEntity.numberPhases = '';\r\n    }\r\n    if (visibleOption == 'stack_levelSearch') {\r\n      this.stack_levelSearch = !this.stack_levelSearch;\r\n      this.filterEntity.stack_level = null;\r\n    }\r\n    if (visibleOption == 'statusSearch') {\r\n      this.statusSearch = !this.statusSearch;\r\n      this.filterEntity.statusString = null;\r\n    }\r\n  }\r\n  tableExport() {\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chargingProf = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = {\r\n        'Charging Profile Name': chargingProf.charging_profile_name,'Stack Level': chargingProf.stack_level, 'Charging Profile Kind': chargingProf.chargingProfileKind,\r\n        'Charging Profile Purpose': chargingProf.chargingProfilePurpose, 'Recurrency Kind': chargingProf.recurrencyKind, 'Duration': chargingProf.duration,\r\n        'Number Phases': chargingProf.numberPhases, 'Min Charging Rate': chargingProf.minChargingRate, 'Charging Rate Unit': chargingProf.ChargingRateUnit,\r\n        'Valid From': chargingProf.validFrom, 'Valid To': chargingProf.validTo, 'Start Schedule': chargingProf.startSchedule,'Status': chargingProf.statusString\r\n      };\r\n      this.exportedData.push(data);\r\n    }\r\n    const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n    const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, 'Charging Profile List');\r\n    XLSX.writeFile(workBook, 'Charging Profile.xlsx');\r\n  }\r\n\r\n  pdfExport() {\r\n    var doc = new jsPDF({ // set needed dimensions for any elemen\r\n\r\n    });\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chargingProf = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = [chargingProf.charging_profile_name,chargingProf.stack_level, chargingProf.chargingProfileKind, chargingProf.chargingProfilePurpose,\r\n      chargingProf.recurrencyKind,chargingProf.duration,chargingProf.numberPhases,chargingProf.minChargingRate,chargingProf.ChargingRateUnit,\r\n      chargingProf.statusString]; //chargingProf.validFrom,chargingProf.validTo,chargingProf.startSchedule,\r\n\r\n      this.exportedData.push(data);\r\n    }\r\n    var img = new Image();\r\n    var imgRight = new Image();\r\n    var src = 'assets/images/logos/logo_sparkev_main.png';\r\n    var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n    imgRight.src = srcSparkEV;\r\n    var createdDate = new Date().toLocaleString(('en-GB'));\r\n    img.src = src;\r\n    doc.setFontSize(11);\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(18);\r\n\r\n    (doc as any).autoTable({\r\n      head: this.head,\r\n      body: this.exportedData,\r\n      theme: 'grid',\r\n      headStyles: { fontStyle: 'majalla', fillColor: [11, 148, 68] },\r\n      styles: {\r\n        cellPadding: 1,\r\n        fontSize: 8,\r\n\r\n      },\r\n\r\n      margin: { top: 22 },\r\n      didDrawCell: data => {\r\n      },\r\n      didDrawPage: data => {\r\n        doc.addImage(img , 15, 7, 15, 6);\r\n        doc.addImage(imgRight, 170, 7, 25, 6);\r\n\r\n        doc.text('Charging Profile List Report', doc.internal.pageSize.getWidth() / 2, 11, { align: 'center' });\r\n\r\n        doc.setTextColor(211, 211, 211);\r\n        doc.setFontSize(60);\r\n        doc.setGState(doc.GState({ opacity: 0.6 }));\r\n        doc.text('Confidential/Not for Public use', 25, 285, null, 60,);\r\n        doc.setGState(doc.GState({ opacity: 1 }));\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(9);\r\n        doc.text('Date:' + createdDate, 15, 18);\r\n\r\n        doc.text('Generated By:' + this.localStorage.f_Name, 195, 18, { align: 'right' });\r\n        doc = this.addWaterMark(doc);\r\n      }\r\n    })\r\n\r\n    // below line for Open PDF document in new tab\r\n    doc.output('dataurlnewwindow')\r\n\r\n    // below line for Download PDF document  \r\n    doc.save('Charging Profile List report.pdf');\r\n\r\n  }\r\n  addWaterMark(doc) {\r\n    var newpage = doc.getNumberOfPages();\r\n    const i = doc.internal.getNumberOfPages();\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(10);\r\n    //Print Page 1 of 4 for example\r\n\r\n    doc.text('Page ' + String(i) + ' of ' + String(newpage), 210 - 20, 297 - 10, null, null, \"right\")\r\n    return doc;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n","<div style=\"text-align: left ;margin-left: 10px;margin-bottom:10px;margin-top: 10px;\">\r\n    <button mat-mini-fab color=\"primary\" (click)=\"tableExport()\" matTooltip=\"Excel Download\">\r\n        <mat-icon>sim_card_download</mat-icon>\r\n    </button>&nbsp;&nbsp;\r\n    <button mat-mini-fab color=\"primary\" (click)=\"pdfExport()\" matTooltip=\"PDF Download\">\r\n        <mat-icon>picture_as_pdf</mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\">\r\n\r\n        <div class=\"mat-elevation-z8\">\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\" [exampleEntity]=\"filterEntity\"\r\n                [filterType]=\"filterType\" matSort class=\"mat-elevation-z8\">\r\n\r\n                <ng-container matColumnDef=\"charging_profile_name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!charProNameSearch\" class=\"custom_font_size\" style=\"display: flex;\">Charging Profile\r\n                            Name <mat-icon matSuffix (click)=\"changeVisibility('charProNameSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"charProNameSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Charging Profile Name\" [(ngModel)]=\"filterEntity.charging_profile_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('charProNameSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.charging_profile_name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"stack_level\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!stack_levelSearch\" class=\"custom_font_size\" style=\"display: flex;\">Stack Level\r\n                             <mat-icon matSuffix (click)=\"changeVisibility('stack_levelSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"stack_levelSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Charging Profile Name\" [(ngModel)]=\"filterEntity.stack_level\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('stack_levelSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.stack_level}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"chargingProfilePurpose\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!charProPurSearch\" class=\"custom_font_size\" style=\"display: flex;\">Charging Profile Purpose\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('charProPurSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"charProPurSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Charging Profile Purpose \" [(ngModel)]=\"filterEntity.chargingProfilePurpose\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('charProPurSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.chargingProfilePurpose}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"chargingProfileKind\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!charProfKindSearch\" class=\"custom_font_size\" style=\"display: flex;\">Charging Profile Kind\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('charProfKindSearch',$event)\">\r\n                                search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"charProfKindSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Charging Profile Kind\" [(ngModel)]=\"filterEntity.chargingProfileKind\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('charProfKindSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.chargingProfileKind}} </td>\r\n                </ng-container>\r\n\r\n                <!-- <ng-container matColumnDef=\"recurrencyKind\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!recuKindSearch\" class=\"custom_font_size\" style=\"display: flex;\">Recurrency Kind\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('recuKindSearch',$event)\">\r\n                                search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"recuKindSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Recurrency Kind\" [(ngModel)]=\"filterEntity.recurrencyKind\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('recuKindSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.recurrencyKind}} </td>\r\n                </ng-container> -->\r\n                <!-- <ng-container matColumnDef=\"duration\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!durationSearch\" class=\"custom_font_size\" style=\"display: flex;\">Duration\r\n                            &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('durationSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"durationSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Duration\" [(ngModel)]=\"filterEntity.duration\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('durationSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" >{{row.duration}} </td>\r\n                </ng-container> -->\r\n                <!-- <ng-container matColumnDef=\"numberPhases\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!numPhasesSearch\" class=\"custom_font_size\" style=\"display: flex;\">No.Phases\r\n                            &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('numPhasesSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"numPhasesSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Number Phases\" [(ngModel)]=\"filterEntity.numberPhases\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('numPhasesSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" >{{row.numberPhases}} </td>\r\n                </ng-container> -->\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!statusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Status &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <span class=\"custom_font_size\">Action</span>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        <mat-icon color=\"primary\" matTooltip=\"View\" (click)=\"viewDialog('VIEW',element)\"\r\n                            style=\"cursor:pointer\">visibility</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" (click)=\"openDialog('EDIT',element)\"\r\n                            style=\"cursor:pointer\">edit</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"delete(element.chargingProfileId)\" style=\"cursor:pointer\">\r\n                            delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[ 10,30, 50, 100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at http://angular.io/license -->","\r\nimport { ChangeDetectorRef, ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ChargingProfileService } from 'app/shared/services/charging-profile/charging-profile.service';\r\nimport { Router } from '@angular/router';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\n\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-charging-profile-crud',\r\n  templateUrl: './charging-profile-crud.component.html',\r\n  styleUrls: ['./charging-profile-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class ChargingProfileCrudComponent implements OnInit {\r\n  // Nav bar demo\r\n  tabLinks = [\r\n    // { label: 'Charging Profile', link: 'list' },\r\n    // { label: 'Add New', link: 'create' },\r\n  ];\r\n\r\n  menuArray: any;\r\n  schTab: boolean;\r\n  perTab: boolean;\r\n  localStorage: any;\r\n  objectData: any;\r\n  objectChildData: any;\r\n  tempLinks = [];\r\n  childData: any;\r\n  constructor(private router: Router, private cdr: ChangeDetectorRef, private _utilityService: UtilityService) {\r\n\r\n  }\r\n  ngAfterViewInit() {\r\n    this._utilityService.activeMenuItems$.subscribe(menuItemSelecte => {\r\n      this.menuArray = menuItemSelecte;\r\n      if (this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined) {\r\n        this.menuArray = JSON.parse(localStorage.getItem('activeMenuItems'));\r\n      }\r\n      this.cdr.detectChanges();\r\n    })\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    let nav_list = this.localStorage.nav_list_with_tab;\r\n    nav_list.filter((x) => {\r\n      if (x.id === \"logsandHistory\") {\r\n        this.objectData = x;\r\n        if (this.objectData.children != null && this.objectData.children != undefined) {\r\n          this.objectData.children.filter((y) => {\r\n            if (y.id === \"chargingProfile\") {\r\n              this.objectChildData = y;\r\n              if (this.objectChildData.children != null && this.objectChildData.children != undefined) {\r\n                this.objectChildData.children.filter((z) => {\r\n                  let isDefaultRoutePermeted = false;\r\n                  if (z.id === \"chargingProfile\") {\r\n                    isDefaultRoutePermeted = true;\r\n                    this.tempLinks.push({ label: 'Charging Profile', link: 'list' });\r\n                  }\r\n                  if (z.id === \"addNew\") {\r\n                    this.tempLinks.push({ label: 'Add New', link: 'create' });\r\n                  }\r\n                  this.tabLinks = this.tempLinks;\r\n                  if (!isDefaultRoutePermeted) {\r\n                    this.router.navigate(['/logsandHistory/chargingProfile/crud/' + this.tempLinks[0].link]);\r\n                  }\r\n                });\r\n              }\r\n\r\n            }\r\n\r\n          });\r\n        }\r\n\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent { }\r\n\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\" \r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\" >\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn, AbstractControl, FormControl, FormArray } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith, tap } from 'rxjs/operators';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { DatePipe } from '@angular/common';\r\nimport { ChargingProfileService } from 'app/shared/services/charging-profile/charging-profile.service';\r\nimport { AddItemDialogComponent } from '../addItem-dialog/addItem-dialog.component';\r\n\r\nexport interface ChargingProfileSchedule {\r\n  charging_schedule_id: number;\r\n  scheduleData: ChargingSchedulePeriod[]\r\n  status: string;\r\n  modifyby: number;\r\n}\r\nexport interface ChargingSchedulePeriod {\r\n  id: number;\r\n  start_period: number;\r\n  limit: number;\r\n  numberof_phase_id: number;\r\n}\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-action-dialog',\r\n  templateUrl: './action-dialog.component.html',\r\n  styleUrls: ['./action-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n  providers: [DatePipe]\r\n})\r\n\r\n\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n  selectedIndex = 0;\r\n  isFirstTab = true;\r\n  isSecondTab = true;\r\n  chargingProfId: any;\r\n  charProf_forms: FormGroup;\r\n  localStorage: any;\r\n  charProfPurpose: any;\r\n  recurKind: any;\r\n  profileKind: any;\r\n  params: any;\r\n  filteredOptionsCharProfPurp: Observable<any[]>;\r\n  filteredOptionsRecurKind: Observable<any[]>;\r\n  filteredOptionsProfileKind: Observable<any[]>;\r\n  public date: moment.Moment;\r\n  public disabled = false;\r\n  public showSpinners = true;\r\n  public showSeconds = true;\r\n  public touchUi = false;\r\n  public enableMeridian = false;\r\n  public minDate: moment.Moment;\r\n  public maxDate: moment.Moment;\r\n  public stepHour = 1;\r\n  public stepMinute = 1;\r\n  public stepSecond = 1;\r\n  scheduleTab: boolean = false;\r\n  periodTab: boolean = false;\r\n  isEditMode = false;\r\n  status = true;\r\n  tempDate = new Date();\r\n  currDate: any = new Date();\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  //messageConstant = MessageConstant;\r\n  charSchud_forms: FormGroup;\r\n  charRateUnit: any;\r\n  @ViewChild(\"toggleElement2\") ref2: any;\r\n  filteredOptionsCharRate: Observable<any[]>;\r\n  status2 = true;\r\n  schPerio_forms: FormGroup;\r\n  num_Phases: any;\r\n  @ViewChild(\"toggleElement3\") ref3: any;\r\n  status3 = true;\r\n  filteredOptionsNumPhases: Observable<any[]>;\r\n  menuArray: any;\r\n  schu_PeriodData: any;\r\n  char_SchudData: any;\r\n  SchPeriodStatus: string;\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private chargingProfileService: ChargingProfileService, private snackBar: MatSnackBar,\r\n    public dialogRef: MatDialogRef<ActionDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, private datePipe: DatePipe,\r\n    public dialog: MatDialog, private cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.menuArray = JSON.parse(localStorage.getItem('activeMenuItems'));\r\n    const fgroup = this.createAddPerForm();\r\n    this.params = this.data;\r\n  \r\n    this.chargingProfId = this.params.data.chargingProfileId;\r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.charProf_forms = this.fb.group({\r\n      stack_level: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      char_proName: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      char_profKind: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      charg_profPur: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      recur_kind: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      toDate: [''],\r\n      fromDate: [''],\r\n      status: this.status == true ? 'Y' : 'N'\r\n    });\r\n\r\n    this.charSchud_forms = this.fb.group({\r\n      duration: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      charging_rate_unit: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      start_schedule: [new Date()],\r\n      charge_rate: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      status2: this.status2 == true ? 'Y' : 'N'\r\n    });\r\n\r\n    this.schPerio_forms = this.fb.group({\r\n      periodForm: this.fb.array([]),\r\n      status3: this.status3 == true ? 'Y' : 'N'\r\n\r\n    });\r\n\r\n    if (this.isEditMode) {\r\n      this.getChargingProgilePurpose();\r\n      this.getChargingRecurrencyKind();\r\n      this.getChargingProfileKind();\r\n      this.assignValuesCharProfile(this.params);\r\n      this.assignValuesCharSchedule(this.params);\r\n      this.getChargingRateUnit();\r\n      //this.assignValuesCharPeriod(this.params);\r\n      this.getNum_Phases(fgroup);\r\n    }\r\n  }\r\n  createAddPerForm() {\r\n    return this.fb.group({\r\n      id: new FormControl(''),\r\n      start_period: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]*$/)]),\r\n      limit: new FormControl(''),\r\n      num_phases: new FormControl(''),\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  closeActionPanel() {\r\n    this.dialogRef.close();\r\n  }\r\n  assignValuesCharProfile(params) {\r\n    this.charProf_forms.get('stack_level').setValue(params.data.stack_level);\r\n    this.charProf_forms.get('char_proName').setValue(params.data.charging_profile_name);\r\n    this.charProf_forms.get('toDate').setValue(params.data.validTo);\r\n    this.charProf_forms.get('fromDate').setValue(params.data.validFrom);\r\n    this.status = params.data.status == 'Y' ? true : false;\r\n  }\r\n  assignValuesCharSchedule(params) {\r\n    this.getScheduleByProfileId(params.data.chargingProfileId);\r\n  }\r\n\r\n  //tab-1\r\n  updateCharProfile() {\r\n\r\n    if (this.charProf_forms.valid) {\r\n      let formValues = this.charProf_forms.value;\r\n\r\n      const params: any = {\r\n        stack_level: formValues.stack_level,\r\n        charging_profile_name: formValues.char_proName,\r\n        charging_profile_kind_id: formValues.char_profKind.id,\r\n        recurrency_kind_id: formValues.recur_kind.id,\r\n        charging_profile_purpose_id: formValues.charg_profPur.id,\r\n        valid_from: this.datePipe.transform(formValues.fromDate, \"yyyy-MM-dd HH:mm:ss\"),\r\n        valid_to: this.datePipe.transform(formValues.toDate, \"yyyy-MM-dd HH:mm:ss\"),\r\n        status: this.status == true ? 'Y' : 'N'\r\n      }\r\n\r\n      if (this.isEditMode) {\r\n        params.id = this.params.data.chargingProfileId,\r\n          params.modifyby = this.localStorage.userId;\r\n      } else {\r\n        params.created_by = this.localStorage.userId;\r\n      }\r\n      if (this.isEditMode) {\r\n        this.chargingProfileService.updateChargingProfile(params).subscribe(\r\n          (resp: any) => {\r\n            if (resp.status == true) {\r\n              this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n              this.isFirstTab = false;\r\n              this.selectedIndex += 1;\r\n            } else {\r\n              this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n            }\r\n          },\r\n          (err) => {\r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      } else {\r\n        this.chargingProfileService.chargingProfileCreation(params).subscribe(\r\n          (resp: any) => {\r\n\r\n            this.snackBar.open(MessageConstant.chargingProfileCreate, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n\r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n\r\n      }\r\n    } else {\r\n      this.snackBar.open(MessageConstant.formInvalid, 'Dismiss', { duration: 5000 });\r\n    }\r\n  }\r\n  onTabChange(event) {\r\n    this.selectedIndex = event.index;\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n        ? 'Not a valid email'\r\n        : '';\r\n  }\r\n\r\n  updateStatus(event) {\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n\r\n  getChargingProgilePurpose() {\r\n    this.chargingProfileService.getChargingProfilePurpose().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.charProfPurpose = resp.data;\r\n          if (this.isEditMode) {\r\n            const toSelect = this.charProfPurpose.find(c => c.value == this.params.data.chargingProfilePurpose);\r\n            this.charProf_forms.get('charg_profPur').setValue(toSelect);\r\n          }\r\n          this.filteredOptionsCharProfPurp = this.charProf_forms.controls.charg_profPur.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharProfPurpose(name) : this.charProfPurpose)\r\n            );\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n  private _filterCharProfPurpose(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.charProfPurpose.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharProfPur(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  getChargingRecurrencyKind() {\r\n    this.chargingProfileService.getRecurrencyKind().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.recurKind = resp.data;\r\n          \r\n          if (this.isEditMode) {\r\n            const toSelect = this.recurKind.find(c => c.value == this.params.data.recurrencyKind);\r\n            this.charProf_forms.get('recur_kind').setValue(toSelect);\r\n          }\r\n          this.filteredOptionsRecurKind = this.charProf_forms.controls.recur_kind.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharRecurKind(name) : this.recurKind)\r\n            );\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n  }\r\n  private _filterCharRecurKind(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.recurKind.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharRecurKind(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  getChargingProfileKind() {\r\n    this.chargingProfileService.getChargingProfileKind().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.profileKind = resp.data;\r\n          if (this.isEditMode) {\r\n            const toSelect = this.profileKind.find(c => c.value == this.params.data.chargingProfileKind);\r\n            this.charProf_forms.get('char_profKind').setValue(toSelect);\r\n          }\r\n          this.filteredOptionsProfileKind = this.charProf_forms.controls.char_profKind.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharProfileKind(name) : this.profileKind)\r\n            );\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n  private _filterCharProfileKind(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.profileKind.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharProfileKind(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  //tab-2\r\n  updateCharSchedule() {\r\n    if (this.charSchud_forms.valid) {\r\n      let formValues = this.charSchud_forms.value;\r\n\r\n      if (this.char_SchudData != undefined && this.char_SchudData != null) {\r\n        const params: any = {\r\n          charging_profile_id: this.params.data.chargingProfileId,\r\n          duration: formValues.duration,\r\n          start_schedule: this.datePipe.transform(formValues.start_schedule, \"yyyy-MM-dd\"),\r\n          mincharging_rate: formValues.charge_rate,\r\n          charging_rate_unit_id: formValues.charging_rate_unit.id,\r\n          status: this.status2 == true ? 'Y' : 'N'\r\n        }\r\n\r\n        if (this.isEditMode) {\r\n          params.id = this.char_SchudData.id,\r\n            params.modifyby = this.localStorage.userId;\r\n        } else {\r\n          params.created_by = this.localStorage.userId;\r\n        }\r\n        if (this.isEditMode) {\r\n          this.chargingProfileService.updateChargingSchedule(params).subscribe(\r\n            (resp: any) => {\r\n              if (resp.status == true) {\r\n                this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n                if(this.schu_PeriodData != undefined && this.schu_PeriodData != null){\r\n                  this.isSecondTab = false;\r\n                  this.selectedIndex += 1;\r\n                }else{\r\n                  this.snackBar.open(MessageConstant.errorMessageForChargingProfilePeriod, 'Dismiss', { duration: 5000 });\r\n                }\r\n                \r\n              } else {\r\n                this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n              }\r\n            },\r\n            (err) => {\r\n              this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n            }\r\n          )\r\n        } else {\r\n          this.chargingProfileService.chargingScheduleCreation(params).subscribe(\r\n            (resp: any) => {\r\n\r\n              this.snackBar.open(MessageConstant.chargingScheduleCreate, 'Dismiss', { duration: 5000 });\r\n              this.dialogRef.close();\r\n            },\r\n            (err) => {\r\n\r\n              this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n            }\r\n          )\r\n\r\n        }\r\n\r\n      } else {\r\n        this.snackBar.open(MessageConstant.errorMessageForChargingProfileSchedule, 'Dismiss', { duration: 5000 });\r\n        //return\r\n      }\r\n\r\n    } else {\r\n      this.snackBar.open(MessageConstant.formInvalid, 'Dismiss', { duration: 5000 });\r\n    }\r\n\r\n  }\r\n\r\n  getChargingRateUnit() {\r\n    this.chargingProfileService.getChargingRateUnit().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.charRateUnit = resp.data;\r\n          if (this.isEditMode) {\r\n\r\n            if (this.char_SchudData != undefined && this.char_SchudData.charging_rate_unit_id != undefined) {\r\n              const toSelect = this.charRateUnit.find(c => c.id == this.char_SchudData.charging_rate_unit_id); //this.char_SchudData.charging_rate_unit_id //this.params.data.ChargingRateUnit\r\n              this.charSchud_forms.get('charging_rate_unit').setValue(toSelect);\r\n            }\r\n          }\r\n          this.filteredOptionsCharRate = this.charSchud_forms.controls.charging_rate_unit.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharRateUnit(name) : this.charRateUnit)\r\n            );\r\n\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  private _filterCharRateUnit(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.charRateUnit.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharRate(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  updateStatus2(event) {\r\n    this.status2 = event.checked;\r\n    this.ref2.checked = this.status2;\r\n  }\r\n\r\n  //tab-3\r\n\r\n  updateSchuPeriod() {\r\n    if (this.schPerio_forms.valid) {\r\n      let formValues = this.schPerio_forms.value;\r\n\r\n        let perForm = [];\r\n        formValues.periodForm.forEach(item => {\r\n          perForm.push({\r\n            id: item.id,\r\n            start_period: item.start_period,\r\n            period_limit: item.limit,\r\n            numberof_phase_id: item.num_phases,\r\n          })\r\n        });\r\n        const params: ChargingProfileSchedule = {\r\n          charging_schedule_id: this.char_SchudData.id, //this.params.data.schedule_id,\r\n          scheduleData: perForm,\r\n          status: this.status3 == true ? 'Y' : 'N',\r\n          modifyby: this.localStorage.userId\r\n        }\r\n\r\n        // if (this.isEditMode) {\r\n        //     params.id = this.params.data.schedule_period_id,\r\n        //     params.modifyby = this.localStorage.userId;\r\n        // } else {\r\n        //     params.created_by = this.localStorage.userId;\r\n        // }\r\n        \r\n        if (this.isEditMode) {\r\n          this.chargingProfileService.updateChargingSchedulePeriod(params).subscribe(\r\n            (resp: any) => {\r\n              if (resp.status == true) {\r\n                this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n                this.dialogRef.close();\r\n              } else {\r\n                this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n              }\r\n            },\r\n            (err) => {\r\n              this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n            }\r\n          )\r\n        } else {\r\n          this.chargingProfileService.chargingSchedulePeriodCreation(params).subscribe(\r\n            (resp: any) => {\r\n\r\n              this.snackBar.open(MessageConstant.chargingSchedulePeriodCreate, 'Dismiss', { duration: 5000 });\r\n              this.dialogRef.close();\r\n            },\r\n            (err) => {\r\n\r\n              this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n            }\r\n          )\r\n        }\r\n\r\n    } else {\r\n      this.snackBar.open(MessageConstant.formInvalid, 'Dismiss', { duration: 5000 });\r\n    }\r\n\r\n  }\r\n\r\n  getNum_Phases(fgroup: FormGroup) {\r\n    this.chargingProfileService.getNumberPhases().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.num_Phases = resp.data;\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  updateStatus3(event) {\r\n    this.status3 = event.checked;\r\n    this.ref3.checked = this.status3;\r\n  }\r\n\r\n  addItem() {\r\n    const PERform = this.schPerio_forms.get('periodForm') as FormArray;\r\n    //const fgroup = this.createAddPerForm();\r\n    PERform.push(this.createAddPerForm());\r\n\r\n  }\r\n  setStartPeriod(i) {\r\n    const dialogRef = this.dialog.open(AddItemDialogComponent, {\r\n      width: '600px',\r\n      data: { i },\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog'\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result != undefined && result != 0) {\r\n        const formPre = this.schPerio_forms.get('periodForm') as FormArray;\r\n        formPre.controls[i].get('start_period').setValue(result);\r\n        //this.schPerio_forms.get('periodForm')['controls']\r\n        this.cdr.detectChanges();\r\n      } else {\r\n        return;\r\n      }\r\n\r\n    });\r\n  }\r\n  removevalue(i) {\r\n    const formRemove = this.schPerio_forms.get('periodForm') as FormArray\r\n    if (formRemove.length > 1) {\r\n      formRemove.removeAt(i)\r\n    } else {\r\n      formRemove.reset()\r\n    }\r\n  }\r\n\r\n  getScheduleByProfileId(charProfileId) {\r\n    this.chargingProfileService.getChargerScheduleByProfileId(charProfileId).subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.char_SchudData = resp.data[0];\r\n          \r\n          this.charSchud_forms.get('duration').setValue(this.char_SchudData.duration);\r\n          this.charSchud_forms.get('start_schedule').setValue(this.char_SchudData.start_schedule);\r\n          //this.charSchud_forms.get('charging_rate_unit').setValue(this.char_SchudData.charging_rate_unit_id);\r\n          this.charSchud_forms.get('charge_rate').setValue(this.char_SchudData.mincharging_rate);\r\n          this.status2 = this.char_SchudData.status == 'Y' ? true : false;\r\n          this.getSchedulePeriodByScheduleId(this.char_SchudData.id);\r\n          this.getChargingRateUnit()\r\n        }\r\n      }, (error) => {\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n  getSchedulePeriodByScheduleId(charSchudId) {\r\n    this.chargingProfileService.getChargerSchedulePeriodByScheduleId(charSchudId).subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.schu_PeriodData = resp.data\r\n          \r\n          const formPeriod = this.schPerio_forms.get('periodForm') as FormArray;\r\n          for (var i = 0; i < this.schu_PeriodData.length; i++) {\r\n            this.SchPeriodStatus = this.schu_PeriodData[i].status;\r\n            const childForm = this.createAddPerForm();\r\n            formPeriod.push(childForm);\r\n            formPeriod.controls[i].get('id').setValue(this.schu_PeriodData[i].id);\r\n            formPeriod.controls[i].get('start_period').setValue(this.schu_PeriodData[i].start_period);\r\n            formPeriod.controls[i].get('limit').setValue(this.schu_PeriodData[i].period_limit);\r\n            formPeriod.controls[i].get('num_phases').setValue(this.schu_PeriodData[i].numberof_phase_id);\r\n          }\r\n          this.status3 = this.SchPeriodStatus == 'Y' ? true : false;\r\n        }\r\n\r\n      }, (error) => {\r\n\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n\r\n<mat-toolbar class=\"action_toolbar\">{{menuArray?.title}}</mat-toolbar>\r\n\r\n<div style=\"max-height: 22vw;overflow: auto;\">\r\n\r\n  <mat-tab-group [selectedIndex]=\"selectedIndex\" (selectedTabChange)=\"onTabChange($event)\" class=\"pt-0 pb-0 mt-0 mb-0\">\r\n    <!-- tab-1 -->\r\n    <mat-tab label=\"Create Charging Profile\">\r\n      <div id=\"charProf_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n        <form [formGroup]=\"charProf_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\">\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Stack Level</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"stack_level\" type=\"number\" min=\"0\" required\r\n                autocomplete=\"off\" id=\"stack_level\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter duration\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charProf_forms.get('stack_level').hasError('required')\">Please enter stack level\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charProf_forms.get('stack_level').hasError('pattern')\">Special character are not allowed\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Kind</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"char_profKind\" required id=\"chargerCreateCModel\"\r\n                [matAutocomplete]=\"chargingProfAuto\" id=\"chargingModelAutomat\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter charging profile kind\">help\r\n                </mat-icon>\r\n              </div>\r\n              <mat-autocomplete #chargingProfAuto=\"matAutocomplete\" [displayWith]=\"displayCharProfileKind\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsProfileKind | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_profKind').hasError('required')\">Please select charging profile\r\n                kind\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Name</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"char_proName\" type=\"search\" maxlength=\"50\" required\r\n                autocomplete=\"off\" id=\"char_proName\">\r\n              <mat-error *ngIf=\"charProf_forms.get('char_proName').hasError('required')\">Please enter charging profile\r\n                name\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_proName').hasError('pattern')\">Special character are not\r\n                allowed\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Recurrency Kind</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"recur_kind\" required id=\"recur_kind\"\r\n                [matAutocomplete]=\"recuKindAuto\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select recurrency kind \">help</mat-icon>\r\n              </div>\r\n              <mat-autocomplete #recuKindAuto=\"matAutocomplete\" [displayWith]=\"displayCharRecurKind\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsRecurKind | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_profKind').hasError('required')\">Please select recurrency kind\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Purpose</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"charg_profPur\" required id=\"charg_profPur\"\r\n                [matAutocomplete]=\"profPurposeAuto\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charging profile purpose \">help\r\n                </mat-icon>\r\n              </div>\r\n              <mat-autocomplete #profPurposeAuto=\"matAutocomplete\" [displayWith]=\"displayCharProfPur\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsCharProfPurp | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('charg_profPur').hasError('required')\">Please select charging profile\r\n                purpose\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"23\" class=\"pr-4\">\r\n              <mat-label>Valid From</mat-label>\r\n              <input matInput [ngxMatDatetimePicker]=\"fDate\" formControlName=\"fromDate\" [min]=\"minDate\" [max]=\"maxDate\"\r\n                [disabled]=\"disabled\" readonly required>\r\n\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon class=\"secondary-text\" matTooltip=\"Please enter valid from date and time\">help</mat-icon>\r\n                <mat-icon mat-icon-button type=\"button\" (click)=\"fDate.open(); $event.stopPropagation();\">today\r\n                </mat-icon>\r\n              </div>\r\n              <ngx-mat-datetime-picker #fDate [showSpinners]=\"showSpinners\" [showSeconds]=\"showSeconds\"\r\n                [stepHour]=\"stepHour\" [stepMinute]=\"stepMinute\" [stepSecond]=\"stepSecond\" [touchUi]=\"touchUi\"\r\n                [enableMeridian]=\"enableMeridian\">\r\n              </ngx-mat-datetime-picker>\r\n              <mat-error *ngIf=\"charProf_forms.get('fromDate').invalid\">Please enter valid from date and time\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"23\" class=\"pr-4\">\r\n              <mat-label>Valid To</mat-label>\r\n              <input matInput [ngxMatDatetimePicker]=\"tDate\" formControlName=\"toDate\" [min]=\"minDate\" [max]=\"maxDate\"\r\n                [disabled]=\"disabled\" readonly required>\r\n\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon class=\"secondary-text\" matTooltip=\"Please enter valid to date and time\">help</mat-icon>\r\n                <mat-icon mat-icon-button type=\"button\" (click)=\"tDate.open(); $event.stopPropagation();\">today\r\n                </mat-icon>\r\n              </div>\r\n              <ngx-mat-datetime-picker #tDate [showSpinners]=\"showSpinners\" [showSeconds]=\"showSeconds\"\r\n                [stepHour]=\"stepHour\" [stepMinute]=\"stepMinute\" [stepSecond]=\"stepSecond\" [touchUi]=\"touchUi\"\r\n                [enableMeridian]=\"enableMeridian\">\r\n              </ngx-mat-datetime-picker>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\" #toggleElement>\r\n              {{status ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"updateCharProfile()\">\r\n              {{isEditMode? 'Save' : 'Save'}}</button>\r\n            <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n\r\n    <!-- tab-2 -->\r\n    <mat-tab label=\"Create Charging Schedule\" [disabled]='isFirstTab'>\r\n      <div id=\"charSchud_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n        <form [formGroup]=\"charSchud_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"charSchud_forms\">\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Duration</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"duration\" type=\"number\" min=\"0\" required\r\n                autocomplete=\"off\" id=\"duration\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <!-- <mat-icon matSuffix class=\"secondary-text\">add_circle</mat-icon> -->\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter duration\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('duration').hasError('required')\">Please enter duration</mat-error>\r\n              <mat-error *ngIf=\"charSchud_forms.get('duration').hasError('pattern')\">Only number is allowd</mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Rate Unit</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"charging_rate_unit\" required id=\"charging_rate_unit\"\r\n                [matAutocomplete]=\"charRateAuto\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter charging rate unit\">help</mat-icon>\r\n              </div>\r\n              <mat-autocomplete #charRateAuto=\"matAutocomplete\" [displayWith]=\"displayCharRate\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsCharRate | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charging_rate_unit').hasError('required')\">Please enter charging\r\n                rate unit\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Start Schedule</mat-label>\r\n              <input matInput [matDatepicker]=\"dp3\" formControlName=\"start_schedule\" disabled>\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon style=\"padding-top:7px;\" class=\"secondary-text\" matTooltip=\"Please enter start schedule\">help\r\n                </mat-icon>\r\n                <mat-datepicker-toggle [for]=\"dp3\"></mat-datepicker-toggle>\r\n                <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('start_schedule').invalid\">Please enter start schedule</mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Min Charge Rate</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"charge_rate\" type=\"number\" min=\"0\" maxlength=\"50\" required\r\n                autocomplete=\"off\" id=\"charge_rate\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter min charger rate\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charge_rate').hasError('required')\">Please enter min charger rate only number is allowed\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charge_rate').hasError('pattern')\">Special character are not\r\n                allowed</mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status2\" (change)=\"updateStatus2($event)\" #toggleElement2>\r\n              {{status2 ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"updateCharSchedule()\">\r\n              {{isEditMode? 'Save' : 'Save'}}</button>\r\n            <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n    <!-- tab-3 -->\r\n    <mat-tab label=\"Create Schedule Period\" [disabled]=\"isSecondTab\">\r\n      <div id=\"schPerio_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n        <form [formGroup]=\"schPerio_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"schPerio_forms\">\r\n\r\n          <div formArrayName=\"periodForm\">\r\n            <div *ngFor=\"let period of schPerio_forms.get('periodForm')['controls']; let i = index;\" [formGroupName]=\"i\">\r\n\r\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Start Period(Sec)</mat-label>\r\n                  <input matInput formControlName=\"start_period\" type=\"number\" min=\"0\" required autocomplete=\"off\">\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter start period\">help</mat-icon>\r\n                  </div>\r\n                  <mat-error *ngIf=\"period.get('start_period').hasError('required')\">Please enter start period\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"period.get('start_period').hasError('pattern')\">Only number is allowed\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                <div fxFlex=\"1\" >\r\n                  <mat-icon  matTooltip=\"Set start period\" (click)=\"setStartPeriod(i)\" \r\n                  style=\"font-size: 2rem;color: darkcyan;float: right; margin-bottom: 1.5rem;\">add_circle</mat-icon>\r\n                </div>\r\n\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Limit</mat-label>\r\n                  <input matInput placeholder=\"\" formControlName=\"limit\" type=\"number\" min=\"0\" \r\n                    autocomplete=\"off\">\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter limit\">help\r\n                    </mat-icon>\r\n                  </div>\r\n                  <!-- <mat-error *ngIf=\"period.get('limit').hasError('required')\">Please enter limit\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"period.get('limit').hasError('pattern')\">Only number is allowed\r\n                  </mat-error> -->\r\n                </mat-form-field>\r\n\r\n\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Number Phases</mat-label>\r\n                  <mat-select formControlName=\"num_phases\">\r\n                    <mat-option *ngFor=\"let option of num_Phases\" [value]=\"option.id\">\r\n                      {{option.value}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select number phases\">help\r\n                  </mat-icon>\r\n                  <mat-error *ngIf=\"period.get('num_phases').hasError('required')\">Please select number phases\r\n                  </mat-error>\r\n                </mat-form-field>\r\n\r\n                <!-- <div fxFlex=\"5\" class=\"pr-4\">\r\n                  <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"removevalue(i)\" style=\"cursor:pointer;margin-bottom: 2rem !important;\">delete\r\n                  </mat-icon>\r\n                </div> -->\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status3\" (change)=\"updateStatus3($event)\" #toggleElement3>\r\n              {{status3 ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n          \r\n          \r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <div fxFlex=\"100\" class=\"pr-4\">\r\n              <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"updateSchuPeriod()\">\r\n                {{isEditMode? 'Save' : 'Save'}}</button>\r\n              <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n              <!-- <div style=\"float: right;\">\r\n                <button mat-mini-fab color=\"primary\" class=\"mr-8 pt-2\" type=\"button\" (click)=\"addItem()\"\r\n                  matTooltip=\"Add Item\">\r\n                  <mat-icon>add</mat-icon>\r\n                </button>\r\n              </div> -->\r\n            </div>  \r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n\r\n  </mat-tab-group>\r\n\r\n</div>","import { Component, OnInit, ViewChild ,ChangeDetectorRef} from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup, ValidatorFn, AbstractControl, FormArray, FormControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { ChargingProfileService } from 'app/shared/services/charging-profile/charging-profile.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { DatePipe } from '@angular/common';\r\nimport { DateService } from 'app/shared/services/utility/date.service';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { AddItemDialogComponent } from '../addItem-dialog/addItem-dialog.component'\r\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\nexport interface ChargingProfileSchedule{\r\n  charging_schedule_id:number;\r\n  scheduleData:ChargingSchedulePeriod[]\r\n  status:string;\r\n  created_by:number;\r\n}\r\nexport interface ChargingSchedulePeriod{\r\n  start_period:number;\r\n  limit:number;\r\n  numberof_phase_id:number;\r\n}\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n  providers: [DatePipe]\r\n})\r\nexport class CreateComponent implements OnInit {\r\n\r\n \r\n  selectedIndex = 0;\r\n  isFirstTab = true;\r\n  isSecondTab = true;\r\n  charProf_forms: FormGroup;\r\n  localStorage: any;\r\n  charProfPurpose: any;\r\n  recurKind: any;\r\n  profileKind: any;\r\n  //params:any;\r\n  filteredOptionsCharProfPurp: Observable<any[]>;\r\n  filteredOptionsRecurKind: Observable<any[]>;\r\n  filteredOptionsProfileKind: Observable<any[]>;\r\n  public date: moment.Moment;\r\n  public disabled = false;\r\n  public showSpinners = true;\r\n  public showSeconds = true;\r\n  public touchUi = false;\r\n  public enableMeridian = false;\r\n  minDate = new Date();\r\n  public maxDate: moment.Moment;\r\n  public stepHour = 1;\r\n  public stepMinute = 1;\r\n  public stepSecond = 1;\r\n  status = true;\r\n  tempDate = new Date();\r\n  currDate: any = new Date();\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  charSchud_forms: FormGroup;\r\n  charRateUnit: any;\r\n  @ViewChild(\"toggleElement2\") ref2: any;\r\n  filteredOptionsCharRate: Observable<any[]>;\r\n  status2 = true;\r\n\r\n  schPerio_forms: FormGroup;\r\n  num_Phases: any;\r\n  @ViewChild(\"toggleElement3\") ref3: any;\r\n  status3 = true;\r\n  filteredOptionsNumPhases: Observable<any[]>;\r\n  char_scheduleID: any;\r\n  chargingScheduleID:any;\r\n  chargingProfileID:any;\r\n  \r\n  \r\n  constructor(private fb: FormBuilder, private chargingProfileService: ChargingProfileService, private snackBar: MatSnackBar,\r\n    private router: Router, private datePipe: DatePipe, private dateService: DateService,public dialog: MatDialog,private cdr: ChangeDetectorRef) {\r\n      \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    const fgroup = this.createAddPerForm();\r\n    this.charProf_forms = this.fb.group({\r\n      stack_level: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      char_proName: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9_]*$/)]],\r\n      char_profKind: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      charg_profPur: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      recur_kind: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      toDate: [''],\r\n      fromDate: [''],\r\n      status: this.status == true ? 'Y' : 'N'\r\n    });\r\n\r\n    this.charSchud_forms = this.fb.group({\r\n      duration: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n      charging_rate_unit: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      start_schedule: [new Date()],\r\n      charge_rate: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]]\r\n    });\r\n\r\n    // this.schPerio_forms = this.fb.group({\r\n      \r\n    //   start_period: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n    //   limit: ['', [Validators.required, Validators.pattern(/^[0-9]*$/)]],\r\n    //   num_phases: ['', [autocompleteObjectValidator(), Validators.required]],\r\n    //   second:['']\r\n    // });\r\n\r\n    this.schPerio_forms = this.fb.group({\r\n      periodForm : this.fb.array([fgroup])\r\n     \r\n    });\r\n\r\n    this.getChargingProgilePurpose();\r\n    this.getChargingRecurrencyKind();\r\n    this.getChargingProfileKind();\r\n    this.getChargingRateUnit();\r\n    this.getNum_Phases(fgroup);\r\n\r\n  }\r\n\r\n  \r\n  createAddPerForm() {\r\n    return this.fb.group({\r\n      start_period: new FormControl('',[Validators.required, Validators.pattern(/^[0-9]*$/)]),\r\n      limit: new FormControl(''),\r\n      num_phases: new FormControl(''),\r\n     \r\n    });\r\n  }\r\n  \r\n\r\n  charProfSubmit() {\r\n    if (this.charProf_forms.valid) {\r\n      let formValues = this.charProf_forms.value;\r\n\r\n      let params = {\r\n        stack_level: formValues.stack_level,\r\n        charging_profile_name: formValues.char_proName,\r\n        charging_profile_kind_id: formValues.char_profKind.id,\r\n        recurrency_kind_id: formValues.recur_kind.id,\r\n        charging_profile_purpose_id: formValues.charg_profPur.id,\r\n        valid_to: this.datePipe.transform(formValues.toDate, \"yyyy-MM-dd HH:mm:ss\"),\r\n        valid_from: this.datePipe.transform(formValues.fromDate, \"yyyy-MM-dd HH:mm:ss\"),\r\n        status: this.status == true ? 'Y' : 'N',\r\n        created_by: this.localStorage.userId,\r\n      }\r\n\r\n      this.chargingProfileService.chargingProfileCreation(params).subscribe(\r\n        (resp: any) => {\r\n          if (resp.status == true) {\r\n            this.snackBar.open(MessageConstant.chargingProfileCreate, 'Dismiss', { duration: 5000 });\r\n            this.chargingProfileID = resp.data[0].id;\r\n            this.isFirstTab = false;\r\n            this.selectedIndex += 1;\r\n          } else {\r\n            this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n          }\r\n\r\n        }, (err) => {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      );\r\n\r\n    }else{\r\n        this.snackBar.open(MessageConstant.formInvalid, 'Dismiss', { duration: 5000 });\r\n    }\r\n\r\n\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n        ? 'Not a valid email'\r\n        : '';\r\n  }\r\n  onTabChange(event) {\r\n    this.selectedIndex = event.index;\r\n  }\r\n\r\n  getChargingProgilePurpose() {\r\n    this.chargingProfileService.getChargingProfilePurpose().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.charProfPurpose = resp.data;\r\n          this.filteredOptionsCharProfPurp = this.charProf_forms.controls.charg_profPur.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharProfPurpose(name) : this.charProfPurpose)\r\n            );\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n  private _filterCharProfPurpose(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.charProfPurpose.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharProfPur(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  getChargingRecurrencyKind() {\r\n    this.chargingProfileService.getRecurrencyKind().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.recurKind = resp.data;\r\n          this.filteredOptionsRecurKind = this.charProf_forms.controls.recur_kind.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharRecurKind(name) : this.recurKind)\r\n            );\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n  }\r\n  private _filterCharRecurKind(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.recurKind.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharRecurKind(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  getChargingProfileKind() {\r\n    this.chargingProfileService.getChargingProfileKind().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.profileKind = resp.data;\r\n          this.filteredOptionsProfileKind = this.charProf_forms.controls.char_profKind.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharProfileKind(name) : this.profileKind)\r\n            );\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n  private _filterCharProfileKind(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.profileKind.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharProfileKind(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n  updateStatus(event) {\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n\r\n  //tab-2\r\n\r\n  getChargingRateUnit() {\r\n    this.chargingProfileService.getChargingRateUnit().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.charRateUnit = resp.data;\r\n          this.filteredOptionsCharRate = this.charSchud_forms.controls.charging_rate_unit.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterCharRateUnit(name) : this.charRateUnit)\r\n            );\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  private _filterCharRateUnit(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.charRateUnit.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharRate(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  updateStatus2(event) {\r\n    this.status2 = event.checked;\r\n    this.ref2.checked = this.status2;\r\n  }\r\n\r\n  charSchuSubmit() {\r\n    \r\n      if (this.charSchud_forms.valid) {\r\n        let formValues = this.charSchud_forms.value;\r\n\r\n        let params = {\r\n          charging_profile_id: this.chargingProfileID,\r\n          duration: formValues.duration,\r\n          charging_rate_unit_id: formValues.charging_rate_unit.id,\r\n          start_schedule: this.datePipe.transform(formValues.start_schedule, \"yyyy-MM-dd\"),\r\n          mincharging_rate: formValues.charge_rate,\r\n          status: this.status == true ? 'Y' : 'N',\r\n          created_by: this.localStorage.userId,\r\n        }\r\n        this.chargingProfileService.chargingScheduleCreation(params).subscribe(\r\n          (resp: any) => {\r\n            if (resp.status == true) {\r\n            \r\n              this.snackBar.open(MessageConstant.chargingScheduleCreate, 'Dismiss', { duration: 5000 });\r\n              this.chargingScheduleID = resp.data[0].id;\r\n              this.isSecondTab = false;\r\n              this.selectedIndex += 1;\r\n            } else {\r\n              this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n            }\r\n\r\n          }, (err) => {\r\n            this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n          }\r\n        );\r\n\r\n      }else{\r\n        this.snackBar.open(MessageConstant.formInvalid, 'Dismiss', { duration: 5000 });\r\n      }\r\n    \r\n  }\r\n\r\n  //tab-3\r\n\r\n  getNum_Phases(fgroup:FormGroup) {\r\n    this.chargingProfileService.getNumberPhases().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.num_Phases = resp.data;\r\n          this.filteredOptionsNumPhases = fgroup.controls.num_phases.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              map(value => typeof value === 'string' ? value : value.value),\r\n              map(name => name ? this._filterNumPhases(name) : this.num_Phases)\r\n            );\r\n        } else {\r\n          this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }, (err) => {\r\n        ////\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  private _filterNumPhases(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.num_Phases.filter(option => option.value.toLowerCase().includes(filterValue));\r\n  }\r\n  displayNumPhases(item: any): string {\r\n    return item && item.value ? item.value : '';\r\n  }\r\n\r\n  updateStatus3(event) {\r\n    this.status3 = event.checked;\r\n    this.ref3.checked = this.status3;\r\n  }\r\n\r\n  schuPeriodSubmit() {\r\n  \r\n      if (this.schPerio_forms.valid) {\r\n        let formValues = this.schPerio_forms.value;\r\n        let perForm =[];\r\n\r\n        formValues.periodForm.forEach(item => {\r\n          perForm.push({\r\n            start_period : item.start_period ,\r\n            period_limit : item.limit,\r\n            numberof_phase_id : item.num_phases.id,\r\n          })\r\n        });\r\n\r\n        let params : ChargingProfileSchedule = {\r\n          charging_schedule_id:  this.chargingScheduleID,\r\n          scheduleData:perForm,\r\n          // start_period: formValues.start_period,\r\n          // limit: formValues.limit,\r\n          // numberof_phase_id: formValues.num_phases.id,\r\n          //mincharging_rate: 12,\r\n          status: this.status == true ? 'Y' : 'N',\r\n          created_by: this.localStorage.userId,\r\n        }\r\n\r\n        this.chargingProfileService.chargingSchedulePeriodCreation(params).subscribe(\r\n          (resp: any) => {\r\n            if (resp.status == true) {\r\n              this.snackBar.open(MessageConstant.chargingSchedulePeriodCreate, 'Dismiss', { duration: 5000 });\r\n              this.router.navigate(['/logsandHistory/chargingProfile/crud/list']);\r\n            } else {\r\n              this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n            }\r\n\r\n          }, (err) => {\r\n            this.snackBar.open(MessageConstant.statusFalse, 'Dismiss', { duration: 5000 });\r\n          }\r\n        );\r\n\r\n      } else {\r\n\r\n        this.snackBar.open(MessageConstant.formInvalid, 'Dismiss', { duration: 5000 });\r\n      }\r\n  }\r\n\r\n  addItem(){\r\n    const PERform = this.schPerio_forms.get('periodForm') as FormArray;\r\n    const fgroup = this.createAddPerForm();\r\n    PERform.push(fgroup);\r\n    this.filteredOptionsNumPhases = fgroup.controls.num_phases.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.value),\r\n      map(name => name ? this._filterNumPhases(name) : this.num_Phases)\r\n    );\r\n  }\r\n  \r\n  setStartPeriod(i) {  \r\n    const dialogRef = this.dialog.open(AddItemDialogComponent, {\r\n      width: '600px',\r\n      data: {i},\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog',\r\n      //position: {top: '0%', left:'10%'}\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if(result != undefined && result != 0 ){\r\n          const formPre = this.schPerio_forms.get('periodForm') as FormArray;\r\n          formPre.controls[i].get('start_period').setValue(result);\r\n          //this.schPerio_forms.get('periodForm')['controls']\r\n          this.cdr.detectChanges();\r\n        }else{\r\n          return;\r\n        }\r\n      \r\n    });\r\n  }\r\n  removevalue(i){\r\n     const formRemove = this.schPerio_forms.get('periodForm') as FormArray\r\n    if (formRemove.length > 1) {\r\n      formRemove.removeAt(i)\r\n    } else {\r\n      formRemove.reset()\r\n    }\r\n\r\n    //formRemove.removeAt(i);\r\n  }\r\n  \r\n\r\n  \r\n\r\n\r\n  \r\n\r\n\r\n\r\n}\r\n\r\n\r\n","<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n  <mat-tab-group [selectedIndex]=\"selectedIndex\" (selectedTabChange)=\"onTabChange($event)\" class=\"pt-0 pb-0 mt-0 mb-0\">\r\n    <!-- tab-1 -->\r\n    <mat-tab label=\"Create Charging Profile\">\r\n      <div id=\"charProf_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n        <form [formGroup]=\"charProf_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\" (submit)=\"charProfSubmit()\">\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Stack Level</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"stack_level\" type=\"number\" min=\"0\" required\r\n                autocomplete=\"off\" id=\"stack_level\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter duration\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charProf_forms.get('stack_level').hasError('required')\">Please enter stack level\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charProf_forms.get('stack_level').hasError('pattern')\">Special character are not allowed\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Kind</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"char_profKind\" required id=\"chargerCreateCModel\"\r\n                [matAutocomplete]=\"chargingProfAuto\" id=\"chargingModelAutomat\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter charging profile kind\">help\r\n                </mat-icon>\r\n              </div>\r\n              <mat-autocomplete #chargingProfAuto=\"matAutocomplete\" [displayWith]=\"displayCharProfileKind\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsProfileKind | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_profKind').hasError('required')\">Please select charging profile\r\n                kind\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Name</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"char_proName\" type=\"search\" maxlength=\"50\" required\r\n                autocomplete=\"off\" id=\"char_proName\">\r\n              <mat-error *ngIf=\"charProf_forms.get('char_proName').hasError('required')\">Please enter charging profile\r\n                name\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_proName').hasError('pattern')\">Special character are not\r\n                allowed\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Recurrency Kind</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"recur_kind\" required id=\"recur_kind\"\r\n                [matAutocomplete]=\"recuKindAuto\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select recurrency kind \">help</mat-icon>\r\n              </div>\r\n              <mat-autocomplete #recuKindAuto=\"matAutocomplete\" [displayWith]=\"displayCharRecurKind\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsRecurKind | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('char_profKind').hasError('required')\">Please select recurrency kind\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Profile Purpose</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"charg_profPur\" required id=\"charg_profPur\"\r\n                [matAutocomplete]=\"profPurposeAuto\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charging profile purpose \">help\r\n                </mat-icon>\r\n              </div>\r\n              <mat-autocomplete #profPurposeAuto=\"matAutocomplete\" [displayWith]=\"displayCharProfPur\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsCharProfPurp | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charProf_forms.get('charg_profPur').hasError('required')\">Please select charging profile\r\n                purpose\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"23\" class=\"pr-4\">\r\n              <mat-label>Valid From</mat-label>\r\n              <input matInput [ngxMatDatetimePicker]=\"fDate\" formControlName=\"fromDate\" [min]=\"minDate\" [max]=\"maxDate\"\r\n                [disabled]=\"disabled\" readonly required>\r\n\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon class=\"secondary-text\" matTooltip=\"Please enter valid from date and time\">help</mat-icon>\r\n                <mat-icon mat-icon-button type=\"button\" (click)=\"fDate.open(); $event.stopPropagation();\">today\r\n                </mat-icon>\r\n              </div>\r\n              <ngx-mat-datetime-picker #fDate [showSpinners]=\"showSpinners\" [showSeconds]=\"showSeconds\"\r\n                [stepHour]=\"stepHour\" [stepMinute]=\"stepMinute\" [stepSecond]=\"stepSecond\" [touchUi]=\"touchUi\"\r\n                [enableMeridian]=\"enableMeridian\">\r\n              </ngx-mat-datetime-picker>\r\n              <mat-error *ngIf=\"charProf_forms.get('fromDate').invalid\">Please enter valid from date and time\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"23\" class=\"pr-4\">\r\n              <mat-label>Valid To</mat-label>\r\n              <input matInput [ngxMatDatetimePicker]=\"tDate\" formControlName=\"toDate\" [min]=\"minDate\" [max]=\"maxDate\"\r\n                [disabled]=\"disabled\" readonly required>\r\n\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon class=\"secondary-text\" matTooltip=\"Please enter valid to date and time\">help</mat-icon>\r\n                <mat-icon mat-icon-button type=\"button\" (click)=\"tDate.open(); $event.stopPropagation();\">today\r\n                </mat-icon>\r\n              </div>\r\n              <ngx-mat-datetime-picker #tDate [showSpinners]=\"showSpinners\" [showSeconds]=\"showSeconds\"\r\n                [stepHour]=\"stepHour\" [stepMinute]=\"stepMinute\" [stepSecond]=\"stepSecond\" [touchUi]=\"touchUi\"\r\n                [enableMeridian]=\"enableMeridian\">\r\n              </ngx-mat-datetime-picker>\r\n            </mat-form-field>\r\n\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"15\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\" #toggleElement>\r\n              {{status ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n            <button mat-raised-button color=\"warn\" class=\"mr-8\" type=\"button\"\r\n              routerLink=\"/logsandHistory/chargingProfile/crud/list\">Cancel</button>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n\r\n    <!-- tab-2 -->\r\n    <mat-tab label=\"Create Charging Schedule\" [disabled]=\"isFirstTab\">\r\n      <div id=\"charSchud_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n        <form [formGroup]=\"charSchud_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"charSchud_forms\" (submit)=\"charSchuSubmit()\">\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Duration</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"duration\" type=\"number\" min=\"0\" required\r\n                autocomplete=\"off\" id=\"duration\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <!-- <mat-icon matSuffix class=\"secondary-text\">add_circle</mat-icon> -->\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter duration\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('duration').hasError('required')\">Please enter duration</mat-error>\r\n              <mat-error *ngIf=\"charSchud_forms.get('duration').hasError('pattern')\">Only number is allowd</mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Charging Rate Unit</mat-label>\r\n              <input type=\"text\" matInput formControlName=\"charging_rate_unit\" required id=\"charging_rate_unit\"\r\n                [matAutocomplete]=\"charRateAuto\" type=\"search\" autocomplete=\"off\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter charging rate unit\">help</mat-icon>\r\n              </div>\r\n              <mat-autocomplete #charRateAuto=\"matAutocomplete\" [displayWith]=\"displayCharRate\">\r\n                <mat-option *ngFor=\"let option of filteredOptionsCharRate | async\" [value]=\"option\">\r\n                  {{option.value}}\r\n                </mat-option>\r\n              </mat-autocomplete>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charging_rate_unit').hasError('required')\">Please enter charging\r\n                rate unit\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Start Schedule</mat-label>\r\n              <input matInput [matDatepicker]=\"dp3\" formControlName=\"start_schedule\" disabled>\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon style=\"padding-top:7px;\" class=\"secondary-text\" matTooltip=\"Please enter start schedule\">help\r\n                </mat-icon>\r\n                <mat-datepicker-toggle [for]=\"dp3\"></mat-datepicker-toggle>\r\n                <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('start_schedule').invalid\">Please enter start schedule</mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n              <mat-label>Min Charge Rate</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"charge_rate\" type=\"number\" maxlength=\"50\" min=\"0\" required\r\n                autocomplete=\"off\" id=\"charge_rate\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter min charger rate\">help</mat-icon>\r\n              </div>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charge_rate').hasError('required')\">Please enter min charger rate\r\n                only number is allowed\r\n              </mat-error>\r\n              <mat-error *ngIf=\"charSchud_forms.get('charge_rate').hasError('pattern')\">Only number is allowed\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"15\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status2\" (change)=\"updateStatus2($event)\" #toggleElement2>\r\n              {{status2 ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n            <button mat-raised-button color=\"warn\" class=\"mr-8\" type=\"button\"\r\n              routerLink=\"/logsandHistory/chargingProfile/crud/list\">Cancel</button>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n    <!-- tab-3 -->\r\n    <mat-tab label=\"Create Schedule Period\" [disabled]=\"isSecondTab\">\r\n      <div id=\"schPerio_forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n        <form [formGroup]=\"schPerio_forms\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\"\r\n          fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"schPerio_forms\" (submit)=\"schuPeriodSubmit()\">\r\n\r\n          <div formArrayName=\"periodForm\">\r\n            <div *ngFor=\"let period of schPerio_forms.get('periodForm')['controls']; let i = index;\" [formGroupName]=\"i\">\r\n\r\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Start Period(Sec)</mat-label>\r\n                  <input matInput formControlName=\"start_period\" type=\"number\" min=\"0\" required autocomplete=\"off\">\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <!-- <mat-icon matSuffix class=\"secondary-text\" >add</mat-icon> -->\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter start period\">help</mat-icon>\r\n                  </div>\r\n                  <mat-error *ngIf=\"period.get('start_period').hasError('required')\">Please enter start period\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"period.get('start_period').hasError('pattern')\">Only number is allowed\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                <div fxFlex=\"1\" >\r\n                  <mat-icon  matTooltip=\"Set start period\" (click)=\"setStartPeriod(i)\" \r\n                  style=\"font-size: 2rem;color: darkcyan;float: right; margin-bottom: 1.5rem;\">add_circle</mat-icon>\r\n                </div>\r\n\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Limit</mat-label>\r\n                  <input matInput placeholder=\"\" formControlName=\"limit\" type=\"number\" min=\"0\"\r\n                    autocomplete=\"off\">\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter limit\">help\r\n                    </mat-icon>\r\n                  </div>\r\n                  <!-- <mat-error *ngIf=\"period.get('limit').hasError('required')\">Please enter limit\r\n                  </mat-error>\r\n                  <mat-error *ngIf=\"period.get('limit').hasError('pattern')\">Only number is allowed\r\n                  </mat-error> -->\r\n                </mat-form-field>\r\n\r\n\r\n                <mat-form-field appearance=\"outline\" fxFlex=\"28\" class=\"pr-4\">\r\n                  <mat-label>Number Phases</mat-label>\r\n                  <input type=\"text\" matInput formControlName=\"num_phases\" required id=\"num_phases\"\r\n                    [matAutocomplete]=\"numPhasesAuto\" type=\"search\" autocomplete=\"off\">\r\n                  <div matSuffix style=\"display: flex;\">\r\n                    <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select number phases\">help\r\n                    </mat-icon>\r\n                  </div>\r\n                  <mat-autocomplete #numPhasesAuto=\"matAutocomplete\" [displayWith]=\"displayNumPhases\">\r\n                    <mat-option *ngFor=\"let option of filteredOptionsNumPhases | async\" [value]=\"option\">\r\n                      {{option.value}}\r\n                    </mat-option>\r\n                  </mat-autocomplete>\r\n                  <mat-error *ngIf=\"period.get('num_phases').hasError('required')\">Please select number phases\r\n                  </mat-error>\r\n                </mat-form-field>\r\n\r\n                <div fxFlex=\"5\" class=\"pr-4\">\r\n                  <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"removevalue(i)\" style=\"cursor:pointer;margin-bottom: 2rem !important;\">delete\r\n                  </mat-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"15\" class=\"pr-4\" class=\"example-margin\"\r\n              color=\"primary\" [checked]=\"status3\" (change)=\"updateStatus3($event)\" #toggleElement3>\r\n              {{status3 ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n          </div>\r\n\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top: 10px;\">\r\n            <div fxFlex=\"100\" class=\"pr-4\">\r\n              <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n              <button mat-raised-button color=\"warn\" class=\"mr-8\" type=\"button\"\r\n                routerLink=\"/logsandHistory/chargingProfile/crud/list\">Cancel</button>\r\n              <div style=\"float: right;\">\r\n                <button mat-mini-fab color=\"primary\" class=\"mr-8 pt-2\" type=\"button\" (click)=\"addItem()\"\r\n                  matTooltip=\"Add Item\">\r\n                  <mat-icon>add</mat-icon>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n\r\n    </mat-tab>\r\n\r\n  </mat-tab-group>\r\n</div>"]}