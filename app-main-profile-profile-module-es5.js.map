{"version":3,"sources":["webpack:///src/app/main/profile/profile-routing.module.ts","webpack:///src/app/main/profile/overview/overview.component.ts","webpack:///src/app/main/profile/overview/overview.component.html","webpack:///src/app/main/profile/profile.module.ts","webpack:///src/app/main/profile/profile-layout/profile-layout.component.ts","webpack:///src/app/main/profile/profile-layout/profile-layout.component.html","webpack:///src/app/main/profile/settings/settings.component.ts","webpack:///src/app/main/profile/settings/settings.component.html","webpack:///src/app/main/profile/change-password/change-password.component.ts","webpack:///src/app/main/profile/change-password/change-password.component.html"],"names":["routes","path","component","children","redirectTo","pathMatch","data","title","ProfileRoutingModule","forChild","imports","exports","ProfileOverviewComponent","snackBar","accountService","router","selectedIndex","endUserTab","cmsUserTab","initialize","getUserInfo","localStorage","JSON","parse","getItem","userId","subscribe","userInfo","userObj","user_type","err","selector","templateUrl","COMPONENTS","COMPONENTS_DYNAMIC","ProfileModule","declarations","entryComponents","autocompleteObjectValidator","control","value","ProfileLayoutComponent","fb","dialog","cdr","countryService","reactiveForm","group","f_name","required","m_name","l_name","pan","pin","aadhar","address1","address2","alt_mobile","city","state","country","dob","email","employee_code","landmark","mobile","username","getAllCountry","getAllState","country_id","getAllCity","state_id","assignValues","get","setValue","f_Name","l_Name","PAN","PIN","dialogRef","open","width","afterClosed","result","detectChanges","form","hasError","pin_code_id","pincode","getCountryStateByPIN","undefined","length","getCountryByState","countrydata","countries","toSelect","find","c","id","filteredOptionCountry","controls","valueChanges","pipe","name","_filterCountry","getStateByCountry","statedata","states","filteredOptionState","_filterState","getCityByState","Citydata","cities","filteredOptionCity","_filterCity","event","getStatesByCountry","getCitiesByStates","stateId","citiesdata","item","filterValue","toLowerCase","filter","option","includes","countryID","stateID","city_id","openDialog","getStateCountry","onStateChange","onCountryChange","encapsulation","None","animations","ProfileSettingsComponent","tele","ChangePasswordComponent","isEditMode","status","confirmValidator","error","password","confirm","currentPassword","newPassword","cnPassword","isPasswordFieldType","isPasswordConfirmFieldType","close","formValues","formMobileValues","params","registration_origin","modify_by","updatePassword","res","logs","message","duration","togglePasswordFieldType","togglePasswordConfirmFieldType","onYesClick","styleUrls","ref","toggleAvailable"],"mappings":"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","file":"app-main-profile-profile-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ProfileLayoutComponent } from './profile-layout/profile-layout.component';\r\nimport { ProfileOverviewComponent } from './overview/overview.component';\r\nimport { ProfileSettingsComponent } from './settings/settings.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProfileLayoutComponent,\r\n    children: [\r\n      { path: '', redirectTo: 'overview', pathMatch: 'full' },\r\n     {\r\n        path: 'overview',\r\n        component: ProfileOverviewComponent,\r\n        data: { title: 'Profile Overview' },\r\n      }\r\n    //   {\r\n    //     path: 'settings',\r\n    //     component: ProfileSettingsComponent,\r\n    //     data: { title: 'Profile Settings' },\r\n    //   },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ProfileRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { AccountService } from 'app/shared/services/account/account.service';\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-profile-overview',\r\n  templateUrl: './overview.component.html',\r\n})\r\nexport class ProfileOverviewComponent {\r\n  \r\n  localStorage : any;\r\n  userInfo:any;\r\n  selectedIndex=0;\r\n  endUserTab = false;\r\n  cmsUserTab = false;\r\n  userObj: any;\r\n  constructor(private snackBar: MatSnackBar,private accountService: AccountService,private router: Router) {\r\n\r\n  }\r\n  ngOnInit()\r\n   {\r\n    this.initialize();\r\n    this.getUserInfo();\r\n   }\r\n   initialize(){\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n   }\r\n   getUserInfo(){\r\n    this.accountService.getUserInfo(this.localStorage.userId).subscribe(\r\n\t\t\t(data:any)=>{\r\n        this.userInfo = data;\r\n        this.userObj = data;\r\n        if(this.userObj[0].user_type == \"END\"){\r\n          this.endUserTab = true;\r\n          this.cmsUserTab = false;\r\n        }else{\r\n          this.endUserTab = false;\r\n          this.cmsUserTab = true;\r\n        }\r\n      },(err)=>{}\r\n\t\t)\r\n   }\r\n   \r\n}\r\n","<mat-card>\r\n  <mat-tab-group class=\"m--16\">\r\n    <mat-tab label=\"Profile\">\r\n      <div class=\"m-16\">\r\n       <h3>Profile</h3>\r\n      </div>\r\n    </mat-tab>\r\n    <mat-tab *ngIf=\"endUserTab\" label=\"Vehicle Details\">\r\n      <div class=\"m-16\">\r\n        <h3>Vehicle Details</h3>\r\n      </div>\r\n    </mat-tab>\r\n    <mat-tab *ngIf=\"cmsUserTab\" label=\"Assigned CPO\">\r\n      <div class=\"m-16\">\r\n       <h3>Assigned CPO</h3>\r\n      </div>\r\n    </mat-tab>\r\n    <mat-tab label=\"Selected Product\">\r\n      <div class=\"m-16\">\r\n       <h3>Selected Product</h3>\r\n      </div>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</mat-card>\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\nimport { ChangePasswordComponent } from './change-password/change-password.component';\r\nimport { ProfileLayoutComponent } from './profile-layout/profile-layout.component';\r\nimport { ProfileOverviewComponent } from './overview/overview.component';\r\nimport { ProfileSettingsComponent } from './settings/settings.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nconst COMPONENTS = [ProfileLayoutComponent, ProfileOverviewComponent, ProfileSettingsComponent];\r\nconst COMPONENTS_DYNAMIC = [ChangePasswordComponent];\r\n\r\n@NgModule({\r\n  imports: [SharedModule, ProfileRoutingModule,FuseSharedModule],\r\n  declarations: [...COMPONENTS, ...COMPONENTS_DYNAMIC],\r\n  entryComponents: COMPONENTS_DYNAMIC,\r\n})\r\nexport class ProfileModule {}\r\n","import { Component,ChangeDetectorRef } from '@angular/core';\r\nimport { ChangePasswordComponent } from '../change-password/change-password.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { AccountService } from 'app/shared/services/account/account.service';\r\nimport { FormGroup, Validators, FormBuilder,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport {CountriesService} from 'app/shared/services/countries.service';\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n} \r\n@Component({\r\n  selector: 'app-profile-layout',\r\n  templateUrl: './profile-layout.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ProfileLayoutComponent {\r\n  localStorage : any;\r\n  userInfo:any;\r\n  userObj: any;\r\n  selectedIndex=0;\r\n  endUserTab = false;\r\n  cmsUserTab = false;\r\n  reactiveForm: FormGroup;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  filteredOptionState: Observable<any[]>;\r\n  filteredOptionCity: Observable<any[]>;\r\n  countries:any;\r\n  stateName:any;\r\n  cities:any;\r\n  pin_code_id:any;\r\n  country_id:any;\r\n  state_id:any;\r\n  \r\n\r\n  states:any;\r\n\t constructor(private fb: FormBuilder,public dialog : MatDialog,private accountService: AccountService,\r\n    private snackBar : MatSnackBar,private cdr: ChangeDetectorRef,public countryService: CountriesService) {\r\n      this.reactiveForm = this.fb.group({\r\n        f_name:['', [Validators.required]],\r\n        m_name:['', [Validators.required]],\r\n        l_name:['', [Validators.required]],\r\n        pan:['', [Validators.required]],\r\n        pin:['', [Validators.required]],\r\n        aadhar:['', [Validators.required]],\r\n        address1:['', [Validators.required]],\r\n        address2:['', [Validators.required]],\r\n        alt_mobile:['', [Validators.required]],\r\n        city:['', [Validators.required]],\r\n        state:['', [Validators.required]],\r\n        country:['', [Validators.required]],\r\n        dob:['', [Validators.required]],\r\n        email:['', [Validators.required, Validators.email]],\r\n        employee_code:['', [Validators.required]],\r\n        landmark:['', [Validators.required]],\r\n        mobile:['', [Validators.required]],\r\n        username:['', [Validators.required]]\r\n     \r\n       \r\n      });\r\n   \r\n  }\r\n  ngOnInit()\r\n   {\r\n    this.initialize();\r\n    this.getUserInfo();\r\n   }\r\n   initialize(){\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    //this.getCountry();\r\n   }\r\n   getUserInfo(){\r\n    this.accountService.getUserInfo(this.localStorage.userId).subscribe(\r\n\t\t\t(data:any)=>{\r\n        this.userInfo = data;\r\n        this.userObj = data[0];\r\n        this.getAllCountry();\r\n        this.getAllState(this.userObj.country_id);\r\n        this.getAllCity(this.userObj.state_id);\r\n        this.assignValues(this.userObj);\r\n        if(this.userObj.user_type == \"END\"){\r\n          this.endUserTab = true;\r\n          this.cmsUserTab = false;\r\n        }else{\r\n          this.endUserTab = false;\r\n          this.cmsUserTab = true;\r\n        }\r\n\r\n      },(err)=>{}\r\n\t\t)\r\n   }\r\n   assignValues(userObj){\r\n    this.reactiveForm.get('f_name').setValue(userObj.f_Name);\r\n    this.reactiveForm.get('m_name').setValue(userObj.m_name);\r\n    this.reactiveForm.get('l_name').setValue(userObj.l_Name);\r\n    this.reactiveForm.get('dob').setValue(userObj.dob);\r\n    this.reactiveForm.get('email').setValue(userObj.email);\r\n    this.reactiveForm.get('employee_code').setValue(userObj.employee_code);\r\n    this.reactiveForm.get('username').setValue(userObj.username);\r\n     this.reactiveForm.get('mobile').setValue(userObj.mobile);\r\n     this.reactiveForm.get('alt_mobile').setValue(userObj.alt_mobile);\r\n     this.reactiveForm.get('pan').setValue(userObj.PAN);\r\n     this.reactiveForm.get('aadhar').setValue(userObj.aadhar);\r\n     //this.reactiveForm.get('city').setValue(userObj.city_id);\r\n     //this.reactiveForm.get('state').setValue(userObj.state_id);\r\n     //this.reactiveForm.get('country').setValue(userObj.country_id);\r\n     this.reactiveForm.get('landmark').setValue(userObj.landmark)\r\n     this.reactiveForm.get('pin').setValue(userObj.PIN);\r\n   }\r\n   openDialog(){\r\n    \r\n   // let params = {\r\n    //  action : action,\r\n   //   data : data\r\n    //}\r\n\r\n    const dialogRef = this.dialog.open(ChangePasswordComponent, {\r\n      width: '1200px',\r\n     // data: params\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n     // this.getPlantChargers();\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n  getStateCountry() {\r\n\r\n    this.pin_code_id = this.reactiveForm.value.pincode;\r\n\r\n    //;\r\n    this.countryService.getCountryStateByPIN(this.pin_code_id).subscribe(\r\n      (data: any) => {\r\n        //this.form.reset();\r\n        if (data != undefined && data != null && data.length > 0) {\r\n          this.state_id = data[0].state_id;\r\n          //;\r\n          this.countryService.getCountryByState(this.state_id).subscribe(\r\n            (countrydata: any) => {\r\n              //this.form.reset();\r\n              this.countries = countrydata;\r\n              const toSelect = this.countries.find(c => c.id == data[0].country_id);\r\n              this.reactiveForm.get('country').setValue(toSelect);\r\n\r\n              this.filteredOptionCountry = this.reactiveForm.controls.country.valueChanges\r\n                .pipe(\r\n                  startWith(''),\r\n                  map(value => typeof value === 'string' ? value : value.name),\r\n                  map(name => name ? this._filterCountry(name) : this.countries)\r\n                );\r\n              //; \r\n              this.country_id = data[0].country_id;\r\n              this.countryService.getStateByCountry(this.country_id).subscribe(\r\n                (statedata: any) => {\r\n                  //this.form.reset();\r\n                  this.states = statedata;\r\n                  const toSelect = this.states.find(c => c.id == data[0].state_id);\r\n                  this.reactiveForm.get('state').setValue(toSelect);\r\n\r\n                  this.filteredOptionState = this.reactiveForm.controls.state.valueChanges\r\n                    .pipe(\r\n                      startWith(''),\r\n                      map(value => typeof value === 'string' ? value : value.name),\r\n                      map(name => name ? this._filterState(name) : this.states)\r\n                    );\r\n\r\n                }, (err) => {\r\n\r\n                }\r\n              )\r\n              //; \r\n              this.state_id = data[0].state_id;\r\n              this.countryService.getCityByState(this.state_id).subscribe(\r\n                (Citydata: any) => {\r\n                  //this.form.reset();\r\n                  this.cities = Citydata;\r\n                  //const toSelect = this.states.find(c => c.id == data[0].state_id);\r\n                  // this.form.get('state').setValue(toSelect);\r\n\r\n                  this.filteredOptionCity = this.reactiveForm.controls.city.valueChanges\r\n                    .pipe(\r\n                      startWith(''),\r\n                      map(value => typeof value === 'string' ? value : value.reactiveForm),\r\n                      map(name => name ? this._filterCity(name) : this.cities)\r\n                    );\r\n\r\n                }, (err) => {\r\n\r\n                }\r\n              )\r\n            }, (err) => {\r\n\r\n            }\r\n          )\r\n        } else {\r\n\r\n        }\r\n\r\n\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  onCountryChange(event) {\r\n    this.countries = [];\r\n    this.getAllCountry();\r\n    this.getStatesByCountry(event);\r\n\r\n\r\n    //this.form.get('pincode').setValue(\"\");\r\n    this.reactiveForm.get('state').setValue(\"\");\r\n    this.reactiveForm.get('city').setValue(\"\");\r\n  }\r\n  getStatesByCountry(state) {\r\n    this.state_id = state.id;\r\n    this.countryService.getStateByCountry(this.state_id).subscribe(\r\n      (statedata: any) => {\r\n        //this.form.reset();\r\n        this.states = statedata;\r\n        // const toSelect = this.states.find(c => c.id == data[0].state_id);\r\n        // this.form.get('state').setValue(toSelect);\r\n\r\n        this.filteredOptionState = this.reactiveForm.controls.state.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterState(name) : this.states)\r\n          );\r\n\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  onStateChange(event) {\r\n    this.getCitiesByStates(event);\r\n    this.getCountryByState(event);\r\n    this.reactiveForm.get('city').setValue(\"\");\r\n    //this.form.get('pincode').setValue(\"\");\r\n  }\r\n  onCityChange(event){\r\n  \r\n   //this.form.get('pincode').setValue(\"\");\r\n  }\r\n  getCitiesByStates(stateId) {\r\n    this.state_id = stateId.id;\r\n    this.countryService.getCityByState(this.state_id).subscribe(\r\n      (citiesdata: any) => {\r\n        this.cities = citiesdata;\r\n        \r\n        this.filteredOptionCity = this.reactiveForm.controls.city.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterCity(name) : this.cities)\r\n          );\r\n\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  getCountryByState(stateId) {\r\n    this.state_id = stateId.id;\r\n    this.countryService.getCountryByState(this.state_id).subscribe(\r\n      (countrydata: any) => {\r\n        //this.form.reset();\r\n        this.countries = countrydata;\r\n        const toSelect = this.countries.find(c => c.id == countrydata[0].id);\r\n        this.reactiveForm.get('country').setValue(toSelect);\r\n\r\n        this.filteredOptionCountry = this.reactiveForm.controls.country.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterCountry(name) : this.countries)\r\n          );\r\n\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  displayCountry(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCountry(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.countries.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  displayState(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterState(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.states.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  displayCity(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCity(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.cities.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  getAllCountry() {\r\n    this.countryService.getAllCountry().subscribe(\r\n      (data: any) => {\r\n        //;\r\n        this.countries = data;\r\n          //;\r\n          const toSelect = this.countries.find(c => c.id == this.userObj.country_id);\r\n          this.reactiveForm.get('country').setValue(toSelect);\r\n\r\n          this.filteredOptionCountry = this.reactiveForm.controls.country.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              //tap(() => this.form.controls.chargingModel.setValue(toSelect)),\r\n              map(value => typeof value === 'string' ? value : value.name),\r\n              map(name => name ? this._filterCountry(name) : this.countries)\r\n            );\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  getAllState(countryID){\r\n    this.countryService.getStateByCountry(countryID).subscribe(\r\n      (data:any)=>{\r\n        //;\r\n        this.states = data;\r\n          //;\r\n          const toSelect = this.states.find(c => c.id == this.userObj.state_id);\r\n          this.reactiveForm.get('state').setValue(toSelect);\r\n         \r\n          this.filteredOptionState = this.reactiveForm.controls.state.valueChanges\r\n           .pipe(\r\n          startWith(''),\r\n          //tap(() => this.form.controls.chargingModel.setValue(toSelect)),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterState(name) : this.states)\r\n        );\r\n        \r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  \r\n  getAllCity(stateID){\r\n    //this.getCitiesByStatesOnInit(state_id);\r\n    this.countryService.getCityByState(stateID).subscribe(\r\n      (data:any)=>{\r\n        //;\r\n        this.cities = data;\r\n          //;\r\n          const toSelect = this.cities.find(c => c.id == this.userObj.city_id);\r\n          this.reactiveForm.get('city').setValue(toSelect);\r\n         \r\n          this.filteredOptionCity = this.reactiveForm.controls.city.valueChanges\r\n           .pipe(\r\n          startWith(''),\r\n          //tap(() => this.form.controls.chargingModel.setValue(toSelect)),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterCity(name) : this.cities)\r\n        );\r\n        \r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n}\r\n","<!--page-header class=\"p-t-32 p-b-48 m-b--24 bg-gray-900\"\r\n             [title]=\"'Personal Profile'\"\r\n             style=\"background-color: #00bcd4 !important;\">\r\n</page-header-->\r\n<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n      <!-- HEADER -->\r\n      <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n          <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\" [@animate]=\"{value:'*',params:{x:'50px'}}\">Personal\r\n            Profile\r\n          </span>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div id=\"forms\" class=\"page-layout simple fullwidth  \" fxLayout=\"column\">\r\n    <div fxLayout=\"row\" class=\"p-24\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n      <div fxFlex=\"20\" class=\"pr-4\">\r\n        <mat-card>\r\n          <div class=\"text-center\">\r\n            <img class=\"m-b-8 r-full\" src=\"assets/images/avatar.png\" alt=\"\" width=\"80\">\r\n            <h2 class=\"m-t-0 m-b-8 f-w-400\">{{userObj?.username}}</h2>\r\n            <p class=\"m-t-0 m-b-8\">{{userObj?.email}}</p>\r\n            <button mat-raised-button color=\"accent\" class=\"m-l-8\" (click)=\"openDialog()\">Change Password</button>\r\n          </div>\r\n        </mat-card>\r\n      </div>\r\n      <div fxFlex=\"80\">\r\n        <mat-card>\r\n          <mat-tab-group class=\"m--16\">\r\n            <mat-tab label=\"Profile\">\r\n              <div>\r\n                <mat-card-content>\r\n                  <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n                    <form [formGroup]=\"reactiveForm\" class=\"mat-card mat-elevation-z4  \" fxLayout=\"column\"\r\n                      fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\">\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n                        <mat-form-field fxFlex=\"33\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>First Name</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"f_name\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('f_name').invalid\">Please enter first name\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field fxFlex=\"33\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Middle Name</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"m_name\">\r\n                          <mat-error *ngIf=\"reactiveForm.get('m_name').invalid\">Please enter middle name\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n\r\n                        <mat-form-field fxFlex=\"33\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Last Name</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"l_name\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('l_name').invalid\">Please enter last name\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Date Of Birth</mat-label>\r\n                          <input matInput [matDatepicker]=\"dp3\" formControlName=\"dob\" disabled>\r\n                          <mat-datepicker-toggle matSuffix [for]=\"dp3\"></mat-datepicker-toggle>\r\n                          <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n                          <mat-error *ngIf=\"reactiveForm.get('dob').invalid\">Please enter date of birth\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Email</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"email\" required  style=\"text-transform: none;\">\r\n                          <mat-error *ngIf=\"reactiveForm.get('email').invalid\">Please enter email address\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Employee Code</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"employee_code\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('employee_code').invalid\">Please enter employee code\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>User Name</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"username\" required style=\"text-transform: none;\">\r\n                          <mat-error *ngIf=\"reactiveForm.get('username').invalid\">Please enter user name\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Mobile Number</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"mobile\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('mobile').invalid\">Please enter mobile number\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Alternate Mobile Number</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"alt_mobile\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('alt_mobile').invalid\">Please enter alternative mobile\r\n                            number\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Pan</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"pan\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('pan').invalid\">Please enter pan\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Aadhar Number</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"aadhar\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('aadhar').invalid\">Please enter aadhar number\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                        <mat-divider></mat-divider>\r\n\r\n                      </div>\r\n                      <h3>Address Information</h3>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Address Line 1</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"address1\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('address1').invalid\">Please enter address line\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Address Line 2</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"address2\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('address2').invalid\">Please enter address line\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                      </div>\r\n\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Pin Code</mat-label>\r\n                          <input matInput placeholder=\" \" formControlName=\"pin\" required (change)=\"getStateCountry()\">\r\n                          <mat-error *ngIf=\"reactiveForm.get('pin').invalid\">Please enter pin code\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"example-full-width pr-4\">\r\n                          <mat-label>City</mat-label>\r\n                          <input type=\"text\" matInput formControlName=\"city\" [matAutocomplete]=\"cityAuto\">\r\n                          <mat-autocomplete #cityAuto=\"matAutocomplete\" [displayWith]=\"displayCity\">\r\n                            <mat-option *ngFor=\"let option of filteredOptionCity | async\" [value]=\"option\">\r\n                              {{option.name}}\r\n                            </mat-option>\r\n                          </mat-autocomplete>\r\n                            <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                          <mat-error *ngIf=\"reactiveForm.get('city').invalid\">Please select city\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"example-full-width pr-4\">\r\n                          <mat-label>State</mat-label>\r\n                          <input type=\"text\" matInput formControlName=\"state\" [matAutocomplete]=\"stateAuto\">\r\n                          <mat-autocomplete #stateAuto=\"matAutocomplete\" [displayWith]=\"displayState\"\r\n                            (optionSelected)='onStateChange($event.option.value)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionState | async\" [value]=\"option\">\r\n                              {{option.name}}\r\n                            </mat-option>\r\n                          </mat-autocomplete>\r\n                            <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                          <mat-error *ngIf=\"reactiveForm.get('state').invalid\">Please select state\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"example-full-width pr-4\">\r\n                          <mat-label>Country</mat-label>\r\n                          <input type=\"text\" matInput formControlName=\"country\" [matAutocomplete]=\"countryAuto\">\r\n                          <mat-autocomplete #countryAuto=\"matAutocomplete\" [displayWith]=\"displayCountry\"\r\n                            (optionSelected)='onCountryChange($event.option.value)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionCountry | async\" [value]=\"option\">\r\n                              {{option.name}}\r\n                            </mat-option>\r\n                          </mat-autocomplete>\r\n                            <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                          <mat-error *ngIf=\"reactiveForm.get('country').invalid\">Please select country\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                        <mat-form-field fxFlex=\"50\" appearance=\"outline\" class=\"pr-4\">\r\n                          <mat-label>Landmark</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"landmark\" required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('landmark').invalid\">Please enter landmark\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                      </div>\r\n                      <div fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n                        <button mat-raised-button color=\"primary\" class=\"m-t-8\">Save</button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </mat-card-content>\r\n              </div>\r\n            </mat-tab>\r\n            <mat-tab *ngIf=\"endUserTab\" label=\"Vehicle Details\">\r\n              <div class=\"m-16\">\r\n                <h3>Vehicle Details</h3>\r\n              </div>\r\n            </mat-tab>\r\n            <mat-tab *ngIf=\"cmsUserTab\" label=\"Assigned CPO\">\r\n              <div class=\"m-16\">\r\n                <h3>Assigned CPO</h3>\r\n              </div>\r\n            </mat-tab>\r\n\r\n          </mat-tab-group>\r\n        </mat-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<!--div fxLayout=\"row wrap\" class=\"matero-row\">\r\n  <div class=\"matero-col\" fxFlex=\"100\" fxFlex.gt-xs=\"50\" fxFlex.gt-sm=\"33.33\" fxFlex.gt-md=\"25\">\r\n    <mat-card>\r\n      <div class=\"text-center\">\r\n        <img class=\"m-b-8 r-full\" src=\"assets/images/avatar.png\" alt=\"\" width=\"80\">\r\n        <h2 class=\"m-t-0 m-b-8 f-w-400\">{{userObj?.username}}</h2>\r\n        <p class=\"m-t-0 m-b-8\">{{userObj?.email}}</p>\r\n        \r\n        <button mat-raised-button color=\"accent\" class=\"m-l-8\" (click)=\"openDialog()\" >Change Password</button>\r\n      </div>\r\n      \r\n    </mat-card>\r\n  </div>\r\n  <div class=\"matero-col\" fxFlex=\"100\" fxFlex.gt-xs=\"50\" fxFlex.gt-sm=\"66.67\" fxFlex.gt-md=\"75\">\r\n    <mat-card>\r\n      <mat-tab-group class=\"m--16\">\r\n        <mat-tab label=\"Profile\">\r\n          <div class=\"m-16\">\r\n            <mat-card-content>\r\n                <form [formGroup]=\"reactiveForm\" class=\"form-field-full\">\r\n                  <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n                    <div fxFlex=\"33\" fxFlex.lt-md=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>First Name</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"f_name\"  required>\r\n                        <mat-error *ngIf=\"reactiveForm.get('f_name').invalid\">Please enter first name\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"33\" fxFlex.lt-md=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>Middle Name</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"m_name\"  >\r\n                        <mat-error *ngIf=\"reactiveForm.get('m_name').invalid\">Please enter middle name\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"33\" fxFlex.lt-md=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>Last Name</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"l_name\"  required>\r\n                        <mat-error *ngIf=\"reactiveForm.get('l_name').invalid\">Please enter middle name\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>Date of Birth</mat-label>\r\n                        <input matInput [matDatepicker]=\"dp3\" formControlName=\"dob\" disabled>\r\n                        <mat-datepicker-toggle matSuffix [for]=\"dp3\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n                        <mat-error *ngIf=\"reactiveForm.get('dob').invalid\">Please enter date of birth\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div> \r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>Email</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"email\"\r\n                               required>\r\n                        <mat-error *ngIf=\"reactiveForm.get('email').invalid\">Please enter email address\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>Employee Code</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"employee_code\"\r\n                        required>\r\n                        <mat-error *ngIf=\"reactiveForm.get('employee_code').invalid\">Please enter employee code\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>User Name</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"username\"\r\n                        required>\r\n                        <mat-error *ngIf=\"reactiveForm.get('username').invalid\">Please enter user name\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                        <mat-form-field>\r\n                          <mat-label>Mobile Number</mat-label>\r\n                          <input matInput placeholder=\"\" formControlName=\"mobile\"\r\n                          required>\r\n                          <mat-error *ngIf=\"reactiveForm.get('mobile').invalid\">Please enter mobile number\r\n                          </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>Alternate Mobile Number</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"alt_mobile\"\r\n                        required>\r\n                        <mat-error *ngIf=\"reactiveForm.get('alt_mobile').invalid\">Please enter  alternative mobile number\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                   \r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                      <mat-form-field>\r\n                        <mat-label>Pan</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"pan\"\r\n                               required>\r\n                        <mat-error *ngIf=\"reactiveForm.get('pan').invalid\">Please enter pan\r\n                        </mat-error>\r\n                      </mat-form-field>\r\n                    </div>    \r\n                    <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                      <mat-form-field>\r\n                      <mat-label>Aadhar Number</mat-label>\r\n                      <input matInput placeholder=\"\" formControlName=\"aadhar\"\r\n                      required>\r\n                      <mat-error *ngIf=\"reactiveForm.get('aadhar').invalid\">Please enter addhar number\r\n                      </mat-error>\r\n                      </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <mat-divider></mat-divider>\r\n          <h3>Address Information</h3>\r\n          <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n            <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                <mat-form-field>\r\n                  <mat-label>Address Line 1</mat-label>\r\n                  <input matInput placeholder=\"\" formControlName=\"address1\"\r\n                         required>\r\n                  <mat-error *ngIf=\"reactiveForm.get('address1').invalid\">Please enter address line\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                <mat-form-field>\r\n                  <mat-label>Address Line 2</mat-label>\r\n                  <input matInput placeholder=\"\" formControlName=\"address2\"\r\n                         required>\r\n                  <mat-error *ngIf=\"reactiveForm.get('address2').invalid\">Please enter address line \r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                <mat-form-field>\r\n                  <mat-label>Pin code</mat-label>\r\n                  <input matInput placeholder=\" \" formControlName=\"pin\"\r\n                         required>\r\n                  <mat-error *ngIf=\"reactiveForm.get('pin').invalid\">Please enter pin code\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                <mat-form-field class=\"example-full-width\">\r\n                  <mat-label>City</mat-label>\r\n                  <input type=\"text\" matInput formControlName=\"city\"  [matAutocomplete]=\"cityAuto\">\r\n                  <mat-autocomplete #cityAuto=\"matAutocomplete\"  [displayWith]=\"displayCity\">\r\n                    <mat-option *ngFor=\"let option of filteredOptionCity | async\" [value]=\"option\">\r\n                        {{option}}\r\n                      </mat-option>\r\n                  </mat-autocomplete>\r\n                  <mat-error *ngIf=\"reactiveForm.get('city').invalid\">Please select city\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n              <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                <mat-form-field class=\"example-full-width\">\r\n                  <mat-label>State</mat-label>\r\n                  <input type=\"text\" matInput formControlName=\"state\"  [matAutocomplete]=\"stateAuto\">\r\n                  <mat-autocomplete #stateAuto=\"matAutocomplete\"  [displayWith]=\"displayState\"\r\n                  (optionSelected)='onStateChange($event.option.value)'>\r\n                    <mat-option *ngFor=\"let option of filteredOptionState | async\" [value]=\"option\">\r\n                        {{option.StateName}}\r\n                      </mat-option>\r\n                  </mat-autocomplete>\r\n                  <mat-error *ngIf=\"reactiveForm.get('state').invalid\">Please select state\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              \r\n              </div>\r\n              <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                <mat-form-field class=\"example-full-width\">\r\n                  <mat-label>Country</mat-label>\r\n                  <input type=\"text\" matInput formControlName=\"country\"  [matAutocomplete]=\"countryAuto\">\r\n                  <mat-autocomplete #countryAuto=\"matAutocomplete\"  [displayWith]=\"displayCountry\"\r\n                  (optionSelected)='onCountryChange($event.option.value)'>\r\n                    <mat-option *ngFor=\"let option of filteredOptionCountry | async\"    [value]=\"option\">\r\n                        {{option.CountryName}}\r\n                      </mat-option>\r\n                  </mat-autocomplete>\r\n                  <mat-error *ngIf=\"reactiveForm.get('country').invalid\">Please select country\r\n                  </mat-error>\r\n                </mat-form-field>\r\n               \r\n              </div>\r\n              <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n                <mat-form-field>\r\n                  <mat-label>Landmark</mat-label>\r\n                  <input matInput placeholder=\"\" formControlName=\"landmark\"\r\n                         required>\r\n                  <mat-error *ngIf=\"reactiveForm.get('landmark').invalid\">Please enter landmark\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n          </div>\r\n                  <div fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n                    <button mat-raised-button color=\"primary\" class=\"m-t-8\">Save</button>\r\n                  </div>\r\n            \r\n                </form>\r\n              </mat-card-content>\r\n            \r\n            \r\n          </div>\r\n        </mat-tab>\r\n        <mat-tab *ngIf=\"endUserTab\" label=\"Vehicle Details\">\r\n          <div class=\"m-16\">\r\n            <h3>Vehicle Details</h3>\r\n          </div>\r\n        </mat-tab>\r\n        <mat-tab *ngIf=\"cmsUserTab\" label=\"Assigned CPO\">\r\n          <div class=\"m-16\">\r\n           <h3>Assigned CPO</h3>\r\n          </div>\r\n        </mat-tab>\r\n       \r\n      </mat-tab-group>\r\n    </mat-card>\r\n  </div>\r\n</div-->","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { AccountService } from 'app/shared/services/account/account.service';\r\n@Component({\r\n  selector: 'app-profile-settings',\r\n  templateUrl: './settings.component.html',\r\n})\r\nexport class ProfileSettingsComponent implements OnInit {\r\n  reactiveForm: FormGroup;\r\n  localStorage : any;\r\n  userInfo:any;\r\n  userObj: any;\r\n  constructor(private fb: FormBuilder,private accountService: AccountService,) {\r\n    this.reactiveForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n       mobile: ['', [Validators.required]],\r\n      tele: ['', [Validators.required]],\r\n     \r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n    this.getUserInfo();\r\n  }\r\n  initialize(){\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n   }\r\n   getUserInfo(){\r\n    this.accountService.getUserInfo(this.localStorage.userId).subscribe(\r\n\t\t\t(data:any)=>{\r\n        this.userObj = data[0];\r\n       this.assignValues(this.userObj);\r\n\r\n      },(err)=>{}\r\n\t\t)\r\n   }\r\n   assignValues(userObj){\r\n    this.reactiveForm.get('username').setValue(userObj.username);\r\n    this.reactiveForm.get('email').setValue(userObj.email);\r\n    this.reactiveForm.get('mobile').setValue(userObj.mobile);\r\n    this.reactiveForm.get('tele').setValue(userObj.alt_mobile);\r\n   }\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-card-title>Edit Profile</mat-card-title>\r\n  <mat-card-content>\r\n    <form [formGroup]=\"reactiveForm\" class=\"form-field-full\">\r\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n\r\n        <div fxFlex=\"50\" fxFlex.lt-md=\"100\">\r\n          <mat-form-field>\r\n            <mat-label>Username</mat-label>\r\n            <input matInput placeholder=\"Simple placeholder\" formControlName=\"username\" readonly required>\r\n            <mat-error *ngIf=\"reactiveForm.get('username').invalid\">Please enter username\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div fxFlex=\"50\" fxFlex.lt-md=\"100\">\r\n          <mat-form-field>\r\n            <mat-label>Email</mat-label>\r\n            <input matInput placeholder=\"Simple placeholder\" formControlName=\"email\" readonly required>\r\n            <mat-error *ngIf=\"reactiveForm.get('email').invalid\">\r\n              {{getErrorMessage(reactiveForm)}}</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"50\" fxFlex.lt-md=\"100\">\r\n          <mat-form-field>\r\n            <mat-label>Mobile</mat-label>\r\n            <input matInput placeholder=\"Simple placeholder\" type=\"number\" formControlName=\"mobile\" required>\r\n            <mat-icon matSuffix>smartphone</mat-icon>\r\n            <mat-error *ngIf=\"reactiveForm.get('mobile').invalid\">Please enter mobile</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div fxFlex=\"50\" fxFlex.lt-md=\"100\">\r\n          <mat-form-field>\r\n            <mat-label>Tele</mat-label>\r\n            <input matInput placeholder=\"Simple placeholder\" type=\"number\" formControlName=\"tele\" required>\r\n            <mat-icon matSuffix>phone</mat-icon>\r\n            <mat-error *ngIf=\"reactiveForm.get('tele').invalid\">Please enter tele</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n\r\n\r\n      </div>\r\n\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <button mat-raised-button color=\"primary\" class=\"m-t-8\">Save</button>\r\n      </div>\r\n\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators,FormControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { AccountService } from 'app/shared/services/account/account.service';\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html',\r\n  styleUrls: ['./change-password.component.scss']\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  status = false;\r\n  isPasswordFieldType: boolean;\r\n  isPasswordConfirmFieldType: boolean;\r\n  logs:any;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"toggleAvailable\") toggleAvailable: any;\r\n\r\n  constructor(private fb: FormBuilder,private snackBar: MatSnackBar,private accountService: AccountService,\r\n    public dialogRef: MatDialogRef<ChangePasswordComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n   // this.params = this.data;\r\n    \r\n    //this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      currentPassword: ['' ],\r\n      newPassword: ['', [Validators.required]],\r\n      cnPassword: ['',[this.confirmValidator] ]\r\n      \r\n    });\r\n\r\n   \r\n   \r\n  }\r\n  confirmValidator = (control: FormControl): { [s: string]: boolean } => {\r\n    if (!control.value) {\r\n      return { error: true, required: true };\r\n    } else if (control.value !== this.form.controls.password.value) {\r\n      return { error: true, confirm: true };\r\n    }\r\n  }\r\n  togglePasswordFieldType(){\r\n    this.isPasswordFieldType = !this.isPasswordFieldType;\r\n  }\r\n  togglePasswordConfirmFieldType(){\r\n    this.isPasswordConfirmFieldType = !this.isPasswordConfirmFieldType;\r\n  }\r\n\r\n  close() {\r\n     this.dialogRef.close();\r\n  }\r\n\r\n  \r\n\r\n  onYesClick(){\r\n    //if(this.form.valid){\r\n         \r\n      let formValues = this.form.value;\r\n      let formMobileValues = this.form.value;\r\n      let params = {\r\n        id:this.localStorage.userId,\r\n        password: formValues.newPassword,\r\n        registration_origin: \"WEB\",\r\n        modify_by: this.localStorage.userId,\r\n       \r\n      }\r\n      //\r\n      this.accountService.updatePassword(params).subscribe((res:any)=>{\r\n        //\r\n        this.logs = res;\r\n          this.snackBar.open(res.message, 'Dismiss', { duration: 3000 });\r\n        \r\n       },(err)=>{\r\n        //this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 3000 });\r\n      // this.router.navigateByUrl('/login');   \r\n    })\r\n\r\n\r\n    // }else{\r\n    // //  this.snackBar.open(MessageConstant.validOTPError, 'Dismiss', { duration: 5000 });\r\n    // }\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n    \r\n    this.form.get('currentPassword').setValue(params.data.currentPassword);\r\n    this.form.get('newPassword').setValue(params.data.newPassword); \r\n    \r\n  }\r\n\r\n\r\n  \r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n\r\n\r\n<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n  <mat-card>\r\n\r\n    <form [formGroup]=\"form\" class=\" \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field fxFlex=\"100\" appearance=\"outline\" class=\"example-full-width pr-4\">\r\n          <mat-label>Current Password</mat-label>\r\n          <input matInput placeholder=\"\" [type]=\"isPasswordFieldType ? 'text' : 'password'\"\r\n            formControlName=\"currentPassword\" required style=\"text-transform: none;\">\r\n          <mat-icon (click)=\"togglePasswordFieldType()\" matSuffix>{{isPasswordFieldType ? 'visibility_off' :\r\n            'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"form.get('currentPassword').invalid\">Please enter current password\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field fxFlex=\"100\" appearance=\"outline\" class=\"example-full-width pr-4\">\r\n          <mat-label>New Password</mat-label>\r\n          <input matInput placeholder=\"\" [type]=\"isPasswordConfirmFieldType ? 'text' : 'password'\"\r\n            formControlName=\"newPassword\" required style=\"text-transform: none;\">\r\n          <mat-icon (click)=\"togglePasswordConfirmFieldType()\" matSuffix>{{isPasswordConfirmFieldType ? 'visibility_off'\r\n            : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"form.get('newPassword').invalid\">Please enter new password\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field fxFlex=\"100\" appearance=\"outline\" class=\"example-full-width pr-4\">\r\n          <mat-label>Confirm Password</mat-label>\r\n          <input matInput placeholder=\"\" [type]=\"isPasswordConfirmFieldType ? 'text' : 'password'\"\r\n            formControlName=\"cnPassword\" required style=\"text-transform: none;\">\r\n          <mat-icon (click)=\"togglePasswordConfirmFieldType()\" matSuffix>{{isPasswordConfirmFieldType ? 'visibility_off'\r\n            : 'visibility'}}</mat-icon>\r\n          <mat-error *ngIf=\"form.get('cnPassword').invalid\">Please enter confirm password\r\n          </mat-error>\r\n          <mat-error *ngIf=\"form.get('cnPassword').hasError('confirm')\">Password is inconsistent!\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n        <button mat-raised-button color=\"primary\" type=\"button\" class=\"m-t-8\" (click)=\"onYesClick()\">{{isEditMode ?\r\n          'Save' : 'Save'}}</button>\r\n        <button mat-raised-button type=\"button\" color=\"warn\" class=\"m-t-8\" (click)=\"close()\"\r\n          style=\"margin-left: 1%;\">Cancel</button>\r\n      </div>\r\n    </form>\r\n\r\n  </mat-card>\r\n</div>"]}