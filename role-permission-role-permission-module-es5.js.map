{"version":3,"sources":["webpack:///src/app/main/user-management/role-permission/create/create.component.ts","webpack:///src/app/main/user-management/role-permission/create/create.component.html","webpack:///src/app/main/user-management/role-permission/action-dialog/action-dialog.component.ts","webpack:///src/app/main/user-management/role-permission/action-dialog/action-dialog.component.html","webpack:///src/app/shared/services/rfid/rfid.service.ts","webpack:///src/app/main/user-management/role-permission/role-permission-routing.module.ts","webpack:///src/app/main/user-management/role-permission/role-permission-crud/routes.ts","webpack:///src/app/main/user-management/role-permission/role-permission-crud/role-permission-crud.component.ts","webpack:///src/app/main/user-management/role-permission/role-permission-crud/role-permission-crud.component.html","webpack:///src/app/main/user-management/role-permission/role-permission.module.ts","webpack:///src/app/main/user-management/role-permission/list/list.component.ts","webpack:///src/app/main/user-management/role-permission/list/list.component.html"],"names":["TodoItemNode","ActionNode","TodoItemFlatNode","ActionMenuNode","TREE_DATA","ChecklistDatabase","dataChange","initialize","data","buildFileTree","next","obj","level","Object","keys","reduce","accumulator","key","value","node","item","children","concat","parent","name","push","CreateComponent","fb","masterService","rfidService","snackBar","router","datePipe","_database","menuAction","completed","subMenu","actionMenu","menuNode","roleType","id","flatNodeMap","Map","nestedNodeMap","selectedParent","newItemName","checklistSelection","getLevel","isExpandable","expandable","getChildren","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","get","flatNode","length","set","allComplete","treeFlattener","treeControl","dataSource","subscribe","localStorage","JSON","parse","getItem","permissionForm","group","required","descendants","getDescendants","descAllSelected","every","child","isSelected","result","some","descendantsAllSelected","toggle","select","deselect","forEach","checkAllParentsSelection","getParentNode","checkRootNodeSelection","nodeSelected","currentLevel","startIndex","dataNodes","indexOf","i","currentNode","parentNode","insertItem","expand","itemValue","nestedNode","updateItem","t","filter","onSubmit","selector","templateUrl","styleUrls","providers","encapsulation","None","animations","ActionDialogComponent","dialogRef","isEditMode","status","params","action","form","description","rfid_no","rfid_expDate","assignValues","close","formValues","expiry_date","transform","created_date","created_by","userId","modify_by","update","open","duration","err","create","hasError","setValue","rf_id_no","event","checked","ref","closeActionPanel","updateStatus","onYesClick","RfidService","http","apiUrl2","API_URL2","post","user_id","cpo_id","login_id","undefined","map_id","providedIn","routes","path","component","canActivate","RolePermissionRoutingModule","forChild","imports","exports","TABS_DEMO_ROUTES","redirectTo","pathMatch","RolePermissionCrudComponent","tabLinks","label","link","menuArray","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","COMPONENTS","COMPONENTS_DYNAMIC","RolePermissionModule","declarations","entryComponents","ListComponent","dialog","displayedColumns","getRFids","filterValue","target","trim","toLowerCase","paginator","firstPage","getAllRfid","rfid","sort","width","autoFocus","disableClose","afterClosed"],"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","file":"role-permission-role-permission-module-es5.js","sourcesContent":["import { Component, OnInit ,Injectable} from '@angular/core';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport { Validators, FormBuilder, FormGroup,FormControl } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { RfidService } from 'app/shared/services/rfid/rfid.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {FlatTreeControl} from '@angular/cdk/tree';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\ninterface RoleType {\r\n  id: string;\r\n  name: string;\r\n}\r\nexport class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  item: string;\r\n  actionNode:ActionNode[];\r\n}\r\nexport class ActionNode{\r\n  add:boolean;\r\n  delete:boolean;\r\n  download : boolean;\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  item: string;\r\n  level: number;\r\n  expandable: boolean;\r\n  actionAll : ActionMenuNode[];\r\n}\r\nexport class ActionMenuNode{\r\n  add:boolean;\r\n  delete:boolean;\r\n  download : boolean;\r\n  selectAll:boolean;\r\n}\r\n/**\r\n * The Json object for to-do list data.\r\n */\r\nconst TREE_DATA = {\r\n  'Home': {\r\n    'Map View': null,\r\n    'List View': null,\r\n  },\r\n  'Asset Management': {\r\n    'Charger Name': null,\r\n    'Charger Model': null,\r\n    'Vehicle On-board': null,\r\n    'RFID Management': {\r\n      'RFID': null,\r\n      'CPO-RFID Mapping': null,\r\n    }\r\n  },\r\n\r\n  'Client Management': {\r\n    'Client': null\r\n  },\r\n  'Operation Management': {\r\n    'CPOs': null,\r\n    'Station': null,\r\n  },\r\n  'Vehicle Registration': {\r\n    'End User - Vehicle Registation': null\r\n  },\r\n  'User Management': {\r\n    'User': null,\r\n    'End User': null,\r\n    'Role Permission': null,\r\n  },\r\n  'Charger Monitoring': {\r\n    'Charger Logs': null,\r\n   \r\n  },\r\n  'Logs History': {\r\n    'OCCP Logs': null,\r\n   \r\n  }\r\n};\r\nexport interface MenuAction {\r\n  name: string;\r\n  completed: boolean;\r\n  subMenu?: MenuAction[];\r\n}\r\n\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children items and new items can be added under the category.\r\n */\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\r\n\r\n  get data(): TodoItemNode[] { return this.dataChange.value; }\r\n\r\n  constructor() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\r\n    //     file node as children.\r\n    const data = this.buildFileTree(TREE_DATA, 0);\r\n\r\n    // Notify the change.\r\n    this.dataChange.next(data);\r\n  }\r\n\r\n  /**\r\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n   * The return value is the list of `TodoItemNode`.\r\n   */\r\n  buildFileTree(obj: {[key: string]: any}, level: number): TodoItemNode[] {\r\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\r\n      const value = obj[key];\r\n      const node = new TodoItemNode();\r\n      node.item = key;\r\n\r\n      if (value != null) {\r\n        if (typeof value === 'object') {\r\n          node.children = this.buildFileTree(value, level + 1);\r\n        } else {\r\n          node.item = value;\r\n        }\r\n      }\r\n\r\n      return accumulator.concat(node);\r\n    }, []);\r\n  }\r\n\r\n  /** Add an item to to-do list */\r\n  insertItem(parent: TodoItemNode, name: string) {\r\n    if (parent.children) {\r\n      parent.children.push({item: name} as TodoItemNode);\r\n      this.dataChange.next(this.data);\r\n    }\r\n  }\r\n\r\n  updateItem(node: TodoItemNode, name: string) {\r\n    node.item = name;\r\n    this.dataChange.next(this.data);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss'],\r\n  providers: [ChecklistDatabase,DatePipe],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n})\r\nexport class CreateComponent implements OnInit {\r\n  menuAction: MenuAction = {\r\n    name: 'select All',\r\n    completed: false,\r\n    subMenu: [\r\n      {name: 'Add/Update', completed: false},\r\n      {name: 'Delete', completed: false},\r\n      {name: 'Download', completed: false}\r\n    ]\r\n  };\r\n  \r\n  permissionForm: FormGroup;\r\n  actionMenu =false;\r\n  menuNode = false;\r\n  localStorage : any;\r\n  roleType: RoleType[] = [\r\n    {id: '1', name: 'Admin'},\r\n    {id: '2', name: 'CMS User'},\r\n    {id: '3', name: 'End User'}\r\n  ];\r\n  \r\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\r\n\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\r\n\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n\r\n  /** The new item's name */\r\n  newItemName = '';\r\n\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\r\n\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n\r\n  constructor(private fb: FormBuilder, private masterService : MasterService,\r\n    private rfidService : RfidService,private snackBar: MatSnackBar,\r\n    private router : Router,private datePipe: DatePipe,private _database: ChecklistDatabase) {\r\n     \r\n      this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n        this.isExpandable, this.getChildren);\r\n      this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n      this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n  \r\n      _database.dataChange.subscribe(data => {\r\n        this.dataSource.data = data;\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n \r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n \r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    this.permissionForm = this.fb.group({\r\n      roleType:['', [Validators.required]]\r\n    });\r\n   \r\n   \r\n  }\r\n\r\n  onSubmit(){\r\n  \r\n      \r\n      \r\n   \r\n\r\n  }\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\r\n\r\n  /**\r\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n   */\r\n  transformer = (node: TodoItemNode, level: number) => {\r\n    const existingNode = this.nestedNodeMap.get(node);\r\n    const flatNode = existingNode && existingNode.item === node.item\r\n        ? existingNode\r\n        : new TodoItemFlatNode();\r\n    flatNode.item = node.item;\r\n    flatNode.level = level;\r\n    flatNode.expandable = !!node.children?.length;\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    return flatNode;\r\n  }\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\r\n      return this.checklistSelection.isSelected(child);\r\n    });\r\n    return descAllSelected;\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n    this.actionMenu=true;\r\n    this.menuNode = true;\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n    \r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n    this.actionMenu=true;\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\r\n      return this.checklistSelection.isSelected(child);\r\n    });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewItem(node: TodoItemFlatNode) {\r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this._database.insertItem(parentNode!, '');\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this._database.updateItem(nestedNode!, itemValue);\r\n  }\r\n  allComplete: boolean = false;\r\n\r\n  updateAllComplete() {\r\n    this.allComplete = this.menuAction.subMenu != null && this.menuAction.subMenu.every(t => t.completed);\r\n  }\r\n\r\n  someComplete(node:any): boolean {\r\n\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n    if (node.this.menuAction.subMenu == null) {\r\n      return false;\r\n    }\r\n    return node.this.menuAction.subMenu.filter(t => t.completed).length > 0 && !this.allComplete;\r\n  }\r\n\r\n  setAll(completed: boolean) {\r\n    this.allComplete = completed;\r\n    if (this.menuAction.subMenu  == null) {\r\n      return;\r\n    }\r\n    this.menuAction.subMenu .forEach(t => t.completed = completed);\r\n  }\r\n  \r\n \r\n}\r\n\r\n\r\n","<mat-card>\r\n  <mat-card-content>\r\n    <form class=\"example-form\" [formGroup]=\"permissionForm\" (submit)=\"onSubmit()\" autocomplete=\"off\">\r\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n        <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n          <mat-form-field style=\"width:100%\">\r\n            <mat-select placeholder=\"Role\" formControlName=\"roleType\" required>\r\n              <mat-option *ngFor=\"let role of roleType\" [value]=\"role.id\">\r\n                {{role.name}}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"permissionForm.get('roleType').invalid\" class=\"mat-text-warn\">Role required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <mat-divider></mat-divider>\r\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n        <div fxFlex=\"100\" fxFlex.lt-sm=\"100\" style=\"margin-top:20px ;\">\r\n          <mat-card>\r\n            <div fxLayout=\"row wrap\" style=\"padding-top:20px;\">\r\n              <div fxFlex=\"100\" fxFlex.lt-sm=\"100\" style=\"border: 1px solid #ddd;;border-radius: 10px;\">\r\n                <mat-toolbar color=\"primary\" class=\"connector-toolbar\">\r\n                  <!-- sidebar toggle button -->\r\n                  <h6 class=\"m-0 pl-16 font-normal fz-1\">\r\n                    <button mat-icon-button [style.alignSelf]=\"'center'\" class=\"mr-16\">\r\n                      <mat-icon>list</mat-icon>\r\n                    </button> &nbsp;Menu List\r\n                  </h6>\r\n                </mat-toolbar>\r\n                <div fxLayout=\"row wrap\" style=\"padding-top:20px;\">\r\n                  <div fxFlex=\"100\" fxFlex.lt-sm=\"100\">\r\n                    <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n                      <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n                        <button mat-icon-button disabled></button>\r\n                        <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"checklistSelection.isSelected(node)\"\r\n                          (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n                        <div *ngIf=\"checklistSelection.isSelected(node)\"\r\n                          style=\"text-align: end;display: flex; margin-left: auto;\">\r\n                          <div fxLayout=\"row wrap\" style=\"padding-right: 10px;\">\r\n                            <div fxFlex=\"100\" fxFlex.lt-sm=\"100\">\r\n                              <mat-checkbox class=\"checklist-leaf-node\" id=\"selectAdd\">Add/Update</mat-checkbox>\r\n                              &nbsp;&nbsp;\r\n                              <mat-checkbox class=\"checklist-leaf-node\" id=\"selectDelete\">Delete</mat-checkbox>\r\n                              &nbsp;&nbsp;\r\n                              <mat-checkbox class=\"checklist-leaf-node\" id=\"selectDownload\">Download</mat-checkbox>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </mat-tree-node>\r\n\r\n                      <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n                        <button mat-icon-button disabled></button>\r\n                      </mat-tree-node>\r\n\r\n                      <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n\r\n                        <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.item\">\r\n                          <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                            {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                          </mat-icon>\r\n                        </button>\r\n                        <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n                          [indeterminate]=\"descendantsPartiallySelected(node)\" (change)=\"todoItemSelectionToggle(node)\">\r\n                          {{node.item}}</mat-checkbox>\r\n                        <div *ngIf=\"descendantsAllSelected(node)\"\r\n                          style=\"text-align: end;display: flex; margin-left: auto;\">\r\n                          <div class=\"cb-wrapper\" [ngClass]=\"{'cb-vertival': !tmp }\">\r\n                            <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"allComplete\"\r\n                              [indeterminate]=\"someComplete(node)\" (change)=\"setAll($event.checked)\">\r\n                              {{menuAction.name}}</mat-checkbox>&nbsp;&nbsp;\r\n                            <div *ngFor=\"let subMenu of menuAction.subMenu\">\r\n                              <mat-checkbox [(ngModel)]=\"subMenu.completed\" [ngModelOptions]=\"{standalone: true}\"\r\n                                (ngModelChange)=\"updateAllComplete()\">\r\n                                {{subMenu.name}}\r\n                              </mat-checkbox>&nbsp;&nbsp;\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <!--button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button-->\r\n                      </mat-tree-node>\r\n\r\n                    </mat-tree>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n          </mat-card>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { VehicleService } from 'app/shared/services/master/vehicle/vehicle.service';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { RfidService } from 'app/shared/services/rfid/rfid.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\n@Component({\r\n  selector: 'app-action-dialog',\r\n  templateUrl: './action-dialog.component.html',\r\n  styleUrls: ['./action-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers: [DatePipe],\r\n})\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  status = false;\r\n\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n\r\n  constructor(private fb: FormBuilder,private rfidService: RfidService, private snackBar: MatSnackBar,private datePipe: DatePipe,\r\n              public dialogRef: MatDialogRef<ActionDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      description : ['', [Validators.required]] ,\r\n      rfid_no: ['', [Validators.required]],\r\n      rfid_expDate : ['', [Validators.required]]   \r\n    });\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n  onYesClick(){\r\n    let formValues = this.form.value;\r\n    \r\n    const params: any = {\r\n\r\n      name :formValues.name, \r\n      description :formValues.description, \r\n      rfid_no :formValues.rfid_no,\r\n      expiry_date :this.datePipe.transform(formValues.rfid_expDate,\"yyyy-MM-dd\") ,\r\n      created_date: this.datePipe.transform(formValues.rfid_expDate,\"yyyy-MM-dd\") ,\r\n        created_by : this.localStorage.userId,\r\n      status : this.status == true ? 'Y' : 'N'\r\n  // tslint:disable-next-line: semicolon\r\n  }\r\n// tslint:disable-next-line: no-//\r\n\r\n    if (this.isEditMode){\r\n    params.id = this.params.data.id,\r\n    params.modify_by = this.localStorage.userId;\r\n  } else{\r\n    params.created_by = this.localStorage.userId;\r\n  }\r\n\r\n    if (this.isEditMode){\r\n    this.rfidService.update(params).subscribe(\r\n      (data: any ) => {\r\n        this.snackBar.open('Record updated successfully!', 'Dismiss', { duration: 5000 });\r\n        this.dialogRef.close();\r\n      },\r\n      (err) => {\r\n        this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n  }else{\r\n    this.rfidService.create(params).subscribe(\r\n      (data: any ) => {\r\n        this.snackBar.open('Rfid created!', 'Dismiss', { duration: 5000 });\r\n        this.dialogRef.close();\r\n      },\r\n      (err) => {\r\n        this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n    this.dialogRef.close(params);\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    this.form.get('rfid_no').setValue(params.data.rf_id_no);\r\n    this.form.get('rfid_expDate').setValue(params.data.expiry_date);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n  }\r\n\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n  \r\n\r\n<div fxLayout=\"row wrap\" class=\"matero-row\">\r\n  <div fxFlex=\"100\" class=\"matero-col\">\r\n    <mat-card>\r\n\r\n      <form [formGroup]=\"form\" class=\"form-field-full\">\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n\r\n          <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n            <mat-form-field>\r\n              <mat-label>Name</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"name\" required>\r\n              <mat-error *ngIf=\"form.get('name').invalid\">Please enter name\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n            <mat-form-field>\r\n              <mat-label>Description</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"description\" required>\r\n              <mat-error *ngIf=\"form.get('description').invalid\">Please enter description\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n            <mat-form-field>\r\n              <mat-label>RFID Number</mat-label>\r\n              <input matInput placeholder=\"\" formControlName=\"rfid_no\" required>\r\n              <mat-error *ngIf=\"form.get('rfid_no').invalid\">Please enter RFID number\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n            <mat-form-field>\r\n              <mat-label>Expiry Date</mat-label>\r\n              <input matInput [matDatepicker]=\"dp3\" formControlName=\"rfid_expDate\" disabled>\r\n              <mat-datepicker-toggle matSuffix [for]=\"dp3\"></mat-datepicker-toggle>\r\n              <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n              <mat-error *ngIf=\"form.get('rfid_expDate').invalid\">Please enter expiry date\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n\r\n          <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n            <mat-slide-toggle class=\"example-margin\" color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\"\r\n              #toggleElement>\r\n              {{status ? 'Active' : 'Inactive'}}</mat-slide-toggle>\r\n          </div>\r\n        </div>\r\n\r\n        <button mat-raised-button color=\"primary\" type=\"button\" class=\"m-t-8\" (click)=\"onYesClick()\">{{isEditMode ?\r\n          'Save' : 'Save'}}</button>\r\n        <button mat-raised-button type=\"button\" color=\"warn\" class=\"m-t-8\" (click)=\"close()\"\r\n          style=\"margin-left: 1%;\">Cancel</button>\r\n\r\n      </form>\r\n\r\n    </mat-card>\r\n  </div>\r\n\r\n</div>","import { Injectable } from \"@angular/core\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class RfidService {\r\n    apiUrl2 = `${environment.API_URL2}/rfid`;\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    create(params) {\r\n        return this.http.post(`${this.apiUrl2}/crt`, params);\r\n    }\r\n    update(params) {\r\n        return this.http.post(`${this.apiUrl2}/upd`, params);\r\n    }\r\n\r\n    createCpoRfidMapping(params) {\r\n        return this.http.post(`${this.apiUrl2}/crtCpoRfidMapping`, params);\r\n    }\r\n    updatecpoRfidMapping(params) {\r\n        return this.http.post(`${this.apiUrl2}/updCpoRfidMapping`, params);\r\n    }\r\n\r\n    getRFidnoById(id) {\r\n        return this.http.get(`${this.apiUrl2}/gtRFidnoById/${id}`);\r\n    }\r\n    getAllRfid() {\r\n        return this.http.get(`${this.apiUrl2}/gtRFids`);\r\n    }\r\n\r\n    delete(id, user_id) {\r\n        return this.http.delete(`${this.apiUrl2}/dlt/${id}/${user_id}`);\r\n    }\r\n\r\n    unMapRFidCpoID(id, user_id) {\r\n        return this.http.delete(\r\n            `${this.apiUrl2}/unMapRFidCpoID/${id}/${user_id}`\r\n        );\r\n    }\r\n\r\n    // getRFidsByCpoId(id){\r\n    //   return this.http.get(`${this.apiUrl2}/getRFidsByCpoId/${id}`);\r\n    // }\r\n\r\n    getAllRFidsWithMappedCPOs(id) {\r\n        return this.http.get(`${this.apiUrl2}/gtAllRFidsWithMappedCPOs/${id}`);\r\n    }\r\n    getCpoRFidMappingCW(id) {\r\n        return this.http.get(`${this.apiUrl2}/gtCpoRFidMappingCW/${id}`);\r\n    }\r\n    getRFidsByCpoId(id) {\r\n        return this.http.get(`${this.apiUrl2}/gtRFidsByCpoId/${id}`);\r\n    }\r\n\r\n    // Unmapped RFID\r\n    getUnmappedRFIDByCpoId(cpo_id) {\r\n        return this.http.get(`${this.apiUrl2}/unmappedRfidByCpoId/${cpo_id}`);\r\n    }\r\n\r\n    createRfidMappingwithDriver(params) {\r\n        return this.http.post(`${this.apiUrl2}/rfdrivermapping/crt`, params);\r\n    }\r\n\r\n    // Get All RFID by login Id\r\n    getAllRFIDbyCW(login_id, cpo_id) {\r\n        if (cpo_id == null || cpo_id == undefined || cpo_id == \"\") {\r\n            cpo_id = 0;\r\n        }\r\n        return this.http.get(\r\n            `${this.apiUrl2}/gtRfidByClientwise/${login_id}/${cpo_id}`\r\n        );\r\n    }\r\n\r\n    // ########################################################################################\r\n    // ########################################################################################\r\n    // ########################################################################################\r\n    getRechargeLogsbyCCSW(login_id, cpo_id) {\r\n        // if(cpo_id == null || cpo_id == undefined || cpo_id == \"\") {\r\n        //   cpo_id = 0;\r\n        // }\r\n        return this.http.get(\r\n            `${this.apiUrl2}/getRechargeLogsbyCCSW/${login_id}/${cpo_id}`\r\n        );\r\n    }\r\n    \r\n    updateBalance(params) {\r\n        return this.http.post(`${this.apiUrl2}/updateBalance`, params);\r\n    }\r\n\r\n    getRechargeLogsByCpoId(params) {\r\n        return this.http.post(`${this.apiUrl2}/getRechargeLogsByCpoId`, params);\r\n    }\r\n\r\n    getConsumptionLogsByCpoId(params) {\r\n        return this.http.post(`${this.apiUrl2}/getConsumptionLogsByCpoId`, params);\r\n    }\r\n    \r\n    // ########################################################################################\r\n    // ########################################################################################\r\n    // ########################################################################################\r\n\r\n    unmappedRfIdDriver(map_id) {\r\n        return this.http.delete(`${this.apiUrl2}/unmappedRfIdDriver/${map_id}`);\r\n    }\r\n}\r\n","import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RolePermissionCrudComponent } from './role-permission-crud/role-permission-crud.component';\r\nimport { TABS_DEMO_ROUTES } from './role-permission-crud/routes';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : 'crud',component : RolePermissionCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    }\r\n    \r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class RolePermissionRoutingModule{}","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent},\r\n  { path : 'list', component : ListComponent},\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import {Component,OnInit} from '@angular/core';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-role-permission-crud',\r\n  templateUrl: './role-permission-crud.component.html',\r\n  styleUrls: ['./role-permission-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n})\r\nexport class RolePermissionCrudComponent implements OnInit {\r\n   // Nav bar demo\r\n   tabLinks = [\r\n    { label: 'User', link: 'list' },\r\n    { label: 'Add New', link: 'create' }\r\n  ];\r\n\r\n  menuArray:any;\r\n  ngOnInit(){\r\n    this.menuArray  = JSON.parse( localStorage.getItem('activeMenuItems'));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent {}\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent {}\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent {}\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet ></router-outlet>\r\n</div>\r\n","import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { RolePermissionCrudComponent } from './role-permission-crud/role-permission-crud.component';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { RolePermissionRoutingModule } from './role-permission-routing.module';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nconst COMPONENTS =[RolePermissionCrudComponent, CreateComponent, ListComponent];\r\nconst COMPONENTS_DYNAMIC =[ActionDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, RolePermissionRoutingModule,FuseSharedModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class RolePermissionModule{}","\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RfidService } from 'app/shared/services/rfid/rfid.service';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nexport interface RFID {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  rf_id_no: string;\r\n  expiry_date: string;\r\n  status: string;\r\n  created_date: string;\r\n  createdby: number;\r\n  modify_date: string;\r\n  modifyby: number;\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n})\r\nexport class ListComponent implements OnInit {\r\n \r\n  displayedColumns: string[] = [ 'name', 'description','rf_id_no',\r\n  'expiry_date','status','action'];\r\n  dataSource: MatTableDataSource<RFID>;\r\n\r\n  rfid : RFID[];\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n\r\n  constructor(private rfidService : RfidService,public dialog : MatDialog,\r\n    private snackBar : MatSnackBar) {\r\n    // Create 100 users\r\n    // const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\r\n\r\n    // Assign the data to the data source for the table to render\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getRFids();\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getRFids(){\r\n    this.rfidService.getAllRfid().subscribe(\r\n      (data:any)=>{\r\n        this.rfid = data;\r\n        this.dataSource = new MatTableDataSource(this.rfid);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id){\r\n    \r\n    // this.rfidService.delete(id).subscribe(\r\n    //   (data:any)=>{\r\n        \r\n    //     this.getRFids();\r\n    //     this.snackBar.open('Deleted successfully','Dismiss',{duration:2000});\r\n    //   },(err)=>{\r\n        \r\n    //   }\r\n    // )\r\n  }\r\n\r\n\r\n  openDialog(action,data): void {\r\n    \r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '800px',\r\n      data: params,\r\n      autoFocus: false,\r\n      disableClose: true    \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getRFids();\r\n    });\r\n  }\r\n}\r\n\r\n","<div fxLayout=\"row wrap\" class=\"matero-row\">\r\n    <div fxFlex=\"100\" class=\"matero-col\">\r\n\r\n        <div class=\"mat-elevation-z8\">\r\n            <table mat-table [dataSource]=\"dataSource\" matSort>\r\n\r\n                <!-- ID Column -->\r\n                <ng-container matColumnDef=\"id\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Id </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.id}} </td>\r\n                </ng-container>\r\n\r\n                <!-- Name Column -->\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"description\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Description </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.description}} </td>\r\n                </ng-container>\r\n                <!-- Progress Column -->\r\n                <!-- <ng-container matColumnDef=\"description\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Description </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.description}}% </td>\r\n      </ng-container>\r\n   -->\r\n                <!-- Color Column -->\r\n                <!-- <ng-container matColumnDef=\"address\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.address}} </td>\r\n      </ng-container> -->\r\n                <!-- <ng-container matColumnDef=\"logoPath\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Logo Path </th>\r\n        <td mat-cell *matCellDef=\"let row\"> {{row.logoPath}} </td>\r\n      </ng-container> -->\r\n                <ng-container matColumnDef=\"rf_id_no\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> RFID Number </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.rf_id_no}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"expiry_date\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Expiry Date </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.expiry_date | date : 'dd/MM/yyyy'}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\r\n                    <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.status == 'Y' ? 'Active' : 'Inactive'}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef > Action </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        <!-- <button mat-raised-button color=\"primary\"\r\n                                (click)=\"openDialog('EDIT',element)\">Edit</button>\r\n                        <button mat-raised-button color=\"warn\" (click)=\"delete(element.id)\"\r\n                                style=\"margin-left: 1%;\">Remove</button>  -->\r\n\r\n\r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" (click)=\"openDialog('EDIT',element)\"\r\n                            style=\"cursor:pointer\">edit</mat-icon>\r\n\r\n                        <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"delete(element.id)\" style=\"cursor:pointer\">\r\n                            delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n                <tr class=\"mat-row\" *matNoDataRow>\r\n                    <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->"]}