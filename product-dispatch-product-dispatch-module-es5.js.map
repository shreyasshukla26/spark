{"version":3,"sources":["webpack:///src/app/main/asset/charger/product-dispatch/add-nickname/add-nickname.component.ts","webpack:///src/app/main/asset/charger/product-dispatch/add-nickname/add-nickname.component.html","webpack:///src/app/main/asset/charger/product-dispatch/product-dispatch-crud/routes.ts","webpack:///src/app/main/asset/charger/product-dispatch/create/create.component.ts","webpack:///src/app/main/asset/charger/product-dispatch/create/create.component.html","webpack:///src/app/main/asset/charger/product-dispatch/product-dispatch.module.ts","webpack:///src/app/main/asset/charger/product-dispatch/product-dispatch-crud/product-dispatch-crud.component.ts","webpack:///src/app/main/asset/charger/product-dispatch/product-dispatch-crud/product-dispatch-crud.component.html","webpack:///src/app/main/asset/charger/product-dispatch/list/list.component.ts","webpack:///src/app/main/asset/charger/product-dispatch/list/list.component.html","webpack:///src/app/main/asset/charger/product-dispatch/product-dispatch-routing.module.ts"],"names":["autocompleteObjectValidator","control","value","AddNicknameComponent","fb","chargerService","snackBar","datePipe","dialogRef","data","countryService","isEditMode","status","maxDate","Date","chargerAs","removable","initialize","localStorage","JSON","parse","getItem","params","action","form","group","nickname","required","assignValues","close","valid","selectedCharger","length","formValues","map","v","id","nick_name","loginid","userId","updatedby","updateNickName","subscribe","open","recordUpdateMessage","duration","err","errorMessage","get","hasError","event","checked","ref","chargerAsRef","i","splice","closeActionPanel","onYesClick","selector","templateUrl","styleUrls","encapsulation","None","animations","providers","TABS_DEMO_ROUTES","path","component","canActivate","redirectTo","pathMatch","Charger","SerialData","serial_no","remarks","CreateComponent","masterService","excelSrv","clientService","router","cdr","UserInputType","ID","selectedInputType","name","totalSerial","displayedColumns","mappedColumns","unmappedColumns","excelSerial","uploadExcelTable","importSerialNo","selectedChargerSerial","chipSelectedSerialNo","allowFreeTextAddEngineer","separatorKeysCodes","validSerialNo","selectedSerialNo","response_mapped","response_unmapped","returnDataStatus","client","serialNumber","dispatch_date","getClients","getSerialNo","serialNo","getPlantChargers","chargerSerials","chargerSerialsOrg","filteredOptionSerial","controls","valueChanges","pipe","_filterSerial","getActiveClientsCW","clients","filteredOptionsClient","_filterClientModels","item","filterValue","toLowerCase","resetChrgerList","filter","option","includes","undefined","isExist","k","push","setValue","unitType","formDirective","serialBoxEmpty","client_id","sub_client_id","dispatch_status","transform","charger_data","is_private","created_by","dispatch_by","getProductDispatch","chargers_mapped","chargers_not_mapped","resetForm","reset","markAsPristine","detectChanges","mappedDataSource","paginator","mappedPaginator","unmappedDataSource","unmappedPaginator","salesDispatch","evt","target","files","Error","reader","FileReader","onload","e","bstr","result","importFromFile","header","Object","getOwnPropertyNames","importedData","slice","arr","obj","j","dataSource","importPaginator","readAsBinaryString","trigger","stopPropagation","openPanel","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","onSubmit","updateStatus","updateChargerAsStatus","serialInput","matAutocomplete","COMPONENTS","COMPONENTS_DYNAMIC","ProductDispatchModule","imports","declarations","entryComponents","ProductDispatchCrudComponent","_utilityService","tabLinks","tempLinks","activeMenuItems$","menuItemSelecte","menuArray","title","nav_list","nav_list_with_tab","x","objectData","children","y","objectChildData","z","isDefaultRoutePermeted","label","link","navigate","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","$event","selection","Client","ListComponent","dialog","chargingStationService","head","clientSearch","nameSearch","serialSearch","modelSearch","statusSearch","charClient","charCPO","charStat","clientCpoStaDetails","filterEntity","filterType","ANYWHERE","trim","firstPage","getAllClientChargers","allChargers","statusString","sort","NoRecordFoundMessage","confirmDialogRef","disableClose","afterClosed","deleteChargerFromClient","deleteMessage","width","autoFocus","panelClass","visibleOption","ev","client_name","model_name","exportedData","filteredData","chargerModel","doc","chrger","img","Image","imgRight","src","srcSparkEV","createdDate","toLocaleString","setFontSize","setTextColor","autoTable","body","theme","headStyles","fontStyle","fillColor","styles","cellPadding","fontSize","margin","top","didDrawCell","didDrawPage","addImage","text","internal","pageSize","getWidth","align","setGState","GState","opacity","f_Name","addWaterMark","output","save","newpage","getNumberOfPages","String","clientList","role_code","toSelect","getCPOByClient","filteredOptionsCharClient","_filterCharClient","cpoList","stationList","getStationByCPO","cpo_id","filteredOptionsCharCPO","cpo_name","_filterCharCPO","station","filteredOptionsCharStat","station_name","_filterCharStat","numSelected","selected","numRows","isAllSelected","clear","select","row","isSelected","tableExport","pdfExport","routes","ProductDispatchRoutingModule","forChild","exports"],"mappings":"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","file":"product-dispatch-product-dispatch-module-es5.js","sourcesContent":["import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { VehicleService } from 'app/shared/services/master/vehicle/vehicle.service';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { ChargerService } from 'app/shared/services/charger/charger.service';\r\nimport { CountriesService } from 'app/shared/services/countries.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { DatePipe } from '@angular/common';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-add-nickname',\r\n  templateUrl: './add-nickname.component.html',\r\n  styleUrls: ['./add-nickname.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\nexport class AddNicknameComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = true;\r\n  form: FormGroup;\r\n  localStorage: any;\r\n  status = false;\r\n  countries: any;\r\n  stateName: any;\r\n  cities: any;\r\n  states: any;\r\n  pin_code_id: any;\r\n  country_id: any;\r\n  state_id: any;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  maxDate = new Date();\r\n  chargerAs = false;\r\n  selectedCharger:any;\r\n  @ViewChild(\"toggleChargerAsElement\") chargerAsRef: any;\r\n  removable:boolean = true;\r\n  constructor(private fb: FormBuilder, private chargerService: ChargerService, private snackBar: MatSnackBar,private datePipe: DatePipe,\r\n    public dialogRef: MatDialogRef<AddNicknameComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, public countryService: CountriesService) { }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n\r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      nickname: ['',[Validators.required]],\r\n      \r\n    });\r\n\r\n    if (this.isEditMode) {\r\n      this.assignValues(this.params);\r\n    }\r\n    //this.getCountry();\r\n    \r\n  }\r\n \r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onYesClick() {\r\n    if(this.form.valid){\r\n      if(this.selectedCharger.length>0){\r\n        let formValues = this.form.value;\r\n\r\n        const params: any = {\r\n          \r\n          data: this.selectedCharger.map(v=>({id:v.id,nick_name:formValues.nick_name})),\r\n        }\r\n        // tslint:disable-next-line: no-//\r\n    \r\n        if (this.isEditMode) {\r\n            params.loginid = this.localStorage.userId;\r\n            params.updatedby = this.localStorage.userId;\r\n        } \r\n    \r\n        if (this.isEditMode) {\r\n           this.chargerService.updateNickName(params).subscribe(\r\n             (data: any) => {\r\n               this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n               this.dialogRef.close();\r\n             },\r\n             (err) => {\r\n               this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n             }\r\n           )\r\n        }\r\n    \r\n        this.dialogRef.close(params);\r\n      }else{\r\n        this.snackBar.open(\"No charger is selected to add nickname\", 'Dismiss', { duration: 5000 });\r\n      }\r\n\r\n      \r\n    }\r\n    \r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n        ? 'Not a valid email'\r\n        : '';\r\n  }\r\n\r\n  assignValues(params) {\r\n\r\n    this.selectedCharger = params.data\r\n  }\r\n\r\n  updateStatus(event) {\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n  updateChargerAsStatus(event){\r\n    this.chargerAs = event.checked;\r\n    this.chargerAsRef.checked = this.chargerAs;\r\n  }\r\n  public removeSerial(i): void {\r\n    this.selectedCharger.splice(i,1);\r\n   \r\n   \r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n\r\n<mat-toolbar class=\"action_toolbar\">Sales Dispatch</mat-toolbar>\r\n<div style=\"padding:24px;max-height: 22vw;overflow: auto;\">\r\n\t<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\t\t<form [formGroup]=\"form\" class=\" mat-elevation-z4  \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n\t\t\tname=\"form\">\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"display: block  !important;padding-top: 10px;width:100%;\"\r\n\t\t\tfxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-chip-list aria-label=\"Fish selection\">\r\n\t\t\t\t<mat-chip *ngFor=\"let option of selectedCharger;let i = index;\" [selectable]=\"selectable\"\r\n\t\t\t\t  [removable]=\"removable\" (removed)=\"removeSerial(i)\">\r\n\t\t\t\t  {{option?.serial_no}}\r\n\t\t\t\t  <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\r\n\t\t\t\t</mat-chip>\r\n\t\t\t  </mat-chip-list>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\" style=\"margin-top:2rem;\">\r\n\t\t\t\t\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"33\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Add Nickname </mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"nickname\"  autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"nickname\">account_circle</mat-icon>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\t\t\t\t<button mat-raised-button color=\"primary\" class=\"mr-8\"(click)=\"onYesClick()\">\r\n\t\t\t\t\t\t{{isEditMode ? 'Save' : 'Save'}}</button>\r\n\t\t\t\t<button mat-raised-button color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t</div>\r\n</div>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent ,canActivate:[AuthGuard] },\r\n  { path : 'list', component : ListComponent , canActivate:[AuthGuard]},\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import { Component, OnInit,ViewChild ,ElementRef,ChangeDetectorRef} from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup, ValidatorFn,AbstractControl,FormArray} from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { VehicleService } from 'app/shared/services/master/vehicle/vehicle.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport {ChargerService} from 'app/shared/services/charger/charger.service';\r\nimport {CountriesService} from 'app/shared/services/countries.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport { MessageConstant} from 'app/shared/utils/message.constant';\r\nimport * as XLSX from 'xlsx';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ExcelService} from 'app/shared/services/excel.service'\r\nimport { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from 'constants';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport {MatAutocompleteSelectedEvent,  MatAutocomplete} from '@angular/material/autocomplete';\r\nimport {MatChipInputEvent} from '@angular/material/chips'\r\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\r\nimport { DatePipe } from '@angular/common';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\nexport class Charger {\r\n  id: string;\r\n  name : string;\r\n    serial_no : string;\r\n    batch_id : number ;\r\n    station_id : number;\r\n    current_version_id : number ;\r\n    no_of_guns : number;\r\n    Address : string;\r\n    Lat : number;\r\n    Lng : number;\r\n    OTA_Config : string;\r\n    Periodic_Check_Ref_Time : string;\r\n    Periodicity_in_hours : number;\r\n    When_to_Upgrade : string;\r\n    Upgrade_Specific_Time : number;\r\n    is_available : number;\r\n  status: string;\r\n  created_date: string;\r\n  createdby: number;\r\n  modify_date: string;\r\n  modifyby: number;\r\n  statusString:string;\r\n  availableString:string;\r\n}\r\nexport class SerialData {\r\n  //SERIAL_No: string;\r\n  serial_no: string = \"\";\r\n  remarks:string = \"\";\r\n  }\r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\nexport class CreateComponent implements OnInit {\r\n \r\n\r\n  form: FormGroup;\r\n  brands:any;\r\n  models:any;\r\n  chargerTypes:any;\r\n  vehicleTypes:any;\r\n  localStorage : any;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  filteredOptionState: Observable<any[]>;\r\n  filteredOptionCity: Observable<any[]>;\r\n  countries:any;\r\n  stateName:any;\r\n  cities:any;\r\n\r\n  states:any;\r\n  pin_code_id:any;\r\n  country_id:any;\r\n  state_id:any;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"toggleChargerAsElement\") chargerAsRef: any;\r\n  status = false;\r\n  chargerAs = false;\r\n  UserInputType = [\r\n    { \"name\": \"Table View\", ID: \"D1\"},\r\n    { \"name\": \"Upload CSV\", ID: \"D2\"}\r\n]\r\nfilteredOptionsClient: Observable<any[]>;\r\nclients:any;\r\nselectedInputType = this.UserInputType[0].name;\r\npublic unitValue;\r\nselectedUnitValue : any;\r\ntotalSerial =[];\r\nserialNumber: FormArray;\r\noldUnitCount:number;\r\nchargerSerials:any;\r\nchargerSerialsOrg:any;\r\nfilteredOptionSerial: Observable<any[]>;\r\ndataSource : MatTableDataSource<SerialData>;\r\ndisplayedColumns: string[] = ['serial_no'];\r\nmappedColumns: string[] = ['serial_no','remarks'];\r\nmappedDataSource :MatTableDataSource<SerialData>;\r\nunmappedColumns: string[] = ['serial_no','remarks'];\r\nunmappedDataSource :MatTableDataSource<SerialData>;\r\nexcelSerial= [];\r\n//@ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n// @ViewChild('serialTable', { static: false }) serialTable: ElementRef;\r\n// @ViewChild('mapped_table') mapped_table: ElementRef;\r\n// @ViewChild('unmapped_table') unmapped_table: ElementRef;\r\nimportFile: File;\r\nmaxDate = new Date();\r\n  uploadExcelTable:boolean =false;\r\n  importSerialNo: SerialData[] = [];\r\n  unitType:any;\r\n   selectedChargerSerial  = [];\r\n   public chipSelectedSerialNo: Charger[] = [];\r\n   public filteredSerial: Observable<String[]>;\r\n   private allowFreeTextAddEngineer = false;\r\n\r\n \r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  \r\n  @ViewChild('serialInput') serialInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n   validSerialNo = [];\r\n  selectedSerialNo = [];\r\n  response_mapped =[];\r\n  response_unmapped = [];\r\n  returnDataStatus :boolean = false;\r\n  removable = true;\r\n   @ViewChild('importPaginator') importPaginator: MatPaginator;\r\n   @ViewChild('mappedPaginator') mappedPaginator: MatPaginator;\r\n   @ViewChild('unmappedPaginator') unmappedPaginator: MatPaginator;\r\nconstructor(private fb: FormBuilder, private masterService : MasterService,private excelSrv: ExcelService,\r\n    private clientService : ClientService,private snackBar: MatSnackBar,private chargerService:ChargerService,\r\n    private router : Router,public countryService: CountriesService,private datePipe: DatePipe,private cdr :ChangeDetectorRef) {\r\n     \r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      client: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      serialNumber: [''],\r\n      dispatch_date:['',[Validators.required]],\r\n      status : this.status == true ? 'Y' : 'N',\r\n      chargerAs : this.chargerAs == true ? 0 : 1      \r\n    });\r\n    \r\n    //this.getCountry();\r\n    this.getClients();\r\n    this.getSerialNo();\r\n    //this.getAllCity();\r\n  }\r\n  // ngAfterViewInit() {\r\n  //   this.dataSource.paginator = this.paginator\r\n  //   this.mappedDataSource.paginator = this.mappedPaginator;\r\n  //   this.unmappedDataSource.paginator = this.unmappedPaginator;\r\n  // }\r\n  createSerial(): FormGroup {\r\n    return this.fb.group({\r\n      serialNo: ['', [Validators.required,autocompleteObjectValidator()]],\r\n     \r\n    });\r\n  }\r\n  getSerialNo(){\r\n    this.chargerService.getPlantChargers().subscribe(\r\n      (data:any)=>{\r\n        if(data != null){\r\n          this.chargerSerials = data;\r\n          this.chargerSerialsOrg = [...this.chargerSerials];\r\n          this.filteredOptionSerial = this.form.controls.serialNumber.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.serial_no),\r\n            map(serial_no => serial_no ? this._filterSerial(serial_no) : this.chargerSerials)\r\n          );\r\n        }\r\n       \r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n  }\r\n\r\n  getClients(){\r\n    \r\n    this.clientService.getActiveClientsCW(this.localStorage.userId).subscribe(\r\n      (data:any)=>{\r\n        if(data != null){\r\n          this.clients = data;\r\n          this.filteredOptionsClient = this.form.controls.client.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterClientModels(name) : this.clients)\r\n          );\r\n        }\r\n       \r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n\r\n  }\r\n  displaySerial(item: any): string {\r\n    return item && item.serial_no ? item.serial_no : '';\r\n  }\r\n  private _filterSerial(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    this.chargerSerials = this.resetChrgerList();\r\n   \r\n    \r\n    \r\n    return this.chargerSerials.filter(option => option.serial_no.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  resetChrgerList():any[]{\r\n    var chargerSerials = [];\r\n    if ( this.selectedSerialNo != undefined && this.selectedSerialNo.length > 0) {\r\n      \r\n      var isExist = true;\r\n     \r\n      for(var k =0; k< this.chargerSerialsOrg.length;k++){\r\n          var serialNo = this.chargerSerialsOrg[k];\r\n           isExist = false;\r\n           for(var i =0;i< this.selectedSerialNo.length; i++){\r\n               var selectedSerialNo = this.selectedSerialNo[i];\r\n               if(selectedSerialNo.serial_no == serialNo.serial_no){\r\n                  isExist =true;\r\n               }\r\n           }\r\n\r\n           if(!isExist){\r\n            chargerSerials.push(serialNo);\r\n           }\r\n      }\r\n\r\n  }else{\r\n    chargerSerials= [...this.chargerSerialsOrg];\r\n  }\r\n   return chargerSerials;\r\n  }\r\n\r\n  displayClient(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterClientModels(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.clients.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  onSerialSelected(event)\r\n  {\r\n    this.selectedSerialNo.push(event.option.value);\r\n    //this.form.controls['serialNumber'].setValue('');\r\n    this.form.get('serialNumber').setValue('');\r\n    this.chargerSerials = this.resetChrgerList();\r\n    this.unitType += 1;\r\n    this.filteredOptionSerial = this.form.controls.serialNumber.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.serial_no),\r\n          map(serial_no => serial_no ? this._filterSerial(serial_no) : this.chargerSerials)\r\n        );\r\n  }\r\n  onSubmit(formDirective){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n      if(this.selectedSerialNo.length == 0 ){\r\n        this.snackBar.open(MessageConstant.serialBoxEmpty, 'Dismiss', { duration: 5000 });\r\n      }else{\r\n        let params = {\r\n          client_id :formValues.client.id, \r\n          sub_client_id:\"12\",\r\n          dispatch_status:\"Y\",\r\n          dispatch_date: this.datePipe.transform(formValues.dispatch_date,\"yyyy-MM-dd\") ,\r\n          charger_data: this.selectedSerialNo.map(v=>({id:v.id,serial_no:v.serial_no})),\r\n          status :  this.status == true ? 'Y' : 'N', \r\n          is_private:this.chargerAs == true? 1:0,\r\n          created_by : this.localStorage.userId, \r\n          dispatch_by:this.localStorage.userId\r\n        }\r\n    \r\n        this.chargerService.getProductDispatch(params).subscribe(\r\n          (data:any )=>{\r\n            if(data.status = true){\r\n              this.returnDataStatus = true;\r\n              this.selectedSerialNo = [];\r\n              this.getClients();\r\n              this.response_mapped = data.data[0].chargers_mapped;\r\n              this.response_unmapped = data.data[0].chargers_not_mapped;\r\n              formDirective.resetForm();\r\n              this.form.reset();\r\n              this.form.markAsPristine();\r\n            }\r\n            if (this.response_mapped.length<0){\r\n            }else{\r\n                 this.cdr.detectChanges();\r\n                  this.mappedDataSource = new MatTableDataSource(this.response_mapped);\r\n                this.mappedDataSource.paginator = this.mappedPaginator;\r\n            }\r\n            if (this.response_unmapped.length<0){\r\n            }else{\r\n              this.cdr.detectChanges();\r\n                  this.unmappedDataSource = new MatTableDataSource(this.response_unmapped);\r\n                  this.unmappedDataSource.paginator = this.unmappedPaginator;\r\n            }\r\n            this.snackBar.open(MessageConstant.salesDispatch, 'Dismiss', { duration: 5000 });\r\n          },\r\n          (err)=>{\r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      }\r\n      \r\n    }else{\r\n      return;\r\n    }\r\n     \r\n  \r\n   \r\n    \r\n  }\r\n \r\n  \r\n  \r\n \r\n  uploadedFile(evt: any) {\r\n    let target: DataTransfer = <DataTransfer>(evt.target);\r\n    if (target.files.length !== 1) throw new Error('Cannot use multiple files');\r\n    this.selectedSerialNo  = [];\r\n    let reader: FileReader = new FileReader();\r\n    reader.onload = (e: any) => {\r\n   \r\n      let bstr: string = e.target.result;\r\n      let data = <any[]>this.excelSrv.importFromFile(bstr);\r\n\r\n      let header: string[] = Object.getOwnPropertyNames(new SerialData());\r\n      let importedData = data.slice(1);\r\n\r\n      this.importSerialNo = importedData.map(arr => {\r\n        let obj = {};\r\n        for (let i = 0; i < header.length; i++) {\r\n          const k = header[i];\r\n          obj[k] = arr[i];\r\n        }\r\n        return <SerialData>obj;\r\n      })\r\n     \r\n     // let tempSerialArray = [];\r\n     \r\n    //  this.importSerialNo.map(element => {\r\n    //   element.Tag = \"Unverified\";\r\n    //  });\r\n        for(var i= 0;i< this.importSerialNo.length;i++){\r\n        for(var j= 0;j<this.chargerSerials.length;j++ ){\r\n              \r\n          if(this.importSerialNo[i].serial_no == this.chargerSerials[j].serial_no)\r\n          {\r\n            \r\n            this.selectedSerialNo.push(this.chargerSerials[j])\r\n          }\r\n        }\r\n          \r\n      }\r\n        // this.selectedSerialNo.push(this.importSerialNo);\r\n      this.uploadExcelTable = true;\r\n      this.cdr.detectChanges();\r\n      this.dataSource = new MatTableDataSource(this.selectedSerialNo);\r\n      this.dataSource.paginator = this.importPaginator;\r\n    }\r\n   \r\n    \r\n    reader.readAsBinaryString(target.files[0]);\r\n\r\n  }\r\n  \r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n \r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  } \r\n  updateChargerAsStatus(event){\r\n    this.chargerAs = event.checked;\r\n    this.chargerAsRef.checked = this.chargerAs;\r\n  }\r\n  \r\n \r\n  public removeSerial(i): void {\r\n    this.selectedSerialNo.splice(i,1);\r\n    this.chargerSerials = this.resetChrgerList();\r\n    this.unitType -1 ;\r\n    this.filteredOptionSerial = this.form.controls.serialNumber.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.serial_no),\r\n          map(serial_no => serial_no ? this._filterSerial(serial_no) : this.chargerSerials)\r\n        );\r\n  }\r\n  selectionMade(event: Event, trigger: MatAutocompleteTrigger) {\r\n    event.stopPropagation();\r\n    trigger.openPanel();\r\n}\r\nmappedTableExport()\r\n{\r\n   const workSheet = XLSX.utils.json_to_sheet(this.mappedDataSource.data);\r\n    const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, 'SheetName');\r\n    XLSX.writeFile(workBook, 'Mapped Charger.xlsx');\r\n\r\n}\r\nunmappedTableExport()\r\n{\r\n  const workSheet = XLSX.utils.json_to_sheet(this.unmappedDataSource.data);\r\n  const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(workBook, workSheet, 'SheetName');\r\n  XLSX.writeFile(workBook, 'UnMapped Charger.xlsx');\r\n}\r\nbackForm(){\r\n  //this.returnDataStatus= false;\r\n}\r\n}\r\n\r\n\r\n","<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n  <form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n    fxFlex=\"1 0 auto\" name=\"form\" #formDirective=\"ngForm\" (submit)=\"onSubmit(formDirective)\">\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n      <div fxFlex=\"100\" style=\"padding-bottom: 20px;\">\r\n        <mat-label>User Input &nbsp;&nbsp;</mat-label>\r\n        <mat-radio-group name=\"opList\" [(ngModel)]=\"selectedInputType\" [ngModelOptions]=\"{standalone: true}\">\r\n          <mat-radio-button *ngFor=\"let op of UserInputType\" style=\"padding-right:10px\" [value]=\"op.name\" name=\"opList\">\r\n            {{ op.name}}</mat-radio-button>&nbsp;&nbsp;\r\n        </mat-radio-group>\r\n      </div>\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n        <mat-label>Client</mat-label>\r\n        <input type=\"text\" matInput formControlName=\"client\" autocomplete=\"off\" [matAutocomplete]=\"clientAuto\" required>\r\n        <mat-autocomplete #clientAuto=\"matAutocomplete\" [displayWith]=\"displayClient\">\r\n          <mat-option *ngFor=\"let option of filteredOptionsClient | async\" [value]=\"option\">\r\n            {{option.name}}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n        <div matSuffix style=\"display: flex;\">\r\n          <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n          <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select client\">account_circle</mat-icon>\r\n        </div>\r\n        <mat-error *ngIf=\"form.get('client').invalid\">Please select client</mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n        <mat-label>Dispatch Date</mat-label>\r\n        <input matInput [max]=\"maxDate\" [matDatepicker]=\"dp3\" formControlName=\"dispatch_date\" disabled>\r\n\r\n        <div matSuffix style=\"display: flex;\">\r\n          <mat-icon style=\"padding-top:7px;\" class=\"secondary-text\" matTooltip=\"Please enter expiry date\">help\r\n          </mat-icon>\r\n          <mat-datepicker-toggle [for]=\"dp3\"></mat-datepicker-toggle>\r\n          <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n        </div>\r\n\r\n\r\n        <mat-error *ngIf=\"form.get('dispatch_date').invalid\">Please enter expiry date\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n      <div fxFlex=\"10\" class=\"pr-4\">\r\n        <mat-slide-toggle class=\"example-margin\" color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\"\r\n          #toggleElement>\r\n          {{status ? 'Active' : 'Inactive'}}\r\n        </mat-slide-toggle>\r\n      </div>\r\n      <div fxFlex=\"10\" class=\"pr-4\">\r\n        <mat-slide-toggle class=\"example-margin\" color=\"primary\" [checked]=\"chargerAs\" (change)=\"updateChargerAsStatus($event)\"\r\n          #toggleChargerAsElement>\r\n          {{chargerAs ? 'Private' : 'Public'}}\r\n        </mat-slide-toggle>\r\n      </div>\r\n    </div>\r\n    <div style=\"padding-top:10px;\">\r\n      <div *ngIf=\"selectedInputType=='Table View'\" style=\"display: block  !important;\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"display: block  !important;padding-top: 10px;width:100%\"\r\n          fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n          <!-- <div fxFlex=\"70\" class=\"pr-4\">\r\n            <ul style=\"display:flex;padding-inline-start:5px;padding-top: 20px;\">\r\n              <li *ngFor=\"let option of selectedSerialNo; let i = index;\" style=\"list-style: none;\">\r\n                <span class=\"chip\"> {{option?.serial_no}} &nbsp;\r\n                  <span class=\"material-icons closebtn\" (click)=\"removeSerial(i)\">highlight_off </span>\r\n                </span>\r\n              </li>\r\n            </ul>\r\n          </div> -->\r\n          <mat-chip-list aria-label=\"Fish selection\">\r\n            <mat-chip *ngFor=\"let option of selectedSerialNo;let i = index;\" [selectable]=\"selectable\"\r\n              [removable]=\"removable\" (removed)=\"removeSerial(i)\">\r\n              {{option?.serial_no}}\r\n              <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\r\n            </mat-chip>\r\n          </mat-chip-list>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"selectedInputType=='Table View'\" style=\"display: block  !important;padding-top: 10px;\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n          <mat-form-field appearance=\"outline\" fxFlex=\"100\" class=\"pr-4\">\r\n            <mat-label>Serial No</mat-label>\r\n            <input type=\"text\" #trigger=\"matAutocompleteTrigger\" matInput formControlName=\"serialNumber\" type=\"search\"\r\n              autocomplete=\"off\" [matAutocomplete]=\"seialAuto\">\r\n              <div matSuffix style=\"display: flex;\">\r\n                <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter serial no\">help</mat-icon>\r\n              </div>\r\n            <mat-autocomplete #seialAuto=\"matAutocomplete\" [displayWith]=\"displaySerial\"\r\n              (optionSelected)='onSerialSelected($event)'>\r\n              <mat-option *ngFor=\"let option of filteredOptionSerial | async\" [value]=\"option\"\r\n                (click)=\"selectionMade($event, trigger)\">\r\n                {{option.serial_no}}\r\n              </mat-option>\r\n            </mat-autocomplete>\r\n            <mat-error *ngIf=\"form.get('serialNumber').invalid\">Please select part number </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"selectedInputType=='Upload CSV'\" fxLayout=\"column\" style=\"padding-top:30px;\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n          <h5 style=\"text-align: right;\">Click hear to <a href=\"assets/images/serialno.csv\" download>download file\r\n            </a>format (CSV only)</h5>\r\n          <div style=\"text-align: center;\">\r\n            <!--input #fileInput type=\"file\" id=\"file1\" (click)=\"fileInput.value = null\" value=\"\" type=\"file\"\r\n              id='excel-upload' accept=\".csv\" multiple=\"false\" (change)=\"uploadedFile($event)\"-->\r\n\r\n            <input hidden type=\"file\" (click)=\"fileInput.value = null\" value=\"\" id='excel-upload' accept=\".csv\"\r\n              multiple=\"false\" (change)=\"uploadedFile($event)\" #fileInput />\r\n            <button mat-raised-button color=\"primary\" type=\"button\" class=\"add-file-button\" (click)=\"fileInput.click()\"\r\n              aria-label=\"Add file\">\r\n              Browse File\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <!-- <h5 style=\"text-align: right;\">Click hear to <a href=\"assets/images/serialno.csv\" download>download file\r\n          </a>format (CSV only)</h5>\r\n        <div style=\"text-align: center;\">\r\n          <input #fileInput type=\"file\" id=\"file1\" (click)=\"fileInput.value = null\" value=\"\" type=\"file\"\r\n            id='excel-upload' accept=\".csv\" multiple=\"false\" (change)=\"uploadedFile($event)\">\r\n        </div> -->\r\n\r\n        <!-- <label>\r\n                  <i class=\"temp-upload-icon\" for=\"excel-upload\"></i>\r\n                  <input  />\r\n                </label> -->\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n          <div *ngIf=\"uploadExcelTable\">\r\n            <mat-table #importTable [dataSource]=\"dataSource\" [cdkTable]=\"importTable\">\r\n\r\n              <ng-container matColumnDef=\"serial_no\">\r\n                <mat-header-cell mat-header-cell *matHeaderCellDef> SERIAL No </mat-header-cell>\r\n                <mat-cell mat-cell *matCellDef=\"let element\">{{ element.serial_no }}</mat-cell>\r\n              </ng-container>\r\n              <!--ng-container matColumnDef=\"status\">\r\n                                <th mat-header-cell *matHeaderCellDef>Status </th>\r\n                                <td mat-cell *matCellDef=\"let element\">{{ element.Tag }}</td>\r\n                              </ng-container-->\r\n              <mat-header-row mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n              <mat-row mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n\r\n            </mat-table>\r\n            <mat-paginator #importPaginator [pageSize]=\"5\" [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"returnDataStatus\" class=\"mat-card p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n      style=\"padding-top:20px\">\r\n      <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n        <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n          <div style=\"margin-bottom: 12px;\">\r\n            <span style=\"font-size:16px;\">Charger Mapped</span> &nbsp;&nbsp;\r\n            <img (click)=\"mappedTableExport()\" src=\"/assets/images/excel_icon.png\" width=\"24px\" height=\"auto\"\r\n              style=\"cursor:pointer\" />\r\n            <!-- <span class=\"material-icons\"  (click)=\"mappedTableExport()\" >\r\n                download_for_offline\r\n                </span> -->\r\n\r\n\r\n          </div>\r\n          <div id=\"mapTable\">\r\n            <mat-table #mappedTable [dataSource]=\"mappedDataSource\" [cdkTable]=\"mappedTable\" class=\"mat-elevation-z2\">\r\n\r\n              <ng-container matColumnDef=\"serial_no\">\r\n                <mat-header-cell mat-header-cell *matHeaderCellDef> SERIAL No </mat-header-cell>\r\n                <mat-cell mat-cell *matCellDef=\"let element\">{{ element.serial_no }}</mat-cell>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"remarks\">\r\n                <mat-header-cell mat-header-cell *matHeaderCellDef>Remarks </mat-header-cell>\r\n                <mat-cell mat-cell *matCellDef=\"let element\">{{ element.remarks }}</mat-cell>\r\n              </ng-container>\r\n              <mat-header-row mat-header-row *matHeaderRowDef=\"mappedColumns\"></mat-header-row>\r\n              <mat-header-row mat-row *matRowDef=\"let row; columns: mappedColumns;\"></mat-header-row>\r\n\r\n            </mat-table>\r\n            <mat-paginator #mappedPaginator [pageSize]=\"5\" [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n          </div>\r\n        </div>\r\n        <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n          <div style=\"margin-bottom: 12px;\">\r\n            <span style=\"font-size:16px;\">Charger not Mapped</span> &nbsp;&nbsp;\r\n            <img (click)=\"unmappedTableExport()\" src=\"/assets/images/excel_icon.png\" width=\"24px\" height=\"auto\"\r\n              style=\"cursor:pointer\" />\r\n            <!-- <span class=\"material-icons\"   >\r\n                download_for_offline\r\n              </span> -->\r\n\r\n          </div>\r\n\r\n          <div>\r\n            <mat-table #unmappedTable [dataSource]=\"unmappedDataSource\" [cdkTable]=\"unmappedTable\"\r\n              class=\"mat-elevation-z2\">\r\n\r\n              <ng-container matColumnDef=\"serial_no\">\r\n                <mat-header-cell mat-header-cell *matHeaderCellDef> SERIAL No </mat-header-cell>\r\n                <mat-cell mat-cell *matCellDef=\"let element\">{{ element.serial_no }}</mat-cell>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"remarks\">\r\n                <mat-header-cell mat-header-cell *matHeaderCellDef>Remarks </mat-header-cell>\r\n                <mat-cell mat-cell *matCellDef=\"let element\">{{ element.remarks }}</mat-cell>\r\n              </ng-container>\r\n              <mat-header-row mat-header-row *matHeaderRowDef=\"unmappedColumns\"></mat-header-row>\r\n              <mat-header-row mat-row *matRowDef=\"let row; columns: unmappedColumns;\"></mat-header-row>\r\n\r\n            </mat-table>\r\n            <mat-paginator #unmappedPaginator [pageSize]=\"5\" [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:20px\">\r\n      <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n      <button mat-raised-button color=\"warn\" class=\"mr-8\"\r\n        routerLink=\"/assetManagement/chargerManagement/salesDispatch/crud/list\">Cancel</button>\r\n    </div>\r\n  </form>\r\n\r\n</div>","import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\n// import { ClientCrudComponent } from './client-crud/client-crud.component';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ProductDispatchRoutingModule } from './product-dispatch-routing.module';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { ProductDispatchCrudComponent } from './product-dispatch-crud/product-dispatch-crud.component';\r\n//import {MatTableExporterModule} from 'mat-table-exporter';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nimport { AddNicknameComponent } from './add-nickname/add-nickname.component';\r\nimport { AddListComponent } from './add-list/add-list.component';\r\nimport {\r\n    NgxMatDatetimePickerModule, \r\n    NgxMatNativeDateModule, \r\n    NgxMatTimepickerModule ,\r\n    NgxMatDateFormats,\r\n    NGX_MAT_DATE_FORMATS,\r\n    NgxMatDateAdapter,\r\n    \r\n    \r\n  } from '@angular-material-components/datetime-picker';\r\nconst COMPONENTS =[ProductDispatchCrudComponent, CreateComponent, ListComponent,AddListComponent];\r\nconst COMPONENTS_DYNAMIC =[ActionDialogComponent,ViewDialogComponent,AddNicknameComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule,ProductDispatchRoutingModule,NgxMatDatetimePickerModule, FuseSharedModule,\r\n        NgxMatNativeDateModule, \r\n        NgxMatTimepickerModule ,],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class ProductDispatchModule{}","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-product-dispatch-crud',\r\n  templateUrl: './product-dispatch-crud.component.html',\r\n  styleUrls: ['./product-dispatch-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n})\r\nexport class ProductDispatchCrudComponent implements OnInit {\r\n\r\n  tabLinks = [\r\n    // { label: 'Sales Dispatch', link: 'list' },\r\n    // { label: 'Add New', link: 'create' }\r\n  ];\r\n  menuArray: any;\r\n  localStorage: any;\r\n  objectData: any;\r\n  objectChildData: any;\r\n  tempLinks = [];\r\n  childData: any;\r\n  constructor(private router: Router,private cdr: ChangeDetectorRef,private _utilityService:UtilityService) {\r\n\r\n  }\r\n  ngAfterViewInit(){\r\n    this._utilityService.activeMenuItems$.subscribe(menuItemSelecte=> {\r\n      this.menuArray = menuItemSelecte;\r\n      if(this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined){\r\n        this.menuArray  = JSON.parse( localStorage.getItem('activeMenuItems'));\r\n      }\r\n      this.cdr.detectChanges();\r\n    })\r\n     \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    let nav_list = this.localStorage.nav_list_with_tab;\r\n    nav_list.filter((x) => {\r\n      if (x.id === \"chargerManagement\") {\r\n        this.objectData = x;\r\n        if(this.objectData.children != undefined){\r\n          this.objectData.children.filter((y) => {\r\n            if (y.id === \"crud\") {\r\n              this.objectChildData = y;\r\n              if(this.objectChildData.children!= undefined){\r\n                this.objectChildData.children.filter((z) => {\r\n                  let isDefaultRoutePermeted = false;\r\n                    if (z.id === \"salesDispatch\") {\r\n                      isDefaultRoutePermeted = true;\r\n                      this.tempLinks.push({ label: 'Sales Dispatch', link: 'list' });\r\n                    }\r\n                    if (z.id === \"addNew\") {\r\n                      this.tempLinks.push({ label: 'Add New', link: 'create' });\r\n                    }\r\n                  this.tabLinks = this.tempLinks;\r\n                  if (!isDefaultRoutePermeted) {\r\n                    this.router.navigate(['/assetManagement/chargerManagement/salesDispatch/crud/' + this.tempLinks[0].link]);\r\n                  }\r\n                });\r\n              }\r\n             \r\n            }\r\n  \r\n          });\r\n        }\r\n       \r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent { }\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ChargerService } from 'app/shared/services/charger/charger.service';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { ViewDialogComponent } from '../view-dialog/view-dialog.component';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport { ChargingStationService } from 'app/shared/services/charging-station/charging-station.service';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { Validators, FormBuilder, FormGroup, AbstractControl, ValidatorFn } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { AddNicknameComponent } from '../add-nickname/add-nickname.component';\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n\r\nexport class Client {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  address: string;\r\n  logoPath: string;\r\n  mobile: string;\r\n  email: string;\r\n  status: string;\r\n  created_date: string;\r\n  createdby: number;\r\n  modify_date: string;\r\n  modifyby: number;\r\n  statusString: string;\r\n  serial_no: string;\r\n  client_name: string;\r\n  model_name: string;\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n})\r\nexport class ListComponent implements OnInit {\r\n  filterEntity: Client;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['client_name', 'name', 'serial_no', 'model_name', 'status', 'action'];\r\n  head = [['Client Name', 'Name', 'Serial Number', 'Model Name', 'Status']]\r\n  dataSource: MatTableDataSource<Client>;\r\n  selection = new SelectionModel<Client>(true, []);\r\n  localStorage: any;\r\n  //clients : Client[];\r\n  allChargers: any;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  dialogRef: any;\r\n  clientSearch = false;\r\n  nameSearch = false;\r\n  serialSearch = false;\r\n  modelSearch = false;\r\n  statusSearch = false;\r\n  exportedData: any[];\r\n  form: FormGroup;\r\n  localData: any;\r\n  filteredOptionsCharClient: Observable<any[]>;\r\n  filteredOptionsCharCPO: Observable<any[]>;\r\n  filteredOptionsCharStat: Observable<any[]>;\r\n  clientCpoStaDetails: any;\r\n  clientList: any;\r\n  cpoList: any;\r\n  stationList: any;\r\n  station: any;\r\n  constructor(private chargerService: ChargerService, public dialog: MatDialog, private snackBar: MatSnackBar, private fb: FormBuilder,\r\n    private chargingStationService: ChargingStationService,) {\r\n\r\n    this.form = this.fb.group({\r\n      charClient: ['', [autocompleteObjectValidator()]],\r\n      charCPO: ['', [autocompleteObjectValidator()]],\r\n      charStat: ['', [autocompleteObjectValidator()]]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.clientCpoStaDetails = JSON.parse(localStorage.getItem('clientCpoStaDetails'));\r\n    //this.getAllClientChargers(this.localStorage.userId);\r\n    this.filterEntity = new Client();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.getClients();\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getAllClientChargers(id) {\r\n    this.chargerService.getAllClientChargers(id).subscribe(\r\n      (data: any) => {\r\n        if (data != null) {\r\n          this.allChargers = data;\r\n          for (var i = 0; i < this.allChargers.length; i++) {\r\n            if (this.allChargers[i].status == 'N') {\r\n              this.allChargers[i].statusString = 'Inactive';\r\n            } else {\r\n              this.allChargers[i].statusString = 'Active';\r\n            }\r\n          }\r\n          this.dataSource = new MatTableDataSource(this.allChargers);\r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n        } else {\r\n          this.snackBar.open(MessageConstant.NoRecordFoundMessage, 'Dismiss', { duration: 3000 })\r\n          return;\r\n        }\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id) {\r\n    this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n      disableClose: true\r\n    });\r\n    //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n    this.confirmDialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.chargerService.deleteChargerFromClient(id, this.localStorage.userId).subscribe(\r\n          (data: any) => {\r\n\r\n            this.getAllClientChargers(this.localStorage.userId);\r\n            this.snackBar.open(MessageConstant.deleteMessage, 'Dismiss', { duration: 2000 });\r\n          }, (err) => {\r\n\r\n          }\r\n        )\r\n      }\r\n      this.confirmDialogRef = null;\r\n    });\r\n\r\n  }\r\n\r\n  openDialog(action, data): void {\r\n\r\n    let params = {\r\n      action: action,\r\n      data: data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '800px',\r\n      data: params,\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n\r\n      // this.moderate(result);\r\n      this.getAllClientChargers(this.localStorage.userId);\r\n    });\r\n  }\r\n\r\n  changeVisibility(visibleOption, ev) {\r\n    // visibleOption = !visibleOption;\r\n    //nameSearch = false;\r\n    //descSearch = false;\r\n    ev.stopPropagation();\r\n    if (visibleOption == 'clientSearch') {\r\n      this.clientSearch = !this.clientSearch;\r\n      this.filterEntity.client_name = \"\";\r\n    }\r\n\r\n    if (visibleOption == 'nameSearch') {\r\n      this.nameSearch = !this.nameSearch;\r\n      this.filterEntity.name = \"\";\r\n    }\r\n    if (visibleOption == 'serialSearch') {\r\n      this.serialSearch = !this.serialSearch;\r\n      this.filterEntity.serial_no = \"\";\r\n    }\r\n    if (visibleOption == 'modelSearch') {\r\n      this.modelSearch = !this.modelSearch;\r\n      this.filterEntity.model_name = \"\";\r\n    }\r\n\r\n    if (visibleOption == 'statusSearch') {\r\n      this.statusSearch = !this.statusSearch;\r\n      this.filterEntity.statusString = \"\";\r\n    }\r\n  }\r\n\r\n  tableExport() {\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chargerModel = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = {\r\n        'Client Name': chargerModel.client_name, 'Name': chargerModel.name, 'Serial No': chargerModel.serial_no,\r\n        'Model Name': chargerModel.model_name, 'Status': chargerModel.statusString\r\n      };\r\n      this.exportedData.push(data);\r\n    }\r\n    const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n    const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, 'sales disptch');\r\n    XLSX.writeFile(workBook, 'Sales Dispatch.xlsx');\r\n  }\r\n\r\n  viewDialog(action, data): void {\r\n    let params = {\r\n      action: action,\r\n      data: data\r\n    }\r\n    const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n      width: '800px',\r\n      data: params,\r\n      panelClass: 'app-action-dialog',\r\n      autoFocus: false,\r\n      disableClose: true\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      // this.moderate(result);\r\n      this.getClients();\r\n    });\r\n  }\r\n\r\n  pdfExport() {\r\n    var doc = new jsPDF({ // set needed dimensions for any elemen \r\n    });\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chrger = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = [chrger.client_name, chrger.name, chrger.serial_no, chrger.model_name, chrger.statusString];\r\n\r\n      this.exportedData.push(data);\r\n    }\r\n    var img = new Image();\r\n    var imgRight = new Image();\r\n    var src = 'assets/images/logos/logo_sparkev_main.png';\r\n    var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n    imgRight.src = srcSparkEV;\r\n    var createdDate = new Date().toLocaleString(('en-GB'));\r\n    img.src = src;\r\n    doc.setFontSize(11);\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(18);\r\n    (doc as any).autoTable({\r\n      head: this.head,\r\n      body: this.exportedData,\r\n      theme: 'grid',\r\n      headStyles: { fontStyle: 'majalla', fillColor: [11, 148, 68] },\r\n      styles: {\r\n        cellPadding: 1,\r\n        fontSize: 8,\r\n      },\r\n      margin: { top: 22 },\r\n      didDrawCell: data => {\r\n      },\r\n      didDrawPage: data => {\r\n        doc.addImage(img , 15, 7, 15, 6);\r\n        doc.addImage(imgRight, 170, 7, 25, 6);\r\n\r\n        doc.text('Product Dispatch Report', doc.internal.pageSize.getWidth() / 2, 11, { align: 'center' });\r\n\r\n        doc.setTextColor(211, 211, 211);\r\n        doc.setFontSize(60);\r\n        doc.setGState(doc.GState({ opacity: 0.6 }));\r\n        doc.text('Confidential/Not for Public use', 25, 285, null, 60,);\r\n        doc.setGState(doc.GState({ opacity: 1 }));\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(9);\r\n        doc.text('Date:' + createdDate, 15, 18);\r\n\r\n        doc.text('Generated By:' + this.localStorage.f_Name, 195, 18, { align: 'right' });\r\n        doc = this.addWaterMark(doc);\r\n      }\r\n    })\r\n\r\n    // below line for Open PDF document in new tab\r\n    doc.output('dataurlnewwindow')\r\n\r\n    // below line for Download PDF document  \r\n    doc.save('Product Dispatch Report.pdf');\r\n\r\n  }\r\n  addWaterMark(doc) {\r\n    var newpage = doc.getNumberOfPages();\r\n    const i = doc.internal.getNumberOfPages();\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(10);\r\n    //Print Page 1 of 4 for example\r\n\r\n    doc.text('Page ' + String(i) + ' of ' + String(newpage), 210 - 20, 297 - 10, null, null, \"right\")\r\n    return doc;\r\n\r\n  }\r\n\r\n  getClients() {\r\n    this.clientList = JSON.parse(localStorage.getItem('ClientList'));\r\n    if (this.localStorage.role_code != 'END') {\r\n      if (this.clientList != null && this.clientList != undefined) {\r\n        const toSelect = this.clientList[0];\r\n        this.form.get('charClient').setValue(toSelect);\r\n        this.getCPOByClient(toSelect.client_id);\r\n      }\r\n      this.filteredOptionsCharClient = this.form.controls.charClient.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.client_name),\r\n          map(name => name ? this._filterCharClient(name) : this.clientList)\r\n        );\r\n    }\r\n  }\r\n  private _filterCharClient(name: string): any[] {\r\n    this.form.get('charCPO').setValue('');\r\n    this.form.get('charStat').setValue('');\r\n    const filterValue = name.toLowerCase();\r\n    return this.clientList.filter(option => option.client_name.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharClient(item: any): string {\r\n    return item && item.client_name ? item.client_name : '';\r\n  }\r\n  onClientChange(client_id) {\r\n    this.cpoList = [];\r\n    this.stationList = [];\r\n    this.form.get('charCPO').setValue(\"\");\r\n    this.form.get('charStat').setValue(\"\");\r\n    this.getCPOByClient(client_id);\r\n  }\r\n\r\n  getCPOByClient(client_id) {\r\n    this.cpoList = JSON.parse(localStorage.getItem('CpoList'));\r\n    if (this.localStorage.role_code != \"END\") {\r\n      if (this.cpoList != null && this.cpoList != undefined) {\r\n        const toSelect = this.cpoList.length == 1 ? this.cpoList[0] : this.cpoList[1];\r\n        this.form.get('charCPO').setValue(toSelect);\r\n        this.getStationByCPO(toSelect.cpo_id);\r\n      }\r\n      this.filteredOptionsCharCPO = this.form.controls.charCPO.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.cpo_name),\r\n          map(name => name ? this._filterCharCPO(name) : this.cpoList)\r\n        );\r\n    }\r\n  }\r\n  private _filterCharCPO(name: string): any[] {\r\n    this.form.get('charStat').setValue('');\r\n    const filterValue = name.toLowerCase();\r\n    return this.cpoList.filter(option => option.cpo_name.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharCPO(item: any): string {\r\n    return item && item.cpo_name ? item.cpo_name : '';\r\n  }\r\n  onCPOChange(id) {\r\n    this.stationList = [];\r\n    this.form.get('charStat').setValue(\"\");\r\n    this.getStationByCPO(id);\r\n  }\r\n\r\n  getStationByCPO(id) {\r\n    this.stationList = JSON.parse(localStorage.getItem('StationList'));\r\n    this.station = [];\r\n\r\n    if (this.localStorage.role_code != \"END\") {\r\n      for (var i = 0; i < this.stationList.length; i++) {\r\n        if (id == this.stationList[i].cpo_id) {\r\n          this.station.push(this.stationList[i])\r\n        }\r\n        if (id == -1) {\r\n          this.station.push(this.stationList[i])\r\n        }\r\n      }\r\n      if (this.station != null && this.station != undefined && this.station.length > 0) {\r\n        const toSelect = this.station[0];\r\n        this.form.get('charStat').setValue(toSelect);\r\n        this.getAllClientChargers(this.localStorage.userId);\r\n      }\r\n      this.filteredOptionsCharStat = this.form.controls.charStat.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.station_name),\r\n          map(station_name => station_name ? this._filterCharStat(station_name) : this.station)\r\n        );\r\n    }\r\n  }\r\n  private _filterCharStat(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.station.filter(option => option.station_name.toLowerCase().includes(filterValue));\r\n  }\r\n  displayCharStat(item: any): string {\r\n    return item && item.station_name ? item.station_name : '';\r\n  }\r\n  onStationChange(event) {\r\n    this.getAllClientChargers(this.localStorage.userId);\r\n    //this.getAllClientChargers(event);\r\n  }\r\n\r\n\r\n  isAllSelected() {\r\n    if(this.dataSource != null){\r\n      const numSelected = this.selection.selected.length;\r\n      const numRows = this.dataSource.data.length;\r\n      return numSelected === numRows;\r\n    }\r\n    \r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    if (this.isAllSelected()) {\r\n      this.selection.clear();\r\n      return;\r\n    }\r\n\r\n    this.selection.select(...this.dataSource.data);\r\n  }\r\n\r\n  /** The label for the checkbox on the passed row */\r\n  checkboxLabel(row?: Client): string {\r\n    if (!row) {\r\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\r\n    }\r\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.name + 1}`;\r\n  }\r\n  // addName(){\r\n  //   let params = {\r\n  //     data: this.selection.selected\r\n  //   }\r\n  //   const dialogRef = this.dialog.open(AddNicknameComponent, {\r\n  //     width: '800px',\r\n  //     data: params,\r\n  //     panelClass: 'app-action-dialog',\r\n  //     autoFocus: false,\r\n  //     disableClose: true\r\n  //   });\r\n  //   dialogRef.afterClosed().subscribe(result => {\r\n  //     // this.moderate(result);\r\n  //     this.getClients();\r\n  //   });\r\n  // }\r\n\r\n\r\n}\r\n\r\n","<div style=\"text-align: left ; margin-left: 10px; margin-bottom:10px;margin-top: 10px;\">\r\n     <button mat-mini-fab  color=\"primary\" (click)=\"tableExport()\"  matTooltip=\"Excel Download\">\r\n        <mat-icon>sim_card_download</mat-icon> \r\n      </button>&nbsp;&nbsp;\r\n      <button mat-mini-fab  color=\"primary\" (click)=\"pdfExport()\"  matTooltip=\"PDF Download\">\r\n        <mat-icon>picture_as_pdf</mat-icon> \r\n      </button>\r\n      <!-- <button mat-mini-fab style=\"float:right;margin-right: 40px;\"  color=\"primary\" (click)=\"addName()\"  matTooltip=\"Add Nickname\">\r\n        <mat-icon>add_circle</mat-icon> \r\n      </button> -->\r\n    <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n</div>\r\n<mat-card style=\"padding:16px  !important;display:none;\" *ngIf=\"localStorage.role_code != 'END' \">\r\n    <mat-card-content>\r\n        <form [formGroup]=\"form\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\">\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                    <mat-label>Select Client</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"charClient\" [matAutocomplete]=\"autoClient\" readonly>\r\n                    <mat-autocomplete #autoClient=\"matAutocomplete\" [displayWith]=\"displayCharClient\"\r\n                        (optionSelected)='onClientChange($event.option.value.client_id)'>\r\n                        <mat-option *ngFor=\"let option of filteredOptionsCharClient | async\" [value]=\"option\">\r\n                            {{option.client_name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select client\">expand_more\r\n                    </mat-icon>\r\n                    <mat-error *ngIf=\"form.get('charClient').invalid\">\r\n                        Please select client\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                    <mat-label>Select CPO's</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"charCPO\" [matAutocomplete]=\"auto1\" readonly>\r\n                    <mat-autocomplete #auto1=\"matAutocomplete\" [displayWith]=\"displayCharCPO\"\r\n                        (optionSelected)='onCPOChange($event.option.value.cpo_id)'>\r\n                        <mat-option *ngFor=\"let option of filteredOptionsCharCPO | async\" [value]=\"option\">\r\n                            {{option.cpo_name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select CPO\">expand_more</mat-icon>\r\n                    <mat-error *ngIf=\"form.get('charCPO').invalid\">\r\n                        Please select CPO\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                    <mat-label>Select Charging Station</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"charStat\" [matAutocomplete]=\"auto2\" readonly>\r\n                    <mat-autocomplete #auto2=\"matAutocomplete\" [displayWith]=\"displayCharStat\"\r\n                        (optionSelected)='onStationChange($event.option.value.station_id)'>\r\n                        <mat-option *ngFor=\"let option of filteredOptionsCharStat | async\" [value]=\"option\">\r\n                            {{option.station_name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charging station\">\r\n                        expand_more</mat-icon>\r\n                    <mat-error *ngIf=\"form.get('charStat').invalid\">\r\n                        Please select charging station\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n            \r\n        </form>\r\n    </mat-card-content>\r\n</mat-card>\r\n\r\n<div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\">\r\n\r\n        <div class=\"\">\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\" [exampleEntity]=\"filterEntity\"\r\n                [filterType]=\"filterType\" matSort class=\"mat-elevation-z8\" mat-sort>\r\n                <!-- Name Column -->\r\n                <ng-container matColumnDef=\"select\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                      <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                                    [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                                    [aria-label]=\"checkboxLabel()\">\r\n                      </mat-checkbox>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\">\r\n                      <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                                    (change)=\"$event ? selection.toggle(row) : null\"\r\n                                    [checked]=\"selection.isSelected(row)\"\r\n                                    [aria-label]=\"checkboxLabel(row)\">\r\n                      </mat-checkbox>\r\n                    </td>\r\n                  </ng-container>\r\n                <ng-container matColumnDef=\"client_name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!clientSearch\" class=\"custom_font_size\" style=\"display: flex;\">Client Name\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('clientSearch',$event)\">search\r\n                            </mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"clientSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\" Client Name \" [(ngModel)]=\"filterEntity.client_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('clientSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.client_name}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!nameSearch\" class=\"custom_font_size\" style=\"display: flex;\">Name &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"nameSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\" Name\" [(ngModel)]=\"filterEntity.name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"serial_no\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!serialSearch\" class=\"custom_font_size\" style=\"display: flex;\">Serial No\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('serialSearch',$event)\">search\r\n                            </mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"serialSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Serial no\" [(ngModel)]=\"filterEntity.serial_no\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('serialSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.serial_no}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"model_name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!modelSearch\" class=\"custom_font_size\" style=\"display: flex;\">Model Name\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('modelSearch',$event)\">search\r\n                            </mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"modelSearch\" appearance=\"outline\" style=\"width: 70%;\" class=\"list_input\">\r\n                            <input matInput placeholder=\" Model Name \" [(ngModel)]=\"filterEntity.model_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('modelSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.model_name}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!statusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Status &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <span class=\"custom_font_size\">Action</span>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        <!-- <button mat-raised-button color=\"primary\"\r\n                                    (click)=\"openDialog('EDIT',element)\">Edit</button>\r\n                            <button mat-raised-button color=\"warn\" (click)=\"delete(element.id)\"\r\n                                    style=\"margin-left: 1%;\">Remove</button>  -->\r\n                        <mat-icon color=\"primary\" matTooltip=\"View\" (click)=\"viewDialog('VIEW',element)\"\r\n                            style=\"cursor:pointer\">visibility</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" (click)=\"openDialog('EDIT',element)\"\r\n                            style=\"cursor:pointer\">edit</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"delete(element.id)\" style=\"cursor:pointer\">\r\n                            delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n                <!-- <tr class=\"mat-row\" *matNoDataRow>\r\n                        <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"\r\n                        </td>\r\n                    </tr> -->\r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->","import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProductDispatchCrudComponent } from './product-dispatch-crud/product-dispatch-crud.component';\r\nimport { AddListComponent } from './add-list/add-list.component';\r\nimport { TABS_DEMO_ROUTES } from './product-dispatch-crud/routes';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : 'crud',component : ProductDispatchCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    },\r\n    \r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class ProductDispatchRoutingModule{}"]}