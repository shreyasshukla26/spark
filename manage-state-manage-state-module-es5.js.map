{"version":3,"sources":["webpack:///src/app/main/manage-geographics/manage-state/manage-state-crud/routes.ts","webpack:///src/app/main/manage-geographics/manage-state/manage-state-crud/manage-state-crud.component.ts","webpack:///src/app/main/manage-geographics/manage-state/manage-state-crud/manage-state-crud.component.html","webpack:///src/app/main/manage-geographics/manage-state/create/create.component.ts","webpack:///src/app/main/manage-geographics/manage-state/create/create.component.html","webpack:///src/app/main/manage-geographics/manage-state/manage-state.module.ts","webpack:///src/app/main/manage-geographics/manage-state/view-dialog/view-dialog.component.ts","webpack:///src/app/main/manage-geographics/manage-state/view-dialog/view-dialog.component.html","webpack:///src/app/main/manage-geographics/manage-state/manage-state-routing.module.ts","webpack:///src/app/main/manage-geographics/manage-state/list/list.component.ts","webpack:///src/app/main/manage-geographics/manage-state/list/list.component.html","webpack:///src/app/main/manage-geographics/manage-state/action-dialog/action-dialog.component.ts","webpack:///src/app/main/manage-geographics/manage-state/action-dialog/action-dialog.component.html"],"names":["TABS_DEMO_ROUTES","path","component","canActivate","redirectTo","pathMatch","ManageStateCrudComponent","router","cdr","_utilityService","tabLinks","tempLinks","localStorage","JSON","parse","getItem","nav_list","nav_list_with_tab","filter","x","id","objectData","children","undefined","y","objectChildData","isDefaultRoutePermeted","z","push","label","link","navigate","activeMenuItems$","subscribe","menuItemSelecte","menuArray","title","detectChanges","selector","templateUrl","styleUrls","encapsulation","None","animations","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","autocompleteObjectValidator","control","value","CreateComponent","fb","snackBar","countryService","stateService","status","initialize","getCountry","form","group","name","required","pattern","description","country","invalid","formValues","params","country_id","created_by","userId","create","stateData","open","duration","err_code","errorMsg","message","index","lastIndexOf","splitted","substring","nameDuplicateState","err","get","hasError","event","checked","ref","getAllCountry","data","countries","filteredOptionCountry","controls","valueChanges","pipe","_filterCountry","item","filterValue","toLowerCase","option","includes","onSubmit","$event","preventDefault","updateStatus","providers","COMPONENTS","COMPONENTS_DYNAMIC","ManageStateModule","imports","declarations","entryComponents","ViewDialogComponent","datePipe","dialogRef","isEditMode","action","assignValues","close","modify_by","update","errorMessage","setValue","toSelect","find","c","closeActionPanel","routes","ManageStateRoutingModule","forChild","exports","ManageState","ListComponent","dialog","displayedColumns","head","nameSearch","descriptionSearch","iso_codeSearch","countrySearch","statusStringSearch","getAllState","filterEntity","filterType","ANYWHERE","target","dataSource","trim","paginator","firstPage","getAllStates","manageStates","i","length","statusString","sort","confirmDialogRef","disableClose","afterClosed","result","width","autoFocus","panelClass","visibleOption","exportedData","filteredData","stateModel","country_name","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","doc","chrger","img","Image","imgRight","src","srcSparkEV","createdDate","Date","toLocaleString","setFontSize","setTextColor","autoTable","body","theme","headStyles","fontStyle","fillColor","styles","cellPadding","fontSize","margin","top","didDrawCell","didDrawPage","addImage","text","internal","pageSize","getWidth","align","setGState","GState","opacity","f_Name","addWaterMark","output","save","newpage","getNumberOfPages","String","tableExport","pdfExport","ActionDialogComponent","onYesClick"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAcO,UAAMA,gBAAgB,GAAW,CACtC;AAAEC,YAAI,EAAG,QAAT;AAAmBC,iBAAS,EAAG,wEAA/B;AAA+CC,mBAAW,EAAC,CAAC,4EAAD;AAA3D,OADsC,EAEtC;AAAEF,YAAI,EAAG,MAAT;AAAiBC,iBAAS,EAAG,kEAA7B;AAA2CC,mBAAW,EAAC,CAAC,4EAAD;AAAvD,OAFsC,EAGtC;AAAEF,YAAI,EAAE,EAAR;AAAYG,kBAAU,EAAE,MAAxB;AAAgCC,iBAAS,EAAE;AAA3C,OAHsC,CAAjC;;;;;;;;;;;;;;;;ACdP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACwBI;;AAKE;;AACF;;;;;;;;AAJG,kGAA2B,QAA3B,EAA2B,YAA3B;;AAGD;;AAAA;;;;;;;;;;;;;;;;ADxBN;;;;;UAUaC,wB;AAYX,0CAAoBC,MAApB,EAA4CC,GAA5C,EAA4EC,eAA5E,EAA6G;AAAA;;AAAzF,eAAAF,MAAA,GAAAA,MAAA;AAAwB,eAAAC,GAAA,GAAAA,GAAA;AAAgC,eAAAC,eAAA,GAAAA,eAAA;AAV5E,eAAAC,QAAA,GAAW,CACT;AACA;AAFS,WAAX;AAQA,eAAAC,SAAA,GAAY,EAAZ;AAIC;;;;qCAEU;AAAA;;AACT,iBAAKC,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAX,CAApB;AACA,gBAAIC,QAAQ,GAAG,KAAKJ,YAAL,CAAkBK,iBAAjC;AACAD,oBAAQ,CAACE,MAAT,CAAgB,UAACC,CAAD,EAAO;AACrB,kBAAIA,CAAC,CAACC,EAAF,KAAS,mBAAb,EAAkC;AAChC,qBAAI,CAACC,UAAL,GAAkBF,CAAlB;;AACA,oBAAI,KAAI,CAACE,UAAL,CAAgBC,QAAhB,IAA4B,IAA5B,IAAoC,KAAI,CAACD,UAAL,CAAgBC,QAAhB,IAA4BC,SAApE,EAA+E;AAC7E,uBAAI,CAACF,UAAL,CAAgBC,QAAhB,CAAyBJ,MAAzB,CAAgC,UAACM,CAAD,EAAO;AACrC,wBAAIA,CAAC,CAACJ,EAAF,KAAS,aAAb,EAA4B;AAC1B,2BAAI,CAACK,eAAL,GAAuBD,CAAvB;AACA,0BAAIE,sBAAsB,GAAG,KAA7B;;AACA,0BAAI,KAAI,CAACD,eAAL,CAAqBH,QAArB,IAAiC,IAAjC,IAAyC,KAAI,CAACG,eAAL,CAAqBH,QAArB,IAAiCC,SAA9E,EAAyF;AACvF,6BAAI,CAACE,eAAL,CAAqBH,QAArB,CAA8BJ,MAA9B,CAAqC,UAACS,CAAD,EAAO;AAC1C,8BAAIA,CAAC,CAACP,EAAF,KAAS,aAAb,EAA4B;AAC1BM,kDAAsB,GAAG,IAAzB;;AACA,iCAAI,CAACf,SAAL,CAAeiB,IAAf,CAAoB;AAAEC,mCAAK,EAAE,cAAT;AAAyBC,kCAAI,EAAE;AAA/B,6BAApB;AACD;;AACD,8BAAIH,CAAC,CAACP,EAAF,KAAS,QAAb,EAAuB;AACrB,iCAAI,CAACT,SAAL,CAAeiB,IAAf,CAAoB;AAAEC,mCAAK,EAAE,SAAT;AAAoBC,kCAAI,EAAE;AAA1B,6BAApB;AACD;AACF,yBARD;AAUD;;AAED,2BAAI,CAACpB,QAAL,GAAgB,KAAI,CAACC,SAArB;;AACA,0BAAI,CAACe,sBAAL,EAA6B;AAC3B,6BAAI,CAACnB,MAAL,CAAYwB,QAAZ,CAAqB,CAAC,oCAAoC,KAAI,CAACpB,SAAL,CAAe,CAAf,EAAkBmB,IAAvD,CAArB;AACD;AAEF;AAEF,mBAxBD;AAyBD;AAEF;AACF,aAhCD;AAiCD;;;4CAEiB;AAAA;;AAChB,iBAAKrB,eAAL,CAAqBuB,gBAArB,CAAsCC,SAAtC,CAAgD,UAAAC,eAAe,EAAI;AACjE,oBAAI,CAACC,SAAL,GAAiBD,eAAjB;;AACA,kBAAI,MAAI,CAACC,SAAL,IAAkB,IAAlB,IAA0B,MAAI,CAACA,SAAL,IAAkBZ,SAA5C,IAAyD,MAAI,CAACY,SAAL,CAAeC,KAAf,IAAwB,IAAjF,IAAyF,MAAI,CAACD,SAAL,CAAeC,KAAf,IAAwBb,SAArH,EAAgI;AAC9H,sBAAI,CAACY,SAAL,GAAiBtB,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACG,OAAb,CAAqB,iBAArB,CAAX,CAAjB;AACD;;AACD,oBAAI,CAACP,GAAL,CAAS6B,aAAT;AACD,aAND;AAQD;;;;;;;yBA/DU/B,wB,EAAwB,uH,EAAA,gI,EAAA,2J;AAAA,O;;;cAAxBA,wB;AAAwB,8C;AAAA,iB;AAAA,e;AAAA,+pB;AAAA;AAAA;ACfrC;;AACE;;AAGE;;AAGI;;AAEI;;AAEI;;AACiD;;AACjD;;AAMJ;;AACF;;AACJ;;AACJ;;AACF;;AACI;;AAOF;;AACA;;AACF;;;;AArBsB;;AAAA;;AAA2C;;AAAA;;AAatC;;AAAA;;;;;;;qBDZb;;;;;;wEAEDA,wB,EAAwB;gBAPpC,uDAOoC;iBAP1B;AACTgC,oBAAQ,EAAE,uBADD;AAETC,uBAAW,EAAE,oCAFJ;AAGTC,qBAAS,EAAE,CAAC,oCAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAE;AALH,W;AAO0B,U;;;;;;;;;;;UAyExBC,wB;;;;;yBAAAA,wB;AAAwB,O;;;cAAxBA,wB;AAAwB,6C;AAAA,gB;AAAA,e;AAAA;AAAA;AAFxB;;;;;;;;wEAEAA,wB,EAAwB;gBAJpC,uDAIoC;iBAJ1B;AACTN,oBAAQ,EAAE,sBADD;AAETO,oBAAQ,EAAE;AAFD,W;AAI0B,U;;;UAMxBC,wB;;;;;yBAAAA,wB;AAAwB,O;;;cAAxBA,wB;AAAwB,6C;AAAA,gB;AAAA,e;AAAA;AAAA;AAFxB;;;;;;;;wEAEAA,wB,EAAwB;gBAJpC,uDAIoC;iBAJ1B;AACTR,oBAAQ,EAAE,sBADD;AAETO,oBAAQ,EAAE;AAFD,W;AAI0B,U;;;UAMxBE,wB;;;;;yBAAAA,wB;AAAwB,O;;;cAAxBA,wB;AAAwB,6C;AAAA,gB;AAAA,e;AAAA;AAAA;AAFxB;;;;;;;;wEAEAA,wB,EAAwB;gBAJpC,uDAIoC;iBAJ1B;AACTT,oBAAQ,EAAE,sBADD;AAETO,oBAAQ,EAAE;AAFD,W;AAI0B,U;;;;;;;;;;;;;;;;;;AEpGrC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACOI;;AAA0D;;AAAgB;;;;;;AAC1E;;AAAwD;;AAAiC;;;;;;AAMzF;;AAAgE;;AAAoB;;;;;;AACpF;;AAA+D;;AAC/D;;;;;;AASC;;AACC;;AACD;;;;;;AAFiE;;AAChE;;AAAA;;;;;;AAIF;;AAA+C;;AAC/C;;;;ADjBJ,eAASG,2BAAT,GAAoC;AAClC,eAAO,UAACC,OAAD,EAA6D;AAClE,cAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,mBAAO;AAAE,2CAA6B;AAAEA,qBAAK,EAAED,OAAO,CAACC;AAAjB;AAA/B,aAAP;AACD;;AACD,iBAAO,IAAP;AAAa;AACd,SALD;AAMD;;UASYC,e;AASX,iCAAoBC,EAApB,EACUC,QADV,EAEU9C,MAFV,EAEiC+C,cAFjC,EAEuEC,YAFvE,EAEkG;AAAA;;AAF9E,eAAAH,EAAA,GAAAA,EAAA;AACV,eAAAC,QAAA,GAAAA,QAAA;AACA,eAAA9C,MAAA,GAAAA,MAAA;AAAuB,eAAA+C,cAAA,GAAAA,cAAA;AAAsC,eAAAC,YAAA,GAAAA,YAAA;AAPvE,eAAAC,MAAA,GAAS,KAAT;AAUC;;;;qCAEU;AACT,iBAAKC,UAAL;AACD,iBAAKC,UAAL;AAEA;;;uCAES;AAER,iBAAK9C,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAYF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAZ,CAApB;AAEA,iBAAK4C,IAAL,GAAY,KAAKP,EAAL,CAAQQ,KAAR,CAAc;AACxBC,kBAAI,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWC,QAAZ,EAAqB,0DAAWC,OAAX,CAAmB,iBAAnB,CAArB,CAAJ,CADmB;AAExBC,yBAAW,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWF,QAAZ,EAAqB,0DAAWC,OAAX,CAAmB,iBAAnB,CAArB,CAAJ,CAFY;AAGxBE,qBAAO,EAAE,CAAC,EAAD,EAAI,CAACjB,2BAA2B,EAA5B,EAA+B,0DAAWc,QAA1C,CAAJ,CAHe;AAIxBN,oBAAM,EAAG,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B;AAJb,aAAd,CAAZ;AASD;;;qCAEO;AAAA;;AACN,gBAAI,KAAKG,IAAL,CAAUO,OAAd,EAAsB;AACpB;AACD,aAFD,MAEK;AACH,kBAAIC,UAAU,GAAG,KAAKR,IAAL,CAAUT,KAA3B,CADG,CAEH;;AAGA,kBAAIkB,MAAM,GAAG;AACXP,oBAAI,EAAEM,UAAU,CAACN,IADN;AAEXG,2BAAW,EAAEG,UAAU,CAACH,WAFb;AAGXK,0BAAU,EAACF,UAAU,CAACF,OAAX,CAAmB7C,EAHnB;AAIXoC,sBAAM,EAAI,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B,GAJ3B;AAMXc,0BAAU,EAAG,KAAK1D,YAAL,CAAkB2D;AANpB,eAAb;AAUA,mBAAKhB,YAAL,CAAkBiB,MAAlB,CAAyBJ,MAAzB,EAAiCnC,SAAjC,CACE,UAACwC,SAAD,EAAkB;AAChB,oBAAGA,SAAS,CAACjB,MAAV,IAAoB,IAAvB,EAA4B;AAC1B,wBAAI,CAACH,QAAL,CAAcqB,IAAd,CAAmB,gBAAnB,EAAqC,SAArC,EAAgD;AAAEC,4BAAQ,EAAE;AAAZ,mBAAhD;;AACA,wBAAI,CAACpE,MAAL,CAAYwB,QAAZ,CAAqB,CAAC,qCAAD,CAArB;AACD,iBAHD,MAGK;AACH,sBAAG0C,SAAS,CAACG,QAAV,IAAsB,sBAAzB,EAAgD;AAC9C,0BAAI,CAAEC,QAAN,GAAiBJ,SAAS,CAACK,OAA3B;;AACA,wBAAIC,KAAK,GAAG,MAAI,CAAEF,QAAN,CAAeG,WAAf,CAA2B,GAA3B,CAAZ;;AAEA,0BAAI,CAACC,QAAL,GAAgB,MAAI,CAAEJ,QAAN,CAAeK,SAAf,CAAyBH,KAAK,GAAC,CAA/B,CAAhB;;AACA,wBAAG,MAAI,CAACE,QAAL,IAAiB,cAApB,EAAoC;AAClC,4BAAI,CAAC5B,QAAL,CAAcqB,IAAd,CAAmB,kFAAgBS,kBAAnC,EAAuD,SAAvD,EAAkE;AAAER,gCAAQ,EAAE;AAAZ,uBAAlE;AACD;AACF,mBARD,MAQK;AACH,0BAAI,CAACtB,QAAL,CAAcqB,IAAd,CAAmBD,SAAS,CAACK,OAA7B,EAAsC,SAAtC,EAAiD;AAAEH,8BAAQ,EAAE;AAAZ,qBAAjD;AACD,mBAXE,CAYH;;AACD;AAGF,eArBH,EAsBE,UAACS,GAAD,EAAO;AACL,sBAAI,CAAC/B,QAAL,CAAcqB,IAAd,CAAmB,kBAAnB,EAAuC,SAAvC,EAAkD;AAAEC,0BAAQ,EAAE;AAAZ,iBAAlD;AACD,eAxBH;AA0BD;AAGF;;;0CAEehB,I,EAAiB;AAC/B,mBAAOA,IAAI,CAAC0B,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,UAA3B,IACH,wBADG,GAEH3B,IAAI,CAAC0B,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,OAA3B,IACA,mBADA,GAEA,EAJJ;AAKD;;;uCACYC,K,EAAK;AAChB,iBAAK/B,MAAL,GAAc+B,KAAK,CAACC,OAApB;AACA,iBAAKC,GAAL,CAASD,OAAT,GAAmB,KAAKhC,MAAxB;AACD;;;uCACS;AAAA;;AACR,iBAAKF,cAAL,CAAoBoC,aAApB,GAAoCzD,SAApC,CACE,UAAC0D,IAAD,EAAY;AACV,oBAAI,CAACC,SAAL,GAAiBD,IAAjB;AACC,oBAAI,CAACE,qBAAL,GAA6B,MAAI,CAAClC,IAAL,CAAUmC,QAAV,CAAmB7B,OAAnB,CAA2B8B,YAA3B,CAC1BC,IAD0B,CAEzB,iEAAU,EAAV,CAFyB,EAGzB,2DAAI,UAAA9C,KAAK;AAAA,uBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACW,IAA9C;AAAA,eAAT,CAHyB,EAIzB,2DAAI,UAAAA,IAAI;AAAA,uBAAIA,IAAI,GAAG,MAAI,CAACoC,cAAL,CAAoBpC,IAApB,CAAH,GAA+B,MAAI,CAAC+B,SAA5C;AAAA,eAAR,CAJyB,CAA7B;AAMC,aATN,EASO,UAACR,GAAD,EAAO,CAER,CAXN;AAaD;;;yCACcc,I,EAAS;AACtB,mBAAOA,IAAI,IAAIA,IAAI,CAACrC,IAAb,GAAoBqC,IAAI,CAACrC,IAAzB,GAAgC,EAAvC;AACD;;;yCACsBA,I,EAAY;AACjC,gBAAMsC,WAAW,GAAGtC,IAAI,CAACuC,WAAL,EAApB;AACA,mBAAO,KAAKR,SAAL,CAAe1E,MAAf,CAAsB,UAAAmF,MAAM;AAAA,qBAAIA,MAAM,CAACxC,IAAP,CAAYuC,WAAZ,GAA0BE,QAA1B,CAAmCH,WAAnC,CAAJ;AAAA,aAA5B,CAAP;AACD;;;;;;;yBAtHUhD,e,EAAe,2H,EAAA,wI,EAAA,uH,EAAA,+J,EAAA,2J;AAAA,O;;;cAAfA,e;AAAe,mC;AAAA;AAAA;;;;;;;;;;oFAFhB,CAAC,wDAAD,C;AAAU,iB;AAAA,gB;AAAA,q9C;AAAA;AAAA;AC5BtB;;AACC;;AAC+B;AAAA,qBAAU,IAAAoD,QAAA,EAAV;AAAoB,aAApB,EAAqB,eAArB,EAAqB;AAAA,qBAAkBC,MAAM,CAACC,cAAP,EAAlB;AAAyC,aAA9D;;AAC9B;;AACC;;AACC;;AAAY;;AAAI;;AAChB;;AACA;;AACA;;AACD;;AACA;;AACC;;AAAW;;AAAW;;AACtB;;AAEA;;AACA;;AAED;;AACD;;AACA;;AACC;;AACC;;AAAW;;AAAO;;AAClB;;AAEA;;AACC;;;;AAGD;;AACC;;AAA8E;;AAAW;;AAC1F;;AAED;;AACA;;AACC;AAAA,qBAAU,IAAAC,YAAA,QAAV;AAA8B,aAA9B;;AACA;;AACD;;AACD;;AACA;;AACC;;AAAuD;;AAAI;;AAC3D;;AACkD;;AAAM;;AACzD;;AACD;;AACD;;;;;;AA3CO;;AAAA;;AAMS;;AAAA;;AACA;;AAAA;;AAMA;;AAAA;;AACA;;AAAA;;AAO6D;;AAAA;;AAExB;;AAAA;;AACjB;;AAAA;;AAKpB;;AAAA;;AAGqE;;AAAA;;AAEjF;;AAAA;;;;;;;;qBDRa;;;;;;wEAGJvD,e,EAAe;gBAR3B,uDAQ2B;iBARjB;AACTb,oBAAQ,EAAE,YADD;AAETC,uBAAW,EAAE,yBAFJ;AAGTC,qBAAS,EAAE,CAAC,yBAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAK,+DALN;AAMTgE,qBAAS,EAAC,CAAC,wDAAD;AAND,W;AAQiB,U;;;;;;;;;;;;;AAGElB,aAAG,EAAE,CAAF;kBAA9B,uDAA8B;mBAApB,e;AAAoB,WAAE;;;;;;;;;;;;;;;;;;;AEjCnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AASA,UAAMmB,UAAU,GAAE,CAAC,uGAAD,EAA2B,wEAA3B,EAA4C,kEAA5C,CAAlB;AACA,UAAMC,kBAAkB,GAAE,CAAC,4FAAD,EAAuB,sFAAvB,CAA1B;;UAQaC,iB;;;;;cAAAA;;;;2BAAAA,iB;AAAiB,S;AAAA,kBALlB,CAAC,qEAAD,EAAe,qFAAf,EAAwC,oEAAxC,CAKkB;;;;4HAAjBA,iB,EAAiB;AAAA,yBATX,uGASW,EATe,wEASf,EATgC,kEAShC,EARH,4FAQG,EARmB,sFAQnB;AARsC,oBAGvD,qEAHuD,EAGzC,qFAHyC,EAGhB,oEAHgB;AAQtC,S;AALsC,O;;;;;wEAKvDA,iB,EAAiB;gBAN7B,sDAM6B;iBANpB;AACNC,mBAAO,EAAC,CAAC,qEAAD,EAAe,qFAAf,EAAwC,oEAAxC,CADF;AAENC,wBAAY,EAAG,CAACJ,UAAD,EAAYC,kBAAZ,CAFT;AAGNI,2BAAe,EAAG,CAACJ,kBAAD;AAHZ,W;AAMoB,U;;;;;;;;;;;;;;;;;;AClB9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACeU;;AAA0D;;AAAgB;;;;;;AAC1E;;AAAwD;;AAAiC;;;;;;AAMzF;;AAAgE;;AAAoB;;;;;;AACpF;;AAA+D;;AAAiC;;;;;;AAS9F;;AACE;;AACF;;;;;;AAFiE;;AAC/D;;AAAA;;;;;;AAIJ;;AAA+C;;AAC/C;;;;ADxBV,eAAS7D,2BAAT,GAAoC;AAClC,eAAO,UAACC,OAAD,EAA6D;AAClE,cAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,mBAAO;AAAE,2CAA6B;AAAEA,qBAAK,EAAED,OAAO,CAACC;AAAjB;AAA/B,aAAP;AACD;;AACD,iBAAO,IAAP;AAAa;AACd,SALD;AAMD;;UASYgE,mB;AAWX,qCAAoB9D,EAApB,EAA4CG,YAA5C,EAA+ED,cAA/E,EAAsHD,QAAtH,EAAoJ8D,QAApJ,EACmBC,SADnB,EACiGzB,IADjG,EACsH;AAAA;;AADlG,eAAAvC,EAAA,GAAAA,EAAA;AAAwB,eAAAG,YAAA,GAAAA,YAAA;AAAmC,eAAAD,cAAA,GAAAA,cAAA;AAAuC,eAAAD,QAAA,GAAAA,QAAA;AAA8B,eAAA8D,QAAA,GAAAA,QAAA;AACjI,eAAAC,SAAA,GAAAA,SAAA;AAA8E,eAAAzB,IAAA,GAAAA,IAAA;AATjG,eAAA0B,UAAA,GAAa,KAAb;AAGA,eAAA7D,MAAA,GAAS,KAAT;AAMwH;;;;qCAE7G;AACT,iBAAKC,UAAL;AACA,iBAAKC,UAAL;AACD;;;uCAES;AAER,iBAAK9C,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAYF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAZ,CAApB;AAEA,iBAAKqD,MAAL,GAAc,KAAKuB,IAAnB;AAEA,iBAAK0B,UAAL,GAAkB,KAAKjD,MAAL,CAAYkD,MAAZ,IAAsB,QAAtB,GAAiC,KAAjC,GAAyC,IAA3D;AAEA,iBAAK3D,IAAL,GAAY,KAAKP,EAAL,CAAQQ,KAAR,CAAc;AACxBC,kBAAI,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWC,QAAZ,EAAqB,0DAAWC,OAAX,CAAmB,iBAAnB,CAArB,CAAJ,CADmB;AAExBC,yBAAW,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWF,QAAZ,EAAqB,0DAAWC,OAAX,CAAmB,iBAAnB,CAArB,CAAJ,CAFY;AAGxBE,qBAAO,EAAE,CAAC,EAAD,EAAI,CAACjB,2BAA2B,EAA5B,EAA+B,0DAAWc,QAA1C,CAAJ,CAHe;AAIxBN,oBAAM,EAAG,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B;AAJb,aAAd,CAAZ;;AAOA,gBAAI,KAAK6D,UAAT,EAAoB;AAClB,mBAAKE,YAAL,CAAkB,KAAKnD,MAAvB;AACD;AACF;;;kCAEO;AAEN,iBAAKgD,SAAL,CAAeI,KAAf;AACD;;;6CACe;AACd,iBAAKJ,SAAL,CAAeI,KAAf;AACD;;;uCAGS;AAAA;;AACR,gBAAIrD,UAAU,GAAG,KAAKR,IAAL,CAAUT,KAA3B;AAEA,gBAAMkB,MAAM,GAAQ;AAElBP,kBAAI,EAAEM,UAAU,CAACN,IAFC;AAGhBG,yBAAW,EAAEG,UAAU,CAACH,WAHR;AAIhBK,wBAAU,EAACF,UAAU,CAACF,OAAX,CAAmB7C,EAJd;AAKhBoC,oBAAM,EAAI,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B,GALtB;AAMhBiE,uBAAS,EAAG,KAAK7G,YAAL,CAAkB2D;AANd,aAApB,CAHQ,CAYZ;;AAEI,gBAAI,KAAK8C,UAAT,EAAoB;AACpBjD,oBAAM,CAAChD,EAAP,GAAY,KAAKgD,MAAL,CAAYuB,IAAZ,CAAiBvE,EAA7B,EACAgD,MAAM,CAACqD,SAAP,GAAmB,KAAK7G,YAAL,CAAkB2D,MADrC;AAED,aAHC,MAGI;AACJH,oBAAM,CAACE,UAAP,GAAoB,KAAK1D,YAAL,CAAkB2D,MAAtC;AACD;;AAEC,gBAAI,KAAK8C,UAAT,EAAoB;AACpB,mBAAK9D,YAAL,CAAkBmE,MAAlB,CAAyBtD,MAAzB,EAAiCnC,SAAjC,CACE,UAACwC,SAAD,EAAqB;AACnB,oBAAGA,SAAS,CAACjB,MAAV,IAAoB,IAAvB,EAA4B;AAC1B,wBAAI,CAACH,QAAL,CAAcqB,IAAd,CAAmB,8BAAnB,EAAmD,SAAnD,EAA8D;AAAEC,4BAAQ,EAAE;AAAZ,mBAA9D;;AACA,wBAAI,CAACyC,SAAL,CAAeI,KAAf;AACD,iBAHD,MAGK;AACH,wBAAI,CAACnE,QAAL,CAAcqB,IAAd,CAAmB,kFAAgBiD,YAAnC,EAAiD,SAAjD,EAA4D;AAAEhD,4BAAQ,EAAE;AAAZ,mBAA5D;;AACA,wBAAI,CAACyC,SAAL,CAAeI,KAAf;AACD;AAEF,eAVH,EAWE,UAACpC,GAAD,EAAS;AACP,sBAAI,CAAC/B,QAAL,CAAcqB,IAAd,CAAmB,kFAAgBiD,YAAnC,EAAiD,SAAjD,EAA4D;AAAEhD,0BAAQ,EAAE;AAAZ,iBAA5D;AACD,eAbH;AAeD,aAhBC,MAgBG;AACH,mBAAKpB,YAAL,CAAkBiB,MAAlB,CAAyBJ,MAAzB,EAAiCnC,SAAjC,CACE,UAAC0D,IAAD,EAAgB;AACd,sBAAI,CAACtC,QAAL,CAAcqB,IAAd,CAAmB,eAAnB,EAAoC,SAApC,EAA+C;AAAEC,0BAAQ,EAAE;AAAZ,iBAA/C;;AACA,sBAAI,CAACyC,SAAL,CAAeI,KAAf;AACD,eAJH,EAKE,UAACpC,GAAD,EAAS;AACP,sBAAI,CAAC/B,QAAL,CAAcqB,IAAd,CAAmB,kBAAnB,EAAuC,SAAvC,EAAkD;AAAEC,0BAAQ,EAAE;AAAZ,iBAAlD;AACD,eAPH;AAUD;;AAEC,iBAAKyC,SAAL,CAAeI,KAAf,CAAqBpD,MAArB;AACD;;;0CAEeT,I,EAAiB;AAC/B,mBAAOA,IAAI,CAAC0B,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,UAA3B,IACH,wBADG,GAEH3B,IAAI,CAAC0B,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,OAA3B,IACA,mBADA,GAEA,EAJJ;AAKD;;;uCAEYlB,M,EAAM;AAEjB,iBAAKT,IAAL,CAAU0B,GAAV,CAAc,MAAd,EAAsBuC,QAAtB,CAA+BxD,MAAM,CAACuB,IAAP,CAAY9B,IAA3C;AACA,iBAAKF,IAAL,CAAU0B,GAAV,CAAc,aAAd,EAA6BuC,QAA7B,CAAsCxD,MAAM,CAACuB,IAAP,CAAY3B,WAAlD;AACA,iBAAKL,IAAL,CAAU0B,GAAV,CAAc,SAAd,EAAyBuC,QAAzB,CAAkCxD,MAAM,CAACuB,IAAP,CAAYtB,UAA9C;AAEA,iBAAKb,MAAL,GAAcY,MAAM,CAACuB,IAAP,CAAYnC,MAAZ,IAAsB,GAAtB,GAA4B,IAA5B,GAAmC,KAAjD;AACD;;;uCAEY+B,K,EAAK;AAChB,iBAAK/B,MAAL,GAAc+B,KAAK,CAACC,OAApB;AACA,iBAAKC,GAAL,CAASD,OAAT,GAAmB,KAAKhC,MAAxB;AACD;;;uCACS;AAAA;;AACR,iBAAKF,cAAL,CAAoBoC,aAApB,GAAoCzD,SAApC,CACE,UAAC0D,IAAD,EAAY;AACV,oBAAI,CAACC,SAAL,GAAiBD,IAAjB;;AACA,kBAAG,MAAI,CAAC0B,UAAR,EAAmB;AACjB;AACA,oBAAMQ,QAAQ,GAAG,MAAI,CAACjC,SAAL,CAAekC,IAAf,CAAoB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAC3G,EAAF,IAAQ,MAAI,CAACgD,MAAL,CAAYuB,IAAZ,CAAiBtB,UAA7B;AAAA,iBAArB,CAAjB;;AACA,sBAAI,CAACV,IAAL,CAAU0B,GAAV,CAAc,SAAd,EAAyBuC,QAAzB,CAAkCC,QAAlC;;AAEA,sBAAI,CAAChC,qBAAL,GAA6B,MAAI,CAAClC,IAAL,CAAUmC,QAAV,CAAmB7B,OAAnB,CAA2B8B,YAA3B,CAC3BC,IAD2B,CAE1B,iEAAU,EAAV,CAF0B,EAG1B,2DAAI,UAAA9C,KAAK;AAAA,yBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACW,IAA9C;AAAA,iBAAT,CAH0B,EAI1B,2DAAI,UAAAA,IAAI;AAAA,yBAAIA,IAAI,GAAG,MAAI,CAACoC,cAAL,CAAoBpC,IAApB,CAAH,GAA+B,MAAI,CAAC+B,SAA5C;AAAA,iBAAR,CAJ0B,CAA7B;AAMD;AAEC,aAhBN,EAgBO,UAACR,GAAD,EAAO,CAER,CAlBN;AAoBD;;;yCACcc,I,EAAS;AACtB,mBAAOA,IAAI,IAAIA,IAAI,CAACrC,IAAb,GAAoBqC,IAAI,CAACrC,IAAzB,GAAgC,EAAvC;AACD;;;yCACsBA,I,EAAY;AACjC,gBAAMsC,WAAW,GAAGtC,IAAI,CAACuC,WAAL,EAApB;AACA,mBAAO,KAAKR,SAAL,CAAe1E,MAAf,CAAsB,UAAAmF,MAAM;AAAA,qBAAIA,MAAM,CAACxC,IAAP,CAAYuC,WAAZ,GAA0BE,QAA1B,CAAmCH,WAAnC,CAAJ;AAAA,aAA5B,CAAP;AACD;;;;;;;yBAtJUe,mB,EAAmB,2H,EAAA,2J,EAAA,+J,EAAA,wI,EAAA,yH,EAAA,sI,EAAA,gEAY2C,wEAZ3C,C;AAY0D,O;;;cAZ7EA,mB;AAAmB,wC;AAAA;AAAA;;;;;;;;;;oFAFpB,CAAC,wDAAD,C;AAAU,iB;AAAA,gB;AAAA,g/C;AAAA;AAAA;ACzBtB;;AAA6D;AAAA,qBAAS,IAAAc,gBAAA,EAAT;AAA2B,aAA3B;;AACQ;;AAAK;;AAE1E;;AAAoC;;AAAY;;AAChD;;AACE;;AACE;;AAEE;;AACE;;AACE;;AAAY;;AAAI;;AAChB;;AACA;;AACA;;AACF;;AACA;;AACE;;AAAW;;AAAW;;AACtB;;AAEA;;AACA;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAW;;AAAO;;AAClB;;AAEA;;AACE;;;;AAGF;;AACE;;AAA2C;;AAAW;;AACxD;;AAEF;;AACA;;AACE;AAAA,qBAAU,IAAAtB,YAAA,QAAV;AAA8B,aAA9B;;AACA;;AACF;;AACF;;AACA;;AAGE;;AAAkE;AAAA,qBAAS,IAAAc,KAAA,EAAT;AAAgB,aAAhB;;AAAkB;;AAAM;;AAC5F;;AACF;;AACF;;AACF;;;;;;AA3CU;;AAAA;;AAMY;;AAAA;;AACA;;AAAA;;AAMA;;AAAA;;AACA;;AAAA;;AAM6D;;AAAA;;AAExB;;AAAA;;AAChB;;AAAA;;AAKrB;;AAAA;;AAGoE;;AAAA;;AAEhF;;AAAA;;;;;;;;qBDfO;;;;;;wEAGJN,mB,EAAmB;gBAR/B,uDAQ+B;iBARrB;AACT5E,oBAAQ,EAAE,iBADD;AAETC,uBAAW,EAAE,8BAFJ;AAGTC,qBAAS,EAAE,CAAC,8BAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAK,+DALN;AAMTgE,qBAAS,EAAC,CAAC,wDAAD;AAND,W;AAQqB,U;;;;;;;;;;;;;;;;oBAYoC,oD;qBAAO,wE;;;;AAH7ClB,aAAG,EAAE,CAAF;kBAA9B,uDAA8B;mBAApB,e;AAAoB,WAAE;;;;;;;;;;;;;;;;;;;AEvCnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,UAAMwC,MAAM,GAAY,CACpB;AACIhI,YAAI,EAAG,EADX;AACcC,iBAAS,EAAG,uGAD1B;AACmDC,mBAAW,EAAE,CAAC,4EAAD,CADhE;AAC6EmB,gBAAQ,EAAG;AADxF,OADoB,CAAxB;;UAYa4G,wB;;;;;cAAAA;;;;2BAAAA,wB;AAAwB,S;AAAA,kBAJvB,CAAC,6DAAaC,QAAb,CAAsBF,MAAtB,CAAD,CAIuB,EAHtB,4DAGsB;;;;4HAAxBC,wB,EAAwB;AAAA;AAAA,oBAHtB,4DAGsB;AAAA,S;AAHV,O;;;;;wEAGdA,wB,EAAwB;gBALpC,sDAKoC;iBAL3B;AACNnB,mBAAO,EAAG,CAAC,6DAAaoB,QAAb,CAAsBF,MAAtB,CAAD,CADJ;AAENG,mBAAO,EAAG,CAAC,4DAAD;AAFJ,W;AAK2B,U;;;;;;;;;;;;;;;;;;AChBruBwB;;AAA2E;;AACvE;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,YAA1B;AAAsC,WAAtC;;AAAyC;;AAAM;;AAAY;;;;;;;;AACnF;;AACI;;AAAyC;AAAA;;AAAA;;AAAA;AAAA;;AAAzC;;AACA;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,YAA1B;AAAsC,WAAtC;;AAAyC;;AAAa;;AAC9E;;;;;;AAF6C;;AAAA;;;;;;AAJjD;;AACI;;AAEA;;AAIJ;;;;;;AANW;;AAAA;;AAEU;;AAAA;;;;;;AAKrB;;AAAoC;;AAAa;;;;;;AAAb;;AAAA;;;;;;;;AAIhC;;AAAiF;;AAChE;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,mBAA1B;AAA6C,WAA7C;;AAAgD;;AACjF;;AAAY;;;;;;;;AAChB;;AAEI;;AAA0C;AAAA;;AAAA;;AAAA;AAAA;;AAA1C;;AACA;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,mBAA1B;AAA6C,WAA7C;;AAAgD;;AAAa;;AACrF;;;;;;AAF8C;;AAAA;;;;;;AANlD;;AACI;;AAGA;;AAKJ;;;;;;AARW;;AAAA;;AAGU;;AAAA;;;;;;AAMrB;;AAAoC;;AAAoB;;;;;;AAApB;;AAAA;;;;;;;;AAIhC;;AAA6E;;AAC5D;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,eAA1B;AAAyC,WAAzC;;AAA4C;;AAC7E;;AAAY;;;;;;;;AAChB;;AAEI;;AAAsC;AAAA;;AAAA;;AAAA;AAAA;;AAAtC;;AACA;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,eAA1B;AAAyC,WAAzC;;AAA4C;;AAAa;;AACjF;;;;;;AAF0C;;AAAA;;;;;;AAN9C;;AACI;;AAGA;;AAKJ;;;;;;AARW;;AAAA;;AAGU;;AAAA;;;;;;AAMrB;;AAAoC;;AAAqB;;;;;;AAArB;;AAAA;;;;;;;;AAIhC;;AAA4E;;AACxE;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,cAA1B;AAAwC,WAAxC;;AAA2C;;AAAM;;AAAY;;;;;;;;AACrF;;AAEI;;AAAqC;AAAA;;AAAA;;AAAA;AAAA;;AAArC;;AACA;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,cAA1B;AAAwC,WAAxC;;AAA2C;;AAAa;;AAChF;;;;;;AAFyC;;AAAA;;;;;;AAL7C;;AACI;;AAEA;;AAKJ;;;;;;AAPW;;AAAA;;AAEU;;AAAA;;;;;;AAMrB;;AACI;;AAAqB;;;;;;AADU;;AAC/B;;AAAA;;;;;;AAGJ;;AACI;;AAA+B;;AAAM;;AACzC;;;;;;;;AACA;;AACI;;AAA4C;AAAA;;AAAA;;AAAA;;AAAA,sCAAoB,MAApB,EAA0B,WAA1B;AAA0B,WAA1B;;AACjB;;AAAU;;AAAW;;AAChD;;AAA4C;AAAA;;AAAA;;AAAA;;AAAA,sCAAoB,MAApB,EAA0B,WAA1B;AAA0B,WAA1B;;AACjB;;AAAI;;AAAW;;AAE1C;;AAA2C;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACvC;;AAAM;;AACd;;;;;;AAGJ;;;;;;AACA;;;;;;;;UDtEHC,W;;;AASb;;;;;UAWaC,a;AAmBX,+BAAoB/E,YAApB,EAAuDgF,MAAvD,EACUlF,QADV,EACkC;AAAA;;AAChC;AACA;AAHkB,eAAAE,YAAA,GAAAA,YAAA;AAAmC,eAAAgF,MAAA,GAAAA,MAAA;AAC7C,eAAAlF,QAAA,GAAAA,QAAA;AAlBV,eAAAmF,gBAAA,GAA6B,CAAE,MAAF,EAAU,aAAV,EAAwB,SAAxB,EAAkC,QAAlC,EAA2C,QAA3C,CAA7B;AACA,eAAAC,IAAA,GAAO,CAAC,CAAC,YAAD,EAAc,aAAd,EAA4B,SAA5B,EAAsC,SAAtC,CAAD,CAAP;AAQA,eAAAC,UAAA,GAAa,KAAb;AACA,eAAAC,iBAAA,GAAoB,KAApB;AACA,eAAAC,cAAA,GAAiB,KAAjB;AACA,eAAAC,aAAA,GAAgB,KAAhB;AACA,eAAAC,kBAAA,GAAqB,KAArB,CAKkC,CAIhC;AACD;;;;qCAEU;AACT,iBAAKC,WAAL;AACA,iBAAKC,YAAL,GAAoB,IAAIX,WAAJ,EAApB;AACA,iBAAKY,UAAL,GAAkB,gEAAeC,QAAjC;AACA,iBAAKtI,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAYF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAZ,CAApB;AACD;;;sCAEWwE,K,EAAc;AACxB,gBAAMY,WAAW,GAAIZ,KAAK,CAAC4D,MAAN,CAAkCjG,KAAvD;AACA,iBAAKkG,UAAL,CAAgBlI,MAAhB,GAAyBiF,WAAW,CAACkD,IAAZ,GAAmBjD,WAAnB,EAAzB;;AAEA,gBAAI,KAAKgD,UAAL,CAAgBE,SAApB,EAA+B;AAC7B,mBAAKF,UAAL,CAAgBE,SAAhB,CAA0BC,SAA1B;AACD;AACF;;;wCAEU;AAAA;;AACT,iBAAKhG,YAAL,CAAkBiG,YAAlB,GAAiCvH,SAAjC,CACE,UAACwC,SAAD,EAAiB;AACf,oBAAI,CAACgF,YAAL,GAAoBhF,SAAS,CAACkB,IAA9B;;AACA,mBAAI,IAAI+D,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,MAAI,CAACD,YAAL,CAAkBE,MAAnC,EAA0CD,CAAC,EAA3C,EAA8C;AAC5C,oBAAG,MAAI,CAACD,YAAL,CAAkBC,CAAlB,EAAqBlG,MAArB,IAA+B,GAAlC,EAAsC;AACpC,wBAAI,CAACiG,YAAL,CAAkBC,CAAlB,EAAqBE,YAArB,GAAoC,UAApC;AACD,iBAFD,MAEK;AACH,wBAAI,CAACH,YAAL,CAAkBC,CAAlB,EAAqBE,YAArB,GAAoC,QAApC;AACD;AAGF;;AACD,oBAAI,CAACR,UAAL,GAAkB,IAAI,0EAAJ,CAAuB,MAAI,CAACK,YAA5B,CAAlB;AACA,oBAAI,CAACL,UAAL,CAAgBE,SAAhB,GAA4B,MAAI,CAACA,SAAjC;AACA,oBAAI,CAACF,UAAL,CAAgBS,IAAhB,GAAuB,MAAI,CAACA,IAA5B;AACD,aAfH,EAeI,UAACzE,GAAD,EAAO,CACR,CAhBH;AAkBD;;;kCAEMhE,E,EAAE;AAAA;;AACP,iBAAK0I,gBAAL,GAAwB,KAAKvB,MAAL,CAAY7D,IAAZ,CAAiB,mHAAjB,EAA6C;AACnEqF,0BAAY,EAAE;AADqD,aAA7C,CAAxB,CADO,CAKT;;AAEA,iBAAKD,gBAAL,CAAsBE,WAAtB,GAAoC/H,SAApC,CAA8C,UAAAgI,MAAM,EAAI;AACpD,kBAAKA,MAAL,EACA;AACE,sBAAI,CAAC1G,YAAL,WAAyBnC,EAAzB,EAA6B,MAAI,CAACR,YAAL,CAAkB2D,MAA/C,EAAuDtC,SAAvD,CACE,UAAC0D,IAAD,EAAY;AACR,sBAAGA,IAAI,CAACnC,MAAL,GAAc,IAAjB,EAAsB;AACpB,0BAAI,CAACuF,WAAL;;AACJ,0BAAI,CAAC1F,QAAL,CAAcqB,IAAd,CAAmB,sBAAnB,EAA0C,SAA1C,EAAoD;AAACC,8BAAQ,EAAC;AAAV,qBAApD;AACG,mBAHD,MAGK;AACH,0BAAI,CAACoE,WAAL;;AACA,0BAAI,CAAC1F,QAAL,CAAcqB,IAAd,CAAmB,yBAAnB,EAA6C,SAA7C,EAAuD;AAACC,8BAAQ,EAAC;AAAV,qBAAvD;AACD;AAEJ,iBAVH,EAUI,UAACS,GAAD,EAAO,CAER,CAZH;AAcD;;AACD,oBAAI,CAAC0E,gBAAL,GAAwB,IAAxB;AACH,aAnBD;AAqBC;;;qCAGUxC,M,EAAO3B,I,EAAI;AAAA;;AAEpB,gBAAIvB,MAAM,GAAG;AACXkD,oBAAM,EAAGA,MADE;AAEX3B,kBAAI,EAAGA;AAFI,aAAb;AAKA,gBAAMyB,SAAS,GAAG,KAAKmB,MAAL,CAAY7D,IAAZ,CAAiB,4FAAjB,EAAwC;AACxDwF,mBAAK,EAAE,OADiD;AAExDvE,kBAAI,EAAEvB,MAFkD;AAGxD+F,uBAAS,EAAE,KAH6C;AAIxDC,wBAAU,EAAE,mBAJ4C;AAKxDL,0BAAY,EAAE;AAL0C,aAAxC,CAAlB;AAQA3C,qBAAS,CAAC4C,WAAV,GAAwB/H,SAAxB,CAAkC,UAAAgI,MAAM,EAAI;AAE1C;AACA,oBAAI,CAAClB,WAAL;AACD,aAJD;AAKD;;;qCACUzB,M,EAAO3B,I,EAAM;AAAA;;AACtB,gBAAIvB,MAAM,GAAG;AACXkD,oBAAM,EAAGA,MADE;AAEX3B,kBAAI,EAAGA;AAFI,aAAb;AAKA,gBAAMyB,SAAS,GAAG,KAAKmB,MAAL,CAAY7D,IAAZ,CAAiB,sFAAjB,EAAsC;AACtDwF,mBAAK,EAAE,OAD+C;AAEtDvE,kBAAI,EAAEvB,MAFgD;AAGtDgG,wBAAU,EAAE,mBAH0C;AAItDD,uBAAS,EAAE,KAJ2C;AAKtDJ,0BAAY,EAAE;AALwC,aAAtC,CAAlB;AAQA3C,qBAAS,CAAC4C,WAAV,GAAwB/H,SAAxB,CAAkC,UAAAgI,MAAM,EAAI;AAE1C;AACA,qBAAI,CAAClB,WAAL;AACD,aAJD;AAKD;;;2CACgBsB,a,EAAa;AAE5B,gBAAGA,aAAa,IAAI,YAApB,EAAiC;AAC/B,mBAAK3B,UAAL,GAAkB,CAAC,KAAKA,UAAxB;AACA,mBAAKM,YAAL,CAAkBnF,IAAlB,GAAyB,EAAzB;AACD;;AAGD,gBAAGwG,aAAa,IAAI,mBAApB,EAAwC;AACtC,mBAAK1B,iBAAL,GAAyB,CAAC,KAAKA,iBAA/B;AACA,mBAAKK,YAAL,CAAkBhF,WAAlB,GAAgC,EAAhC;AACD;;AAGD,gBAAGqG,aAAa,IAAI,eAApB,EAAoC;AAClC,mBAAKxB,aAAL,GAAqB,CAAC,KAAKA,aAA3B;AACA,mBAAKG,YAAL,CAAkB/E,OAAlB,GAA4B,EAA5B;AACD;;AACD,gBAAGoG,aAAa,IAAI,oBAApB,EAAyC;AACvC,mBAAKvB,kBAAL,GAA0B,CAAC,KAAKA,kBAAhC;AACA,mBAAKE,YAAL,CAAkBY,YAAlB,GAAiC,EAAjC;AACD;AAED;;;wCAEU;AAET,iBAAKU,YAAL,GAAoB,EAApB;;AACD,iBAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,UAAL,CAAgBmB,YAAhB,CAA6BZ,MAAjD,EAAyDD,CAAC,EAA1D,EAA8D;AAC3D,kBAAIc,UAAU,GAAG,KAAKpB,UAAL,CAAgBmB,YAAhB,CAA6Bb,CAA7B,CAAjB,CAD2D,CAE5D;AACA;;AACA,kBAAI/D,IAAI,GAAG;AAAC,8BAAa6E,UAAU,CAAC3G,IAAzB;AAA8B,+BAAc2G,UAAU,CAACxG,WAAvD;AACC,2BAAWwG,UAAU,CAACC,YADvB;AACoC,2BAAUD,UAAU,CAACZ;AADzD,eAAX;AAEA,mBAAKU,YAAL,CAAkB1I,IAAlB,CAAuB+D,IAAvB;AACD;;AACA,gBAAM+E,SAAS,GAAG,2CAAWC,aAAX,CAAyB,KAAKL,YAA9B,CAAlB;AACE,gBAAMM,QAAQ,GAAkB,2CAAWC,QAAX,EAAhC;AACA,uDAAWC,iBAAX,CAA6BF,QAA7B,EAAuCF,SAAvC,EAAkD,cAAlD;AACA,2DAAeE,QAAf,EAAyB,mBAAzB,EAdO,CAeT;AACC;AACF;;;sCAEQ;AAAA;;AAER,gBAAIG,GAAG,GAAG,IAAI,4CAAJ,CAAU,CAAE;AAAF,aAAV,CAAV;AAGA,iBAAKT,YAAL,GAAoB,EAApB;;AACA,iBAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,UAAL,CAAgBmB,YAAhB,CAA6BZ,MAAjD,EAAyDD,CAAC,EAA1D,EAA8D;AAC5D,kBAAIsB,MAAM,GAAG,KAAK5B,UAAL,CAAgBmB,YAAhB,CAA6Bb,CAA7B,CAAb,CAD4D,CAE7D;AACA;;AACA,kBAAI/D,IAAI,GAAE,CAACqF,MAAM,CAACnH,IAAR,EAAamH,MAAM,CAAChH,WAApB,EAAgCgH,MAAM,CAACP,YAAvC,EAAoDO,MAAM,CAACpB,YAA3D,CAAV;AAEA,mBAAKU,YAAL,CAAkB1I,IAAlB,CAAuB+D,IAAvB;AACD;;AACD,gBAAIsF,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACA,gBAAIC,QAAQ,GAAG,IAAID,KAAJ,EAAf;AACC,gBAAIE,GAAG,GAAG,2CAAV;AACA,gBAAIC,UAAU,GAAG,4CAAjB;AACDF,oBAAQ,CAACC,GAAT,GAAcC,UAAd;AACA,gBAAIC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,cAAX,CAA2B,OAA3B,CAAlB;AACAP,eAAG,CAACG,GAAJ,GAAUA,GAAV;AACAL,eAAG,CAACU,WAAJ,CAAgB,EAAhB;AACAV,eAAG,CAACW,YAAJ,CAAiB,GAAjB;AACAX,eAAG,CAACU,WAAJ,CAAgB,EAAhB;AAEEV,eAAW,CAACY,SAAZ,CAAsB;AACrBlD,kBAAI,EAAE,KAAKA,IADU;AAErBmD,kBAAI,EAAE,KAAKtB,YAFU;AAGrBuB,mBAAK,EAAE,MAHc;AAIrBC,wBAAU,EAAE;AAAEC,yBAAS,EAAE,SAAb;AAAuBC,yBAAS,EAAC,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV;AAAjC,eAJS;AAKrBC,oBAAM,EAAE;AACNC,2BAAW,EAAE,CADP;AAENC,wBAAQ,EAAE;AAFJ,eALa;AAWrBC,oBAAM,EAAE;AAAEC,mBAAG,EAAE;AAAP,eAXa;AAYrBC,yBAAW,EAAE,qBAAA3G,IAAI,EAAI,CACpB,CAboB;AAcrB4G,yBAAW,EAAC,qBAAA5G,IAAI,EAAE;AAChBoF,mBAAG,CAACyB,QAAJ,CAAavB,GAAb,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,EAA1B,EAA8B,CAA9B;AACAF,mBAAG,CAACyB,QAAJ,CAAarB,QAAb,EAAuB,GAAvB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,CAAnC;AAEAJ,mBAAG,CAAC0B,IAAJ,CAAS,qBAAT,EAAgC1B,GAAG,CAAC2B,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,KAAmC,CAAnE,EAAsE,EAAtE,EAA0E;AAAEC,uBAAK,EAAE;AAAT,iBAA1E;AAEA9B,mBAAG,CAACW,YAAJ,CAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB;AACAX,mBAAG,CAACU,WAAJ,CAAgB,EAAhB;AACAV,mBAAG,CAAC+B,SAAJ,CAAe/B,GAAG,CAACgC,MAAJ,CAAW;AAACC,yBAAO,EAAE;AAAV,iBAAX,CAAf;AACAjC,mBAAG,CAAC0B,IAAJ,CAAS,iCAAT,EAA2C,EAA3C,EAA8C,GAA9C,EAAkD,IAAlD,EAAuD,EAAvD;AACA1B,mBAAG,CAAC+B,SAAJ,CAAe/B,GAAG,CAACgC,MAAJ,CAAW;AAACC,yBAAO,EAAE;AAAV,iBAAX,CAAf;AACAjC,mBAAG,CAACW,YAAJ,CAAiB,GAAjB;AACAX,mBAAG,CAACU,WAAJ,CAAgB,CAAhB;AACAV,mBAAG,CAAC0B,IAAJ,CAAS,UAASnB,WAAlB,EAA+B,EAA/B,EAAmC,EAAnC;AAEAP,mBAAG,CAAC0B,IAAJ,CAAS,kBAAiB,OAAI,CAAC7L,YAAL,CAAkBqM,MAA5C,EAAoD,GAApD,EAAyD,EAAzD,EAA4D;AAAEJ,uBAAK,EAAE;AAAT,iBAA5D;AACA9B,mBAAG,GAAG,OAAI,CAACmC,YAAL,CAAkBnC,GAAlB,CAAN;AACD;AA/BoB,aAAtB,EAzBO,CA2DR;;AACAA,eAAG,CAACoC,MAAJ,CAAW,kBAAX,EA5DQ,CA6DR;;AACApC,eAAG,CAACqC,IAAJ,CAAS,yBAAT;AAED;;;uCACYrC,G,EAAG;AACd,gBAAIsC,OAAO,GAAGtC,GAAG,CAACuC,gBAAJ,EAAd;AACA,gBAAM5D,CAAC,GAAGqB,GAAG,CAAC2B,QAAJ,CAAaY,gBAAb,EAAV;AACAvC,eAAG,CAACW,YAAJ,CAAiB,GAAjB;AACIX,eAAG,CAACU,WAAJ,CAAgB,EAAhB,EAJU,CAKb;;AAEAV,eAAG,CAAC0B,IAAJ,CAAS,UAAWc,MAAM,CAAC7D,CAAD,CAAjB,GAAuB,MAAvB,GAAgC6D,MAAM,CAACF,OAAD,CAA/C,EAAyD,MAAI,EAA7D,EAAgE,MAAI,EAApE,EAAuE,IAAvE,EAA4E,IAA5E,EAAiF,OAAjF;AACD,mBAAOtC,GAAP;AAED;;;;;;;yBA/PUzC,a,EAAa,4J,EAAA,oI,EAAA,yI;AAAA,O;;;cAAbA,a;AAAa,iC;AAAA;AAAA;4EASb,wE,EAAc,I;;4EACd,8D,EAAS,I;;;;;;;;;;;;;;;AC5CtB;;AAGG;;AAAsC;AAAA,qBAAS,IAAAkF,WAAA,EAAT;AAAsB,aAAtB;;AACrC;;AAAU;;AAAiB;;AAC7B;;AAAS;;AACT;;AAAsC;AAAA,qBAAS,IAAAC,SAAA,EAAT;AAAoB,aAApB;;AACpC;;AAAU;;AAAc;;AAC1B;;AAGF;;AACA;;AACI;;AAEI;;AACI;;AAEI;;AACI;;AAQA;;AACJ;;AACA;;AACI;;AAUA;;AACJ;;AACA;;AACI;;AAUA;;AACJ;;AACA;;AACI;;AASA;;AAEJ;;AACA;;AACI;;AAGA;;AASJ;;AAEA;;AACA;;AAIJ;;AAEA;;AACJ;;AACJ;;AACJ;;;;AA7E4C;;AAAA,mGAAyB,eAAzB,EAAyB,gBAAzB,EAAyB,YAAzB,EAAyB,cAAzB;;AAmER;;AAAA;;AACa;;AAAA;;AAMtB;;AAAA;;;;;;;qBD3DV;;;;;;wEAGJnF,a,EAAa;gBARzB,uDAQyB;iBARf;AACThG,oBAAQ,EAAE,UADD;AAETC,uBAAW,EAAE,uBAFJ;AAGTC,qBAAS,EAAE,CAAC,uBAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAK;AALN,W;AAQe,U;;;;;;;;;AASiB2G,mBAAS,EAAE,CAAF;kBAAjD,uDAAiD;mBAAvC,wE,EAAc;AAAC,wBAAQ;AAAT,a;AAAyB,WAAE,C;AAChBO,cAAI,EAAE,CAAF;kBAAvC,uDAAuC;mBAA7B,8D,EAAS;AAAC,wBAAQ;AAAT,a;AAAoB,WAAE;;;;;;;;;;;;;;;;;;;AEhD5C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACgBU;;AAA0D;;AAAgB;;;;;;AAC1E;;AAAwD;;AAAiC;;;;;;AAMzF;;AAAgE;;AAAoB;;;;;;AACpF;;AAA+D;;AAAiC;;;;;;AAS9F;;AACE;;AACF;;;;;;AAFiE;;AAC/D;;AAAA;;;;;;AAIJ;;AAA+C;;AAC/C;;;;ADzBV,eAAS7G,2BAAT,GAAoC;AAClC,eAAO,UAACC,OAAD,EAA6D;AAClE,cAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,mBAAO;AAAE,2CAA6B;AAAEA,qBAAK,EAAED,OAAO,CAACC;AAAjB;AAA/B,aAAP;AACD;;AACD,iBAAO,IAAP;AAAa;AACd,SALD;AAMD;;UASYwK,qB;AAYX,uCAAoBtK,EAApB,EAA4CG,YAA5C,EAA+ED,cAA/E,EAAsHD,QAAtH,EAAoJ8D,QAApJ,EACmBC,SADnB,EACmGzB,IADnG,EACwH;AAAA;;AADpG,eAAAvC,EAAA,GAAAA,EAAA;AAAwB,eAAAG,YAAA,GAAAA,YAAA;AAAmC,eAAAD,cAAA,GAAAA,cAAA;AAAuC,eAAAD,QAAA,GAAAA,QAAA;AAA8B,eAAA8D,QAAA,GAAAA,QAAA;AACjI,eAAAC,SAAA,GAAAA,SAAA;AAAgF,eAAAzB,IAAA,GAAAA,IAAA;AAVnG,eAAA0B,UAAA,GAAa,KAAb;AAGA,eAAA7D,MAAA,GAAS,KAAT;AAO0H;;;;qCAE/G;AACT,iBAAKC,UAAL;AACA,iBAAKC,UAAL;AACD;;;uCAES;AAER,iBAAK9C,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAYF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAZ,CAApB;AAEA,iBAAKqD,MAAL,GAAc,KAAKuB,IAAnB;AAEA,iBAAK0B,UAAL,GAAkB,KAAKjD,MAAL,CAAYkD,MAAZ,IAAsB,QAAtB,GAAiC,KAAjC,GAAyC,IAA3D;AAEA,iBAAK3D,IAAL,GAAY,KAAKP,EAAL,CAAQQ,KAAR,CAAc;AACxBC,kBAAI,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWC,QAAZ,EAAqB,0DAAWC,OAAX,CAAmB,iBAAnB,CAArB,CAAJ,CADmB;AAExBC,yBAAW,EAAC,CAAC,EAAD,EAAI,CAAC,0DAAWF,QAAZ,EAAqB,0DAAWC,OAAX,CAAmB,iBAAnB,CAArB,CAAJ,CAFY;AAGxBE,qBAAO,EAAE,CAAC,EAAD,EAAI,CAACjB,2BAA2B,EAA5B,EAA+B,0DAAWc,QAA1C,CAAJ,CAHe;AAIxBN,oBAAM,EAAG,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B;AAJb,aAAd,CAAZ;;AAOA,gBAAI,KAAK6D,UAAT,EAAoB;AAClB,mBAAKE,YAAL,CAAkB,KAAKnD,MAAvB;AACD;AACF;;;kCAEO;AAEN,iBAAKgD,SAAL,CAAeI,KAAf;AACD;;;6CACe;AACd,iBAAKJ,SAAL,CAAeI,KAAf;AACD;;;uCAGS;AAAA;;AACR,gBAAIrD,UAAU,GAAG,KAAKR,IAAL,CAAUT,KAA3B;AAEA,gBAAMkB,MAAM,GAAQ;AAElBP,kBAAI,EAAEM,UAAU,CAACN,IAFC;AAGhBG,yBAAW,EAAEG,UAAU,CAACH,WAHR;AAIhBK,wBAAU,EAACF,UAAU,CAACF,OAAX,CAAmB7C,EAJd;AAKhBoC,oBAAM,EAAI,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B,GALtB;AAMhBiE,uBAAS,EAAG,KAAK7G,YAAL,CAAkB2D;AANd,aAApB,CAHQ,CAYZ;;AAEI,gBAAI,KAAK8C,UAAT,EAAoB;AACpBjD,oBAAM,CAAChD,EAAP,GAAY,KAAKgD,MAAL,CAAYuB,IAAZ,CAAiBvE,EAA7B,EACAgD,MAAM,CAACqD,SAAP,GAAmB,KAAK7G,YAAL,CAAkB2D,MADrC;AAED,aAHC,MAGI;AACJH,oBAAM,CAACE,UAAP,GAAoB,KAAK1D,YAAL,CAAkB2D,MAAtC;AACD;;AAEC,gBAAI,KAAK8C,UAAT,EAAoB;AACpB,mBAAK9D,YAAL,CAAkBmE,MAAlB,CAAyBtD,MAAzB,EAAiCnC,SAAjC,CACE,UAACwC,SAAD,EAAqB;AACnB,oBAAGA,SAAS,CAACjB,MAAV,IAAoB,IAAvB,EAA4B;AAC1B,yBAAI,CAACH,QAAL,CAAcqB,IAAd,CAAmB,8BAAnB,EAAmD,SAAnD,EAA8D;AAAEC,4BAAQ,EAAE;AAAZ,mBAA9D;;AACA,yBAAI,CAACyC,SAAL,CAAeI,KAAf;AACD,iBAHD,MAGK;AACH,sBAAG/C,SAAS,CAACG,QAAV,IAAsB,sBAAzB,EAAgD;AAC9C,2BAAI,CAAEC,QAAN,GAAiBJ,SAAS,CAACK,OAA3B;;AACA,wBAAIC,KAAK,GAAG,OAAI,CAAEF,QAAN,CAAeG,WAAf,CAA2B,GAA3B,CAAZ;;AAEA,2BAAI,CAACC,QAAL,GAAgB,OAAI,CAAEJ,QAAN,CAAeK,SAAf,CAAyBH,KAAK,GAAC,CAA/B,CAAhB;;AACA,wBAAG,OAAI,CAACE,QAAL,IAAiB,cAApB,EAAoC;AAClC,6BAAI,CAAC5B,QAAL,CAAcqB,IAAd,CAAmB,kFAAgBS,kBAAnC,EAAuD,SAAvD,EAAkE;AAAER,gCAAQ,EAAE;AAAZ,uBAAlE;AACD;AACF,mBARD,MAQK;AACH,2BAAI,CAACtB,QAAL,CAAcqB,IAAd,CAAmBD,SAAS,CAACK,OAA7B,EAAsC,SAAtC,EAAiD;AAAEH,8BAAQ,EAAE;AAAZ,qBAAjD;AACD,mBAXE,CAYJ;AACA;;AACA;AAEF,eArBH,EAsBE,UAACS,GAAD,EAAS;AACP,uBAAI,CAAC/B,QAAL,CAAcqB,IAAd,CAAmB,kFAAgBiD,YAAnC,EAAiD,SAAjD,EAA4D;AAAEhD,0BAAQ,EAAE;AAAZ,iBAA5D;AACD,eAxBH;AA0BD,aA3BC,MA2BG;AACH,mBAAKpB,YAAL,CAAkBiB,MAAlB,CAAyBJ,MAAzB,EAAiCnC,SAAjC,CACE,UAAC0D,IAAD,EAAgB;AACd,uBAAI,CAACtC,QAAL,CAAcqB,IAAd,CAAmB,eAAnB,EAAoC,SAApC,EAA+C;AAAEC,0BAAQ,EAAE;AAAZ,iBAA/C;;AACA,uBAAI,CAACyC,SAAL,CAAeI,KAAf;AACD,eAJH,EAKE,UAACpC,GAAD,EAAS;AACP,uBAAI,CAAC/B,QAAL,CAAcqB,IAAd,CAAmB,kBAAnB,EAAuC,SAAvC,EAAkD;AAAEC,0BAAQ,EAAE;AAAZ,iBAAlD;AACD,eAPH;AAUD;;AAEC,iBAAKyC,SAAL,CAAeI,KAAf,CAAqBpD,MAArB;AACD;;;0CAEeT,I,EAAiB;AAC/B,mBAAOA,IAAI,CAAC0B,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,UAA3B,IACH,wBADG,GAEH3B,IAAI,CAAC0B,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,OAA3B,IACA,mBADA,GAEA,EAJJ;AAKD;;;uCAEYlB,M,EAAM;AAEjB,iBAAKT,IAAL,CAAU0B,GAAV,CAAc,MAAd,EAAsBuC,QAAtB,CAA+BxD,MAAM,CAACuB,IAAP,CAAY9B,IAA3C;AACA,iBAAKF,IAAL,CAAU0B,GAAV,CAAc,aAAd,EAA6BuC,QAA7B,CAAsCxD,MAAM,CAACuB,IAAP,CAAY3B,WAAlD;AACA,iBAAKL,IAAL,CAAU0B,GAAV,CAAc,SAAd,EAAyBuC,QAAzB,CAAkCxD,MAAM,CAACuB,IAAP,CAAYtB,UAA9C;AAEA,iBAAKb,MAAL,GAAcY,MAAM,CAACuB,IAAP,CAAYnC,MAAZ,IAAsB,GAAtB,GAA4B,IAA5B,GAAmC,KAAjD;AACD;;;uCAEY+B,K,EAAK;AAChB,iBAAK/B,MAAL,GAAc+B,KAAK,CAACC,OAApB;AACA,iBAAKC,GAAL,CAASD,OAAT,GAAmB,KAAKhC,MAAxB;AACD;;;uCACS;AAAA;;AACR,iBAAKF,cAAL,CAAoBoC,aAApB,GAAoCzD,SAApC,CACE,UAAC0D,IAAD,EAAY;AACV,qBAAI,CAACC,SAAL,GAAiBD,IAAjB;;AACA,kBAAG,OAAI,CAAC0B,UAAR,EAAmB;AACjB;AACA,oBAAMQ,QAAQ,GAAG,OAAI,CAACjC,SAAL,CAAekC,IAAf,CAAoB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAC3G,EAAF,IAAQ,OAAI,CAACgD,MAAL,CAAYuB,IAAZ,CAAiBtB,UAA7B;AAAA,iBAArB,CAAjB;;AACA,uBAAI,CAACV,IAAL,CAAU0B,GAAV,CAAc,SAAd,EAAyBuC,QAAzB,CAAkCC,QAAlC;;AAEA,uBAAI,CAAChC,qBAAL,GAA6B,OAAI,CAAClC,IAAL,CAAUmC,QAAV,CAAmB7B,OAAnB,CAA2B8B,YAA3B,CAC3BC,IAD2B,CAE1B,iEAAU,EAAV,CAF0B,EAG1B,2DAAI,UAAA9C,KAAK;AAAA,yBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACW,IAA9C;AAAA,iBAAT,CAH0B,EAI1B,2DAAI,UAAAA,IAAI;AAAA,yBAAIA,IAAI,GAAG,OAAI,CAACoC,cAAL,CAAoBpC,IAApB,CAAH,GAA+B,OAAI,CAAC+B,SAA5C;AAAA,iBAAR,CAJ0B,CAA7B;AAMD;AAEC,aAhBN,EAgBO,UAACR,GAAD,EAAO,CAER,CAlBN;AAoBD;;;yCACcc,I,EAAS;AACtB,mBAAOA,IAAI,IAAIA,IAAI,CAACrC,IAAb,GAAoBqC,IAAI,CAACrC,IAAzB,GAAgC,EAAvC;AACD;;;yCACsBA,I,EAAY;AACjC,gBAAMsC,WAAW,GAAGtC,IAAI,CAACuC,WAAL,EAApB;AACA,mBAAO,KAAKR,SAAL,CAAe1E,MAAf,CAAsB,UAAAmF,MAAM;AAAA,qBAAIA,MAAM,CAACxC,IAAP,CAAYuC,WAAZ,GAA0BE,QAA1B,CAAmCH,WAAnC,CAAJ;AAAA,aAA5B,CAAP;AACD;;;;;;;yBAlKUuH,qB,EAAqB,2H,EAAA,2J,EAAA,+J,EAAA,wI,EAAA,yH,EAAA,sI,EAAA,gEAa2C,wEAb3C,C;AAa0D,O;;;cAb/EA,qB;AAAqB,0C;AAAA;AAAA;;;;;;;;;;oFAFtB,CAAC,wDAAD,C;AAAU,iB;AAAA,gB;AAAA,2lD;AAAA;AAAA;ACxBtB;;AAA6D;AAAA,qBAAS,IAAA1F,gBAAA,EAAT;AAA2B,aAA3B;;AACQ;;AAAK;;AAE1E;;AAAoC;;AAAY;;AAChD;;AACE;;AACE;;AAEE;;AACE;;AACE;;AAAY;;AAAI;;AAChB;;AACA;;AACA;;AACF;;AACA;;AACE;;AAAW;;AAAW;;AACtB;;AAEA;;AACA;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAW;;AAAO;;AAClB;;AAEA;;AACE;;;;AAGF;;AACE;;AAA8E;;AAAW;;AAC3F;;AAEF;;AACA;;AACE;AAAA,qBAAU,IAAAtB,YAAA,QAAV;AAA8B,aAA9B;;AACA;;AACF;;AACF;;AACA;;AACE;;AAAqE;AAAA,qBAAS,IAAAiH,UAAA,EAAT;AAAqB,aAArB;;AAAuB;;AACzE;;AACnB;;AAAkE;AAAA,qBAAS,IAAAnG,KAAA,EAAT;AAAgB,aAAhB;;AAAkB;;AAAM;;AAC5F;;AACF;;AACF;;AACF;;;;;;AA3CU;;AAAA;;AAMY;;AAAA;;AACA;;AAAA;;AAMA;;AAAA;;AACA;;AAAA;;AAM6D;;AAAA;;AAExB;;AAAA;;AAChB;;AAAA;;AAKrB;;AAAA;;AAGoE;;AAAA;;AAEhF;;AAAA;;AAI0F;;AAAA;;;;;;;;qBDpBnF;;;;;;wEAGJkG,qB,EAAqB;gBARjC,uDAQiC;iBARvB;AACTpL,oBAAQ,EAAE,mBADD;AAETC,uBAAW,EAAE,gCAFJ;AAGTC,qBAAS,EAAE,CAAC,gCAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAK,+DALN;AAMTgE,qBAAS,EAAC,CAAC,wDAAD;AAND,W;AAQuB,U;;;;;;;;;;;;;;;;oBAaoC,oD;qBAAO,wE;;;;AAJ/ClB,aAAG,EAAE,CAAF;kBAA9B,uDAA8B;mBAApB,e;AAAoB,WAAE","file":"manage-state-manage-state-module-es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent,canActivate:[AuthGuard] },\r\n  { path : 'list', component : ListComponent,canActivate:[AuthGuard] },\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-manage-state-crud',\r\n  templateUrl: './manage-state-crud.component.html',\r\n  styleUrls: ['./manage-state-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class ManageStateCrudComponent implements OnInit {\r\n\r\n  tabLinks = [\r\n    // { label: 'Manage State', link: 'list' },\r\n    // { label: 'Add New', link: 'create' }\r\n  ];\r\n  menuArray: any;\r\n  localStorage: any;\r\n  objectData: any;\r\n  objectChildData: any;\r\n  tempLinks = [];\r\n\r\n  constructor(private router: Router, private cdr: ChangeDetectorRef, private _utilityService: UtilityService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    let nav_list = this.localStorage.nav_list_with_tab;\r\n    nav_list.filter((x) => {\r\n      if (x.id === \"manageGeographics\") {\r\n        this.objectData = x;\r\n        if (this.objectData.children != null && this.objectData.children != undefined) {\r\n          this.objectData.children.filter((y) => {\r\n            if (y.id === \"manageState\") {\r\n              this.objectChildData = y;\r\n              let isDefaultRoutePermeted = false;\r\n              if (this.objectChildData.children != null && this.objectChildData.children != undefined) {\r\n                this.objectChildData.children.filter((z) => {\r\n                  if (z.id === \"manageState\") {\r\n                    isDefaultRoutePermeted = true;\r\n                    this.tempLinks.push({ label: 'Manage State', link: 'list' });\r\n                  }\r\n                  if (z.id === \"addNew\") {\r\n                    this.tempLinks.push({ label: 'Add New', link: 'create' });\r\n                  }\r\n                });\r\n\r\n              }\r\n\r\n              this.tabLinks = this.tempLinks;\r\n              if (!isDefaultRoutePermeted) {\r\n                this.router.navigate(['/manageGeographics/manageState/' + this.tempLinks[0].link]);\r\n              }\r\n\r\n            }\r\n\r\n          });\r\n        }\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._utilityService.activeMenuItems$.subscribe(menuItemSelecte => {\r\n      this.menuArray = menuItemSelecte;\r\n      if (this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined) {\r\n        this.menuArray = JSON.parse(localStorage.getItem('activeMenuItems'));\r\n      }\r\n      this.cdr.detectChanges();\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent { }\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet ></router-outlet>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit,ViewChild } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup,FormControl,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from 'app/shared/services/user/user.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport {CountryService} from 'app/shared/services/geographics/country.service';\r\nimport {StateService} from 'app/shared/services/geographics/state.service';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n} \r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\nexport class CreateComponent implements OnInit {\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  status = false;\r\n  countries :any;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  errorMsg:String;\r\n  splitted:String;\r\n  constructor(private fb: FormBuilder,\r\n    private snackBar: MatSnackBar,\r\n    private router : Router,public countryService: CountryService,public stateService:StateService) {\r\n     \r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n   this.getCountry();\r\n   \r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      name:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      country :['',[autocompleteObjectValidator(),Validators.required]],\r\n      status : this.status == true ? 'Y' : 'N'\r\n     });\r\n  \r\n   \r\n \r\n  }\r\n \r\n  onSubmit(){\r\n    if (this.form.invalid){\r\n      return;\r\n    }else{\r\n      let formValues = this.form.value;\r\n      ////\r\n  \r\n      \r\n      let params = {\r\n        name :formValues.name, \r\n        description :formValues.description, \r\n        country_id:formValues.country.id,\r\n        status :  this.status == true ? 'Y' : 'N', \r\n        \r\n        created_by : this.localStorage.userId \r\n      }\r\n  \r\n      \r\n      this.stateService.create(params).subscribe(\r\n        (stateData:any )=>{\r\n          if(stateData.status == true){\r\n            this.snackBar.open('State Created!', 'Dismiss', { duration: 5000 });\r\n            this.router.navigate(['/manageGeographics/manageState/list']);\r\n          }else{\r\n            if(stateData.err_code == \"ERROR : ER_DUP_ENTRY\"){\r\n              this. errorMsg = stateData.message;\r\n              var index=  this. errorMsg.lastIndexOf(\" \");\r\n             \r\n              this.splitted = this. errorMsg.substring(index+1); \r\n              if(this.splitted == \"'country_id'\" ){\r\n                this.snackBar.open(MessageConstant.nameDuplicateState, 'Dismiss', { duration: 5000 });\r\n              }\r\n            }else{\r\n              this.snackBar.open(stateData.message, 'Dismiss', { duration: 5000 });\r\n            }\r\n            //this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n       \r\n  \r\n        },\r\n        (err)=>{\r\n          this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n        }\r\n      )\r\n    }\r\n   \r\n\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n  getCountry(){\r\n    this.countryService.getAllCountry().subscribe(\r\n      (data:any)=>{\r\n        this.countries = data;\r\n         this.filteredOptionCountry = this.form.controls.country.valueChanges\r\n           .pipe(\r\n             startWith(''),\r\n             map(value => typeof value === 'string' ? value : value.name),\r\n             map(name => name ? this._filterCountry(name) : this.countries)\r\n           );\r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  displayCountry(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCountry(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.countries.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  // onCountryChange(event){\r\n  //   this.getCountry();\r\n  //   this.form.get('name').setValue('');\r\n  //   this.form.get('description').setValue('');\r\n  // }\r\n}\r\n\r\n\r\n","<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\t<form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n\t\tfxFlex=\"1 0 auto\" name=\"form\" (submit)=\"onSubmit()\" (keydown.enter)=\"$event.preventDefault()\">\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label> Name</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"name\" maxlength=\"100\" required autocomplete=\"off\">\r\n\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\"> Name is required</mat-error>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" required autocomplete=\"off\" maxlength=\"100\" autocomplete=\"off\"\r\n\t\t\t\t\tformControlName=\"description\">\r\n\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('required')\">Description required</mat-error>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Country</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"country\" autocomplete=\"off\" [matAutocomplete]=\"countryAuto\"\r\n\t\t\t\t\trequired>\r\n\t\t\t\t<mat-autocomplete #countryAuto=\"matAutocomplete\" [displayWith]=\"displayCountry\" >\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionCountry | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select country\">expand_more</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('country').invalid\">Please select country\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-slide-toggle fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n\t\t\t\t(change)=\"updateStatus($event)\" #toggleElement>\r\n\t\t\t\t{{status ? 'Active' : 'Inactive'}}\r\n\t\t\t</mat-slide-toggle>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n\t\t\t<button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n\t\t\t<button mat-raised-button color=\"warn\" class=\"mr-8\" type=\"button\"\r\n\t\t\t\trouterLink=\"/manageGeographics/manageState/list\">Cancel</button>\r\n\t\t</div>\r\n\t</form>\r\n</div>","import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { ManageStateCrudComponent } from './manage-state-crud/manage-state-crud.component';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ManageStateRoutingModule } from './manage-state-routing.module';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nconst COMPONENTS =[ManageStateCrudComponent, CreateComponent, ListComponent];\r\nconst COMPONENTS_DYNAMIC =[ActionDialogComponent,ViewDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, ManageStateRoutingModule,FuseSharedModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class ManageStateModule{}","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { DatePipe } from '@angular/common';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport {CountryService} from 'app/shared/services/geographics/country.service';\r\nimport {StateService} from 'app/shared/services/geographics/state.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n} \r\n@Component({\r\n  selector: 'app-view-dialog',\r\n  templateUrl: './view-dialog.component.html',\r\n  styleUrls: ['./view-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\nexport class ViewDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  status = false;\r\n  countries :any;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n\r\n  constructor(private fb: FormBuilder,private stateService: StateService,private countryService:CountryService, private snackBar: MatSnackBar,private datePipe: DatePipe,\r\n              public dialogRef: MatDialogRef<ViewDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n    this.getCountry();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      name:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      country :['',[autocompleteObjectValidator(),Validators.required]],\r\n      status : this.status == true ? 'Y' : 'N'\r\n     });\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n  onYesClick(){\r\n    let formValues = this.form.value;\r\n    \r\n    const params: any = {\r\n\r\n      name :formValues.name, \r\n        description :formValues.description, \r\n        country_id:formValues.country.id,\r\n        status :  this.status == true ? 'Y' : 'N', \r\n        modify_by : this.localStorage.userId,\r\n  // tslint:disable-next-line: semicolon\r\n  }\r\n// tslint:disable-next-line: no-//\r\n\r\n    if (this.isEditMode){\r\n    params.id = this.params.data.id,\r\n    params.modify_by = this.localStorage.userId;\r\n  } else{\r\n    params.created_by = this.localStorage.userId;\r\n  }\r\n\r\n    if (this.isEditMode){\r\n    this.stateService.update(params).subscribe(\r\n      (stateData: any ) => {\r\n        if(stateData.status == true){\r\n          this.snackBar.open('Record updated successfully!', 'Dismiss', { duration: 5000 });\r\n          this.dialogRef.close();\r\n        }else{\r\n          this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          this.dialogRef.close();\r\n        }\r\n       \r\n      },\r\n      (err) => {\r\n        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n  }else{\r\n    this.stateService.create(params).subscribe(\r\n      (data: any ) => {\r\n        this.snackBar.open('Rfid created!', 'Dismiss', { duration: 5000 });\r\n        this.dialogRef.close();\r\n      },\r\n      (err) => {\r\n        this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n    this.dialogRef.close(params);\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    this.form.get('country').setValue(params.data.country_id);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n  }\r\n\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n  getCountry(){\r\n    this.countryService.getAllCountry().subscribe(\r\n      (data:any)=>{\r\n        this.countries = data;\r\n        if(this.isEditMode){\r\n          //;\r\n          const toSelect = this.countries.find(c => c.id == this.params.data.country_id);\r\n          this.form.get('country').setValue(toSelect);\r\n         \r\n          this.filteredOptionCountry = this.form.controls.country.valueChanges\r\n           .pipe(\r\n             startWith(''),\r\n             map(value => typeof value === 'string' ? value : value.name),\r\n             map(name => name ? this._filterCountry(name) : this.countries)\r\n           );\r\n        }\r\n         \r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  displayCountry(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCountry(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.countries.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n  \r\n<mat-toolbar class=\"action_toolbar\">Manage State</mat-toolbar>\r\n<div style=\"padding:24px\">\r\n  <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n    <form [formGroup]=\"form\" class=\" mat-elevation-z4 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n      name=\"form\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label> Name</mat-label>\r\n          <input matInput placeholder=\"\" formControlName=\"name\" maxlength=\"100\" readonly autocomplete=\"off\">\r\n          <mat-error *ngIf=\"form.get('name').hasError('required')\"> Name is required</mat-error>\r\n          <mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Description</mat-label>\r\n          <input matInput placeholder=\"\" readonly autocomplete=\"off\" maxlength=\"100\" autocomplete=\"off\"\r\n            formControlName=\"description\">\r\n          <mat-error *ngIf=\"form.get('description').hasError('required')\">Description required</mat-error>\r\n          <mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed</mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Country</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"country\" autocomplete=\"off\" [matAutocomplete]=\"countryAuto\"\r\n            readonly>\r\n          <mat-autocomplete #countryAuto=\"matAutocomplete\" [displayWith]=\"displayCountry\">\r\n            <mat-option *ngFor=\"let option of filteredOptionCountry | async\" [value]=\"option\">\r\n              {{option.name}}\r\n            </mat-option>\r\n          </mat-autocomplete>\r\n            <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n          <mat-error *ngIf=\"form.get('country').invalid\">Please select country\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-slide-toggle fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n          (change)=\"updateStatus($event)\" disabled=\"true\" #toggleElement>\r\n          {{status ? 'Active' : 'Inactive'}}\r\n        </mat-slide-toggle>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n        <!-- <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\"\r\n                         (click)=\"onYesClick()\">{{isEditMode ? 'Save' : 'Save'}}</button> -->\r\n        <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>","import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ManageStateCrudComponent } from './manage-state-crud/manage-state-crud.component';\r\nimport { TABS_DEMO_ROUTES } from './manage-state-crud/routes';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : '',component : ManageStateCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    }\r\n    \r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class ManageStateRoutingModule{}","\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog,MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport {StateService} from 'app/shared/services/geographics/state.service';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport { ViewDialogComponent } from '../view-dialog/view-dialog.component';\r\nimport {FuseConfirmDialogComponent} from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\nexport class ManageState {\r\n name:string;\r\n description:string;\r\n country:string;\r\n status:string;\r\n statusString:string;\r\n country_name:string; \r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n  \r\n})\r\nexport class ListComponent implements OnInit {\r\n \r\n  displayedColumns: string[] = [ 'name', 'description','country','status','action'];\r\n  head = [['State Name','Description','Country','Status ']];\r\n  dataSource: MatTableDataSource<ManageState>;\r\n\r\n  manageStates : ManageState[];\r\n  filterEntity: ManageState;\r\n  filterType: MatTableFilter;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  nameSearch = false;\r\n  descriptionSearch = false;\r\n  iso_codeSearch = false;\r\n  countrySearch = false;\r\n  statusStringSearch = false;\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  exportedData: any[];\r\n  localStorage : any;\r\n  constructor(private stateService : StateService,public dialog : MatDialog,\r\n    private snackBar : MatSnackBar) {\r\n    // Create 100 users\r\n    // const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\r\n\r\n    // Assign the data to the data source for the table to render\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getAllState();\r\n    this.filterEntity = new ManageState();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails')); \r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getAllState(){\r\n    this.stateService.getAllStates().subscribe(\r\n      (stateData:any)=>{\r\n        this.manageStates = stateData.data;\r\n        for(var i=0; i < this.manageStates.length;i++){\r\n          if(this.manageStates[i].status == 'N'){\r\n            this.manageStates[i].statusString = 'Inactive';\r\n          }else{\r\n            this.manageStates[i].statusString = 'Active';\r\n          }\r\n          \r\n         \r\n        }\r\n        this.dataSource = new MatTableDataSource(this.manageStates);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id){\r\n    this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n      disableClose: true\r\n  });\r\n\r\n  //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n\r\n  this.confirmDialogRef.afterClosed().subscribe(result => {\r\n      if ( result )\r\n      {\r\n        this.stateService.delete(id, this.localStorage.userId).subscribe(\r\n          (data:any)=>{\r\n              if(data.status = true){\r\n                this.getAllState();\r\n            this.snackBar.open('Deleted successfully','Dismiss',{duration:2000});\r\n              }else{\r\n                this.getAllState();\r\n                this.snackBar.open('Error while saving data','Dismiss',{duration:2000});\r\n              }\r\n            \r\n          },(err)=>{\r\n            \r\n          }\r\n        )\r\n      }\r\n      this.confirmDialogRef = null;\r\n  });\r\n   \r\n  }\r\n\r\n\r\n  openDialog(action,data): void {\r\n    \r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '800px',\r\n      data: params,\r\n      autoFocus: false,\r\n      panelClass: 'app-action-dialog', \r\n      disableClose: true    \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getAllState();\r\n    });\r\n  }\r\n  viewDialog(action,data) : void{\r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n      width: '800px',\r\n      data: params,\r\n      panelClass: 'app-action-dialog',\r\n      autoFocus: false,\r\n      disableClose: true    \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getAllState();\r\n    });\r\n  }\r\n  changeVisibility(visibleOption){\r\n   \r\n    if(visibleOption == 'nameSearch'){\r\n      this.nameSearch = !this.nameSearch;\r\n      this.filterEntity.name = '';\r\n    }\r\n    \r\n    \r\n    if(visibleOption == 'descriptionSearch'){\r\n      this.descriptionSearch = !this.descriptionSearch;\r\n      this.filterEntity.description = '';\r\n    }\r\n    \r\n    \r\n    if(visibleOption == 'countrySearch'){\r\n      this.countrySearch = !this.countrySearch;\r\n      this.filterEntity.country = '';\r\n    }\r\n    if(visibleOption == 'statusStringSearch'){\r\n      this.statusStringSearch = !this.statusStringSearch;\r\n      this.filterEntity.statusString = '';\r\n    }\r\n   \r\n   }\r\n   \r\n   tableExport()\r\n   {\r\n     this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n       var stateModel = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = {'State Name':stateModel.name,'Description':stateModel.description,\r\n                  'Country': stateModel.country_name,'Status ':stateModel.statusString};\r\n      this.exportedData.push(data);\r\n    }\r\n     const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n       const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n       XLSX.utils.book_append_sheet(workBook, workSheet, 'Manage State');\r\n       XLSX.writeFile(workBook, 'Manage State.xlsx');\r\n     //XLSX.writeFileAsync('OCPP Logs.xlsx',workBook, this.cb)\r\n      //this.preloader.close();\r\n   }\r\n\r\n   pdfExport(){\r\n   \r\n    var doc = new jsPDF({ // set needed dimensions for any elemen\r\n      \r\n    });\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chrger = this.dataSource.filteredData[i];\r\n     //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n     //statusString: `statusString${i}`});\r\n     var data =[chrger.name,chrger.description,chrger.country_name,chrger.statusString] ;\r\n     \r\n     this.exportedData.push(data);\r\n   }\r\n   var img = new Image();\r\n   var imgRight = new Image();\r\n    var src = 'assets/images/logos/logo_sparkev_main.png';\r\n    var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n   imgRight.src =srcSparkEV;\r\n   var createdDate = new Date().toLocaleString(('en-GB'));\r\n   img.src = src;\r\n   doc.setFontSize(11);\r\n   doc.setTextColor(100);\r\n   doc.setFontSize(18);\r\n   \r\n    (doc as any).autoTable({\r\n      head: this.head,\r\n      body: this.exportedData,\r\n      theme: 'grid',\r\n      headStyles: { fontStyle: 'majalla',fillColor:[11, 148, 68]},\r\n      styles: {\r\n        cellPadding: 1,\r\n        fontSize: 8,\r\n        \r\n      },\r\n     \r\n      margin: { top: 22 },\r\n      didDrawCell: data => {\r\n      },\r\n      didDrawPage:data=>{\r\n        doc.addImage(img , 15, 7, 15, 6);\r\n        doc.addImage(imgRight, 170, 7, 25, 6);\r\n        \r\n        doc.text('Manage State Report' ,doc.internal.pageSize.getWidth() / 2, 11, { align: 'center'});\r\n        \r\n        doc.setTextColor(211,211,211);\r\n        doc.setFontSize(60);\r\n        doc.setGState( doc.GState({opacity: 0.6}));\r\n        doc.text('Confidential/Not for Public use',25,285,null,60, );\r\n        doc.setGState( doc.GState({opacity: 1}));\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(9);\r\n        doc.text('Date:'+ createdDate ,15, 18);\r\n        \r\n        doc.text('Generated By:'+ this.localStorage.f_Name ,195, 18,{ align: 'right'});\r\n        doc = this.addWaterMark(doc);\r\n      }\r\n    })\r\n  \r\n    // below line for Open PDF document in new tab\r\n    doc.output('dataurlnewwindow');\r\n    // below line for Download PDF document  \r\n    doc.save('Manage State report.pdf');\r\n   \r\n  }\r\n  addWaterMark(doc){\r\n    var newpage = doc.getNumberOfPages();\r\n    const i = doc.internal.getNumberOfPages();\r\n    doc.setTextColor(100);\r\n        doc.setFontSize(10);\r\n     //Print Page 1 of 4 for example\r\n     \r\n     doc.text('Page ' +  String(i) + ' of ' + String(newpage),210-20,297-10,null,null,\"right\");\r\n    return doc;\r\n  \r\n  }\r\n}\r\n\r\n","<!--mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"\" #input autocomplete=\"password\">\r\n</mat-form-field-->\r\n<div style=\"text-align: left ;\r\nmargin-left: 10px;\r\nmargin-bottom:10px;margin-top: 10px;\">\r\n   <button mat-mini-fab  color=\"primary\" (click)=\"tableExport()\"  matTooltip=\"Excel Download\">\r\n    <mat-icon>sim_card_download</mat-icon> \r\n  </button>&nbsp;&nbsp;\r\n  <button mat-mini-fab  color=\"primary\" (click)=\"pdfExport()\"  matTooltip=\"PDF Download\">\r\n    <mat-icon>picture_as_pdf</mat-icon> \r\n  </button>\r\n  \r\n    <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n</div>\r\n<div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\">\r\n\r\n        <div class=\"mat-elevation-z8\">\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\" [exampleEntity]=\"filterEntity\"\r\n                [filterType]=\"filterType\" matSort class=\"mat-elevation-z8\">\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!nameSearch\" class=\"custom_font_size\" style=\"display: flex;\"> State Name &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch')\">search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"nameSearch\" appearance=\"outline\" style=\"width: 250px\" class=\"list_input\">\r\n                            <input matInput placeholder=\"State Name\" [(ngModel)]=\"filterEntity.name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch')\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"description\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!descriptionSearch\" class=\"custom_font_size\" style=\"display: flex;\">Description\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('descriptionSearch')\">search\r\n                            </mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"descriptionSearch\" appearance=\"outline\" style=\"width: 250px\"\r\n                            class=\"list_input\">\r\n                            <input matInput placeholder=\"Description\" [(ngModel)]=\"filterEntity.description\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('descriptionSearch')\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.description}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"country\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!countrySearch\" class=\"custom_font_size\" style=\"display: flex;\">Country\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('countrySearch')\">search\r\n                            </mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"countrySearch\" appearance=\"outline\" style=\"width: 250px;\"\r\n                            class=\"list_input\">\r\n                            <input matInput placeholder=\"Country\" [(ngModel)]=\"filterEntity.country\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('countrySearch')\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.country_name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!statusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Status &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch')\">search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\" style=\"width: 100px;\"\r\n                            class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch')\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <span class=\"custom_font_size\">Action</span>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        <mat-icon color=\"primary\" matTooltip=\"View\" (click)=\"viewDialog('VIEW',element)\"\r\n                            style=\"cursor:pointer\">visibility</mat-icon>&nbsp;&nbsp;\r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" (click)=\"openDialog('EDIT',element)\"\r\n                            style=\"cursor:pointer\">edit</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"delete(element.id)\" style=\"cursor:pointer\">\r\n                            delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n\r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { DatePipe } from '@angular/common';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport {CountryService} from 'app/shared/services/geographics/country.service';\r\nimport {StateService} from 'app/shared/services/geographics/state.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n} \r\n@Component({\r\n  selector: 'app-action-dialog',\r\n  templateUrl: './action-dialog.component.html',\r\n  styleUrls: ['./action-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  status = false;\r\n  countries :any;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  errorMsg:String;\r\n  splitted:String;\r\n  constructor(private fb: FormBuilder,private stateService: StateService,private countryService:CountryService, private snackBar: MatSnackBar,private datePipe: DatePipe,\r\n              public dialogRef: MatDialogRef<ActionDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n    this.getCountry();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      name:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      country :['',[autocompleteObjectValidator(),Validators.required]],\r\n      status : this.status == true ? 'Y' : 'N'\r\n     });\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n  onYesClick(){\r\n    let formValues = this.form.value;\r\n    \r\n    const params: any = {\r\n\r\n      name :formValues.name, \r\n        description :formValues.description, \r\n        country_id:formValues.country.id,\r\n        status :  this.status == true ? 'Y' : 'N', \r\n        modify_by : this.localStorage.userId,\r\n  // tslint:disable-next-line: semicolon\r\n  }\r\n// tslint:disable-next-line: no-//\r\n\r\n    if (this.isEditMode){\r\n    params.id = this.params.data.id,\r\n    params.modify_by = this.localStorage.userId;\r\n  } else{\r\n    params.created_by = this.localStorage.userId;\r\n  }\r\n\r\n    if (this.isEditMode){\r\n    this.stateService.update(params).subscribe(\r\n      (stateData: any ) => {\r\n        if(stateData.status == true){\r\n          this.snackBar.open('Record updated successfully!', 'Dismiss', { duration: 5000 });\r\n          this.dialogRef.close();\r\n        }else{\r\n          if(stateData.err_code == \"ERROR : ER_DUP_ENTRY\"){\r\n            this. errorMsg = stateData.message;\r\n            var index=  this. errorMsg.lastIndexOf(\" \");\r\n            \r\n            this.splitted = this. errorMsg.substring(index+1); \r\n            if(this.splitted == \"'country_id'\" ){\r\n              this.snackBar.open(MessageConstant.nameDuplicateState, 'Dismiss', { duration: 5000 });\r\n            }\r\n          }else{\r\n            this.snackBar.open(stateData.message, 'Dismiss', { duration: 5000 });\r\n          }\r\n         // this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n         // this.dialogRef.close();\r\n        }\r\n       \r\n      },\r\n      (err) => {\r\n        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n  }else{\r\n    this.stateService.create(params).subscribe(\r\n      (data: any ) => {\r\n        this.snackBar.open('Rfid created!', 'Dismiss', { duration: 5000 });\r\n        this.dialogRef.close();\r\n      },\r\n      (err) => {\r\n        this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n    this.dialogRef.close(params);\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    this.form.get('country').setValue(params.data.country_id);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n  }\r\n\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n  getCountry(){\r\n    this.countryService.getAllCountry().subscribe(\r\n      (data:any)=>{\r\n        this.countries = data;\r\n        if(this.isEditMode){\r\n          //;\r\n          const toSelect = this.countries.find(c => c.id == this.params.data.country_id);\r\n          this.form.get('country').setValue(toSelect);\r\n         \r\n          this.filteredOptionCountry = this.form.controls.country.valueChanges\r\n           .pipe(\r\n             startWith(''),\r\n             map(value => typeof value === 'string' ? value : value.name),\r\n             map(name => name ? this._filterCountry(name) : this.countries)\r\n           );\r\n        }\r\n         \r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  displayCountry(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCountry(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.countries.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  // onCountryChange(event){\r\n  //   this.getCountry();\r\n  //   this.form.get('name').setValue('');\r\n  //   this.form.get('description').setValue('');\r\n  // }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n  \r\n<mat-toolbar class=\"action_toolbar\">Manage State</mat-toolbar>\r\n<div style=\"padding:24px\">\r\n  <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n    <form [formGroup]=\"form\" class=\" mat-elevation-z4 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n      name=\"form\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label> Name</mat-label>\r\n          <input matInput placeholder=\"\" formControlName=\"name\" maxlength=\"100\" required autocomplete=\"off\">\r\n          <mat-error *ngIf=\"form.get('name').hasError('required')\"> Name is required</mat-error>\r\n          <mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Description</mat-label>\r\n          <input matInput placeholder=\"\" required autocomplete=\"off\" maxlength=\"100\" autocomplete=\"off\"\r\n            formControlName=\"description\">\r\n          <mat-error *ngIf=\"form.get('description').hasError('required')\">Description required</mat-error>\r\n          <mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed</mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Country</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"country\" autocomplete=\"off\" [matAutocomplete]=\"countryAuto\"\r\n            required>\r\n          <mat-autocomplete #countryAuto=\"matAutocomplete\" [displayWith]=\"displayCountry\">\r\n            <mat-option *ngFor=\"let option of filteredOptionCountry | async\" [value]=\"option\">\r\n              {{option.name}}\r\n            </mat-option>\r\n          </mat-autocomplete>\r\n            <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select country\">expand_more</mat-icon>\r\n          <mat-error *ngIf=\"form.get('country').invalid\">Please select country\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-slide-toggle fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n          (change)=\"updateStatus($event)\" #toggleElement>\r\n          {{status ? 'Active' : 'Inactive'}}\r\n        </mat-slide-toggle>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n        <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"onYesClick()\">{{isEditMode ?\r\n          'Save' : 'Save'}}</button>\r\n        <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>"]}