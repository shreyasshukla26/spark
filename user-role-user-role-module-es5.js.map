{"version":3,"sources":["webpack:///src/app/main/user-management/user-role/user-role-crud/user-role-crud.component.ts","webpack:///src/app/main/user-management/user-role/user-role-crud/user-role-crud.component.html","webpack:///src/app/main/user-management/user-role/view-dialog/view-dialog.component.ts","webpack:///src/app/main/user-management/user-role/view-dialog/view-dialog.component.html","webpack:///src/app/shared/services/user/user-role.service.ts","webpack:///src/app/main/user-management/user-role/user-role.module.ts","webpack:///src/app/main/user-management/user-role/user-role-crud/routes.ts","webpack:///src/app/main/user-management/user-role/action-dialog/action-dialog.component.ts","webpack:///src/app/main/user-management/user-role/action-dialog/action-dialog.component.html","webpack:///src/app/main/user-management/user-role/create/create.component.ts","webpack:///src/app/main/user-management/user-role/create/create.component.html","webpack:///src/app/main/user-management/user-role/list/list.component.ts","webpack:///src/app/main/user-management/user-role/list/list.component.html","webpack:///src/app/main/user-management/user-role/user-role-routing.module.ts"],"names":["UserRoleCrudComponent","router","cdr","_utilityService","tabLinks","tempLinks","localStorage","JSON","parse","getItem","nav_list","nav_list_with_tab","filter","x","id","objectData","children","undefined","y","objectChildData","z","isDefaultRoutePermeted","push","label","link","navigate","activeMenuItems$","subscribe","menuItemSelecte","menuArray","title","detectChanges","selector","templateUrl","styleUrls","encapsulation","None","animations","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","autocompleteObjectValidator","control","value","ViewDialogComponent","fb","roleService","snackBar","clientService","dialogRef","data","userService","userRoleService","isEditMode","status","initialize","params","action","form","group","client","required","userList","roleList","defaultRole","getClients","getUserList","client_id","getDefaultRole","assignValues","close","valid","formValues","user_id","roles","radiobuttonList","map","v","role_id","map_id","create_date","created_date","create_by","createdby","modify_date","modify_by","modifyby","default_role","userId","created_by","userRoleMapping","open","recordUpdateMessage","duration","err","errorMessage","create","chargerNCreate","get","hasError","map_status","event","checked","ref","getActiveClientsCW","clients","toSelect","find","c","setValue","filteredOptionsClient","controls","valueChanges","pipe","name","_filterClientModels","item","filterValue","toLowerCase","option","includes","getActiveUsersByClient","resp","users","filteredOptionsUser","username","_filterUserModels","e","i","length","user","getRoleListWithRolesAssignedToUserCW","project_id","selectedList","userRole","closeActionPanel","onClientChange","onUserChange","onRoleChange","updateStatus","UserRoleService","http","apiUrl2","API_URL2","post","providedIn","COMPONENTS","COMPONENTS_DYNAMIC","UserRoleModule","imports","declarations","entryComponents","TABS_DEMO_ROUTES","path","component","canActivate","redirectTo","pathMatch","ActionDialogComponent","k","onYesClick","CreateComponent","currentCheckedValue","userRoleAssign","onSubmit","Role","ListComponent","dialog","displayedColumns","head","clientSearch","roleSearch","nameSearch","defaultSearch","statusSearch","previousUserID","getUserRoleMappingCW","filterEntity","filterType","ANYWHERE","target","dataSource","trim","paginator","firstPage","statusString","roleString","role_name","result","arr","props","Map","entry","join","values","newArr","sort","NoRecordFoundMessage","confirmDialogRef","disableClose","afterClosed","deleteUserRoleMapping","deleteMessage","message","width","autoFocus","panelClass","visibleOption","ev","stopPropagation","client_name","role","exportedData","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","doc","filteredData","chrger","img","Image","imgRight","src","srcSparkEV","createdDate","Date","toLocaleString","setFontSize","setTextColor","autoTable","body","theme","headStyles","fontStyle","fillColor","styles","cellPadding","fontSize","margin","top","didDrawCell","didDrawPage","addImage","text","internal","pageSize","getWidth","align","setGState","GState","opacity","f_Name","addWaterMark","output","save","newpage","getNumberOfPages","String","tableExport","pdfExport","routes","UserRoleRoutingModule","forChild","exports"],"mappings":"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","file":"user-role-user-role-module-es5.js","sourcesContent":["\r\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-user-role-crud',\r\n  templateUrl: './user-role-crud.component.html',\r\n  styleUrls: ['./user-role-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class UserRoleCrudComponent implements OnInit {\r\n  // Nav bar demo\r\n  tabLinks = [\r\n    // { label: 'List', link: 'list' },\r\n    // { label: 'Assign Role', link: 'create' }\r\n  ];\r\n  menuArray: any;\r\n  localStorage: any;\r\n  objectData: any;\r\n  objectChildData: any;\r\n  tempLinks = [];\r\n  childData: any;\r\n  constructor(private router: Router, private cdr: ChangeDetectorRef, private _utilityService: UtilityService) {\r\n\r\n  }\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    let nav_list = this.localStorage.nav_list_with_tab;\r\n    nav_list.filter((x) => {\r\n      if (x.id === \"userManagement\") {\r\n        this.objectData = x;\r\n        if (this.objectData.children != null && this.objectData.children != undefined) {\r\n          this.objectData.children.filter((y) => {\r\n            if (y.id === \"userRole\") {\r\n              this.objectChildData = y;\r\n              if (this.objectChildData.children != undefined && this.objectChildData.children != null) {\r\n                this.objectChildData.children.filter((z) => {\r\n                  let isDefaultRoutePermeted = false;\r\n                  if (z.id === \"list\") {\r\n                    isDefaultRoutePermeted = true;\r\n                    this.tempLinks.push({ label: 'User Role', link: 'list' });\r\n                  }\r\n                  if (z.id === \"assignRole\") {\r\n                    this.tempLinks.push({ label: 'Assign Role', link: 'create' });\r\n                  }\r\n                  this.tabLinks = this.tempLinks;\r\n                  if (!isDefaultRoutePermeted) {\r\n                    this.router.navigate(['/userManagement/user-role/crud/' + this.tempLinks[0].link]);\r\n                  }\r\n                });\r\n              }\r\n\r\n\r\n            }\r\n\r\n          });\r\n        }\r\n\r\n      }\r\n    });\r\n  }\r\n  ngAfterViewInit() {\r\n    this._utilityService.activeMenuItems$.subscribe(menuItemSelecte => {\r\n      this.menuArray = menuItemSelecte;\r\n      if (this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined) {\r\n        this.menuArray = JSON.parse(localStorage.getItem('activeMenuItems'));\r\n      }\r\n      this.cdr.detectChanges();\r\n    })\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent { }\r\n\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0 \" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\"> {{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { RoleService } from 'app/shared/services/user/role.service';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport { UserService } from 'app/shared/services/user/user.service';\r\nimport { UserRoleService } from 'app/shared/services/user/user-role.service';\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n        if (typeof control.value === 'string') {\r\n            return { 'invalidAutocompleteObject': { value: control.value } }\r\n        }\r\n        return null  /* valid option selected */\r\n    }\r\n}\r\n@Component({\r\n    selector: 'app-view-dialog',\r\n    templateUrl: './view-dialog.component.html',\r\n    styleUrls: ['./view-dialog.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations\r\n})\r\nexport class ViewDialogComponent implements OnInit {\r\n    params: any;\r\n    isEditMode = false;\r\n    form: FormGroup;\r\n    localStorage: any;\r\n    filteredOptionsClient: Observable<any[]>;\r\n    filteredOptionsUser: Observable<any[]>;\r\n    filteredOptionsRole: Observable<any[]>;\r\n    clients: any;\r\n    users: any;\r\n    roles: any;\r\n    default_role: any;\r\n    status = false;\r\n    @ViewChild(\"toggleElement\") ref: any;\r\n    messageConstant: MessageConstant;\r\n    radiobuttonList: any;\r\n    constructor(private fb: FormBuilder, private roleService: RoleService, private snackBar: MatSnackBar, private clientService: ClientService,\r\n        public dialogRef: MatDialogRef<ViewDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData,\r\n        private userService: UserService, private userRoleService: UserRoleService) { }\r\n\r\n    ngOnInit() {\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n        this.params = this.data;\r\n        this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n        this.form = this.fb.group({\r\n            client: ['', [autocompleteObjectValidator(), Validators.required]],\r\n            userList: ['', [autocompleteObjectValidator(), Validators.required]],\r\n            roleList: ['', [Validators.required]],\r\n            defaultRole: ['', [Validators.required]],\r\n        });\r\n        this.getClients();\r\n        this.getUserList(this.params.data.client_id);\r\n        // this.getRoleList();\r\n        this.getDefaultRole();\r\n\r\n        if (this.isEditMode) {\r\n            this.assignValues(this.params);\r\n        }\r\n\r\n    }\r\n\r\n    close() {\r\n        this.dialogRef.close();\r\n    }\r\n    closeActionPanel(){\r\n        this.dialogRef.close();\r\n      }\r\n    \r\n\r\n    onYesClick() {\r\n        if (this.form.valid) {\r\n            let formValues = this.form.value;\r\n            const params: any = {\r\n                user_id: formValues.userList.id,\r\n                //roles: formValues.roleList,\r\n                //defaultrole: formValues.defaultRole,\r\n                // roles:formValues.roleList.map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : v.default_role })),\r\n                roles: this.radiobuttonList.map(v => ({ role_id: v.id, map_id: v.map_id, create_date: v.created_date, create_by: v.createdby, modify_date: v.modify_date, modify_by: v.modifyby, default_role: v.default_role })),\r\n                status: this.status == true ? 'Y' : 'N',\r\n                // tslint:disable-next-line: semicolon\r\n            }\r\n            // tslint:disable-next-line: no-//\r\n\r\n            if (this.isEditMode) {\r\n                params.id = this.params.data.id,\r\n                    params.modify_by = this.localStorage.userId;\r\n            } else {\r\n                params.created_by = this.localStorage.userId;\r\n            }\r\n\r\n            if (this.isEditMode) {\r\n\r\n                this.userRoleService.userRoleMapping(params).subscribe(\r\n                    (data: any) => {\r\n                        this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n                        this.dialogRef.close();\r\n                    },\r\n                    (err) => {\r\n                        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n                    }\r\n                )\r\n            } else {\r\n                this.roleService.create(params).subscribe(\r\n                    (data: any) => {\r\n                        this.snackBar.open(MessageConstant.chargerNCreate, 'Dismiss', { duration: 5000 });\r\n                        this.dialogRef.close();\r\n                    }, (err) => {\r\n                        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n                    }\r\n                )\r\n            }\r\n            this.dialogRef.close(params);\r\n        }\r\n        return;\r\n    }\r\n\r\n    getErrorMessage(form: FormGroup) {\r\n        return form.get('email').hasError('required')\r\n            ? 'You must enter a value'\r\n            : form.get('email').hasError('email')\r\n                ? 'Not a valid email'\r\n                : '';\r\n    }\r\n\r\n    assignValues(params) {\r\n        //this.form.get('client').setValue(params.data.client_id);\r\n        // this.form.get('userList').setValue(params.data.userlist);\r\n        // this.form.get('roleList').setValue(params.data.roleList);\r\n        this.status = params.data.map_status == 'Y' ? true : false;\r\n    }\r\n\r\n    updateStatus(event) {\r\n        this.status = event.checked;\r\n        this.ref.checked = this.status;\r\n    }\r\n\r\n    getClients() {\r\n        this.clientService.getActiveClientsCW(this.localStorage.userId).subscribe(\r\n            (data: any) => {\r\n                this.clients = data;\r\n                if (this.isEditMode) {\r\n                    const toSelect = this.clients.find(c => c.id == this.params.data.client_id);\r\n                    this.form.get('client').setValue(toSelect);\r\n                }\r\n                this.filteredOptionsClient = this.form.controls.client.valueChanges\r\n                    .pipe(\r\n                        startWith(''),\r\n                        map(value => typeof value === 'string' ? value : value.name),\r\n                        map(name => name ? this._filterClientModels(name) : this.clients)\r\n                    );\r\n            }, (err) => {\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    displayClient(item: any): string {\r\n        return item && item.name ? item.name : '';\r\n    }\r\n\r\n    private _filterClientModels(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.clients.filter(option => option.name.toLowerCase().includes(filterValue));\r\n    }\r\n    onClientChange(client){\r\n        this.getUserList(client.id);\r\n    }\r\n    getUserList(id) {\r\n        this.userRoleService.getActiveUsersByClient(id).subscribe(\r\n            (resp: any) => {\r\n                this.users = resp.data;\r\n                if (this.isEditMode) {\r\n                    const toSelect = this.users.find(c => c.id == this.params.data.user_id);\r\n                    this.form.get('userList').setValue(toSelect);\r\n                }\r\n                this.filteredOptionsUser = this.form.controls.userList.valueChanges\r\n                    .pipe(\r\n                        startWith(''),\r\n                        map(value => typeof value === 'string' ? value : value.username),\r\n                        map(username => username ? this._filterUserModels(username) : this.users)\r\n                    );\r\n            }, (err) => {\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    private _filterUserModels(username: string): any[] {\r\n        const filterValue = username.toLowerCase();\r\n        return this.users.filter(option => option.username.toLowerCase().includes(filterValue));\r\n    }\r\n\r\n    displayUser(item: any): string {\r\n        return item && item.username ? item.username : '';\r\n    }\r\n\r\n    // getRoleList() {\r\n    //   this.roleService.getActiveRoles(this.params.user_id, this.localStorage.project_id).subscribe(\r\n    //     (resp: any) => {\r\n    //       this.roles = resp.data;\r\n    //       if(this.isEditMode){\r\n    //         const toSelect= this.roles.find(c=> c.id == this.params.data.rolelist);\r\n    //         var selectedList = [];\r\n    //         for (let i = 0; i < this.roles.length; i++) {\r\n    //           var role = this.roles[i];\r\n    //           if (role.id != null && role.id != undefined) {\r\n    //           selectedList.push(role);\r\n    //          }\r\n    //       }\r\n    //       this.form.get('roleList').setValue(role);\r\n    //       }\r\n\r\n    //     }, (err) => {\r\n\r\n    //     }\r\n    //   )\r\n    // }\r\n    onRoleChange(event) {\r\n        this.radiobuttonList = event.value;\r\n    }\r\n\r\n    radioChange(e) {\r\n        for (var i = 0; i < this.radiobuttonList.length; i++) {\r\n            if (e.value == this.radiobuttonList[i].id) {\r\n                this.radiobuttonList[i].default_role = 'Y'\r\n                //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'Y' }))\r\n            } else {\r\n                this.radiobuttonList[i].default_role = 'N'\r\n                //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'N' }))\r\n            }\r\n        }\r\n    }\r\n    onUserChange(user) {\r\n        this.userRoleService.getRoleListWithRolesAssignedToUserCW(this.localStorage.client_id, user.id, this.localStorage.project_id).subscribe(\r\n            (resp: any) => {\r\n                if (resp.status != 'false') {\r\n                    this.roles = resp.data;\r\n                    // for (var k = 0; k < this.roles.length; k++) {\r\n                    //     if (this.roles[k].default_role == 'Y') {\r\n                    //         this.roles[k].selected_role == true\r\n                    //         //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'Y' }))\r\n                    //     } else {\r\n                    //         this.roles[k].selected_role == false\r\n                    //         //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'N' }))\r\n                    //     }\r\n                    // }\r\n                    var selectedList = [];\r\n                    for (let i = 0; i < this.roles.length; i++) {\r\n\r\n                        var userRole = this.roles[i];\r\n                        if (userRole.map_id != null && userRole.map_id != undefined) {\r\n                            selectedList.push(userRole);\r\n                        }\r\n\r\n                    }\r\n                    this.form.get('roleList').setValue(selectedList);\r\n                    // for (var k = 0; k < selectedList.length; k++) {\r\n                    //     // if (selectedList[k].default_role == 'Y') {\r\n                    //     //     selectedList[k].default_role = true\r\n                    //     //     //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'Y' }))\r\n                    //     // } else {\r\n                    //     //     selectedList[k].default_role = false\r\n                    //     //     //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'N' }))\r\n                    //     // }\r\n                    // }\r\n                    this.radiobuttonList = selectedList;\r\n                    // this.onRoleChange(selectedList);\r\n                    // this.roles = resp.data;\r\n                    // var selectedList = [];\r\n                    // for (var i = 0; i < this.roles.length; i++) {\r\n                    //     if (this.roles[i].map_id != null && this.roles[i].map_id != undefined) {\r\n                    //         selectedList.push(this.roles);\r\n                    //     }\r\n                    // }\r\n                    // this.form.get('roleList').setValue(selectedList);\r\n                    // //this.roles.setValue(selectedList);\r\n                }\r\n            }, (err) => {\r\n            }\r\n        )\r\n    }\r\n\r\n    getDefaultRole() {\r\n        this.userRoleService.getRoleListWithRolesAssignedToUserCW(this.params.data.client_id, this.params.data.user_id, this.localStorage.project_id).subscribe(\r\n            (resp: any) => {\r\n                if (resp.status != 'false') {\r\n                    this.roles = resp.data;\r\n                    var selectedList = [];\r\n                    for (let i = 0; i < this.roles.length; i++) {\r\n                        var userRole = this.roles[i];\r\n                        if (userRole.map_id != null && userRole.map_id != undefined) {\r\n                            selectedList.push(userRole);\r\n                        }\r\n                    }\r\n                    this.form.get('roleList').setValue(selectedList);\r\n                    this.radiobuttonList = selectedList;\r\n\r\n                }\r\n            }, (err) => {\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n  \r\n<mat-toolbar class=\"action_toolbar\">Manage User Role</mat-toolbar>\r\n<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n  <form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n    fxFlex=\"1 0 auto\" name=\"form\" style=\"padding-top:8px;\">\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n        <mat-label>Client</mat-label>\r\n        <input type=\"text\" matInput formControlName=\"client\"  autocomplete=\"off\" [matAutocomplete]=\"clientAuto\" readonly>\r\n        <mat-autocomplete #clientAuto=\"matAutocomplete\" [displayWith]=\"displayClient\"\r\n        (optionSelected)='onClientChange($event.option.value)'>\r\n          <mat-option *ngFor=\"let option of filteredOptionsClient | async\" [value]=\"option\">\r\n            {{option.name}}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n        <div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n          <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select Client Name\">account_circle</mat-icon>\r\n        </div>\r\n        <mat-error *ngIf=\"form.get('client').invalid\">Please select client </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n        <mat-label>Username</mat-label>\r\n        <input type=\"text\" matInput formControlName=\"userList\" autocomplete=\"off\" [matAutocomplete]=\"userListAuto\"\r\n        readonly style=\"text-transform: none;\">\r\n        <mat-autocomplete #userListAuto=\"matAutocomplete\" [displayWith]=\"displayUser\"\r\n        (optionSelected)='onUserChange($event.option.value)'>\r\n          <mat-option *ngFor=\"let option of filteredOptionsUser | async\" [value]=\"option\">\r\n            {{option.username}}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n        <div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n          <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select User\">account_circle</mat-icon>\r\n        </div>\r\n        <mat-error *ngIf=\"form.get('userList').hasError('required')\">Please select user</mat-error>\r\n        <!-- <mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special Character are not allowed</mat-error> -->\r\n      </mat-form-field>\r\n\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n      <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n        <mat-label>Role</mat-label>\r\n        <mat-select formControlName=\"roleList\" multiple (selectionChange)=\"onRoleChange($event)\" disabled = \"true\">\r\n            <mat-option *ngFor=\"let option of roles\" [value]=\"option\">\r\n                {{option.role_name}}\r\n            </mat-option>\r\n        </mat-select>\r\n        <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select Role\">help</mat-icon>\r\n        <!-- <mat-error *ngIf=\"form.get('rolelist').hasError('required')\">Please Select Role</mat-error> -->\r\n    </mat-form-field>\r\n\r\n      <div  fxFlex=\"50\" class=\"pr-4\">\r\n        <mat-radio-group aria-label=\"defaultRole\" formControlName=\"defaultRole\">\r\n            <mat-radio-button *ngFor=\"let radioButton of radiobuttonList\" [value]=\"radioButton.id\" disabled=\"true\"\r\n                name=\"roleRadio\" (change)=\"radioChange($event)\" [checked]=\"'Y' == radioButton.default_role ? true : false\">\r\n                {{radioButton.role_name}}&nbsp;&nbsp;\r\n            </mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n      <mat-slide-toggle style=\"padding-bottom:3.24\" style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\"\r\n        class=\"example-margin\" color=\"primary\" [checked]=\"status\"  disabled =\"true\" (change)=\"updateStatus($event)\" #toggleElement>\r\n        {{status ? 'Active' : 'Inactive'}}\r\n      </mat-slide-toggle>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-top:10px;\">\r\n      <button mat-raised-button color=\"accent\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n      <!-- <button mat-raised-button color=\"primary\" class=\"mr-8\" (click)=\"onYesClick()\">Save</button> -->\r\n    </div>\r\n\r\n  </form>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\n\r\nexport class UserRoleService {\r\n\r\n    apiUrl2 = `${environment.API_URL2}/user`;\r\n    constructor(private http: HttpClient) { }\r\n\r\n    // getUserRole(){\r\n    //   return this.http.get(`${this.apiUrl2}/getUserRoles`);\r\n    // }\r\n    userRoleMapping(params) {\r\n        return this.http.post(`${this.apiUrl2}/userRoleMapping/`, params);\r\n    }\r\n    udpate(params) {\r\n        return this.http.post(`${this.apiUrl2}/update/`, params);\r\n    }\r\n    deleteUserRoleMapping(id, userId) {\r\n        return this.http.delete(`${this.apiUrl2}/dlt/${id}/${userId}`)\r\n    }\r\n\r\n    getUserRoleMappingCW(id, project_id) {\r\n        return this.http.get(`${this.apiUrl2}/gtUserRoleMappingCW/${id}/${project_id}`);\r\n    }\r\n\r\n    getActiveUsersByClient(client_id) {\r\n        return this.http.get(`${this.apiUrl2}/gtActiveUsersByClient/${client_id}`);\r\n    }\r\n    getRoleListWithRolesAssignedToUserCW(client_id, user_id, project_id) {\r\n        return this.http.get(`${this.apiUrl2}/gtRoleListWithRolesAssignedToUserCW/${client_id}/${user_id}/${project_id}`);\r\n    }\r\n\r\n\r\n}","import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\n// import { ClientCrudComponent } from './client-crud/client-crud.component';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { UserRoleCrudComponent } from './user-role-crud/user-role-crud.component';\r\nimport { UserRoleRoutingModule } from './user-role-routing.module';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nconst COMPONENTS =[UserRoleCrudComponent, CreateComponent, ListComponent];\r\nconst COMPONENTS_DYNAMIC =[ActionDialogComponent,ViewDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, UserRoleRoutingModule,FuseSharedModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class UserRoleModule{}","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent , canActivate: [AuthGuard] },\r\n  { path : 'list', component : ListComponent , canActivate: [AuthGuard] },\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { RoleService } from 'app/shared/services/user/role.service';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport { UserService } from 'app/shared/services/user/user.service';\r\nimport { UserRoleService } from 'app/shared/services/user/user-role.service';\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n        if (typeof control.value === 'string') {\r\n            return { 'invalidAutocompleteObject': { value: control.value } }\r\n        }\r\n        return null  /* valid option selected */\r\n    }\r\n}\r\n@Component({\r\n    selector: 'app-action-dialog',\r\n    templateUrl: './action-dialog.component.html',\r\n    styleUrls: ['./action-dialog.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations\r\n})\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n    params: any;\r\n    isEditMode = false;\r\n    form: FormGroup;\r\n    localStorage: any;\r\n    filteredOptionsClient: Observable<any[]>;\r\n    filteredOptionsUser: Observable<any[]>;\r\n    filteredOptionsRole: Observable<any[]>;\r\n    clients: any;\r\n    users: any;\r\n    roles: any;\r\n    default_role: any;\r\n    status = false;\r\n    @ViewChild(\"toggleElement\") ref: any;\r\n    messageConstant: MessageConstant;\r\n    radiobuttonList: any;\r\n    constructor(private fb: FormBuilder, private roleService: RoleService, private snackBar: MatSnackBar, private clientService: ClientService,\r\n        public dialogRef: MatDialogRef<ActionDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData,\r\n        private userService: UserService, private userRoleService: UserRoleService) { }\r\n\r\n    ngOnInit() {\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n        // this.getClients();\r\n        this.params = this.data;\r\n        this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n        this.form = this.fb.group({\r\n            client: ['', [autocompleteObjectValidator(), Validators.required]],\r\n            userList: ['', [autocompleteObjectValidator(), Validators.required]],\r\n            roleList: ['', [Validators.required]],\r\n            defaultRole: ['', [Validators.required]],\r\n        });\r\n        this.getClients();\r\n        this.getUserList(this.params.data.client_id);\r\n        // this.getRoleList();\r\n        this.getDefaultRole();\r\n\r\n        if (this.isEditMode) {\r\n            this.assignValues(this.params);\r\n        }\r\n\r\n    }\r\n\r\n    close() {\r\n        this.dialogRef.close();\r\n    }\r\n    closeActionPanel(){\r\n        this.dialogRef.close();\r\n      }\r\n    \r\n\r\n    onYesClick() {\r\n        if (this.form.valid) {\r\n            let formValues = this.form.value;\r\n            const params: any = {\r\n                user_id: formValues.userList.id,\r\n                //roles: formValues.roleList,\r\n                //defaultrole: formValues.defaultRole,\r\n                // roles:formValues.roleList.map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : v.default_role })),\r\n                roles: this.radiobuttonList.map(v => ({\r\n                    role_id: v.id, map_id: v.map_id, create_date: v.created_date, create_by: v.createdby,\r\n                    modify_date: v.modify_date, modify_by: v.modifyby, default_role: v.default_role\r\n                })),\r\n                status: this.status == true ? 'Y' : 'N',\r\n                // tslint:disable-next-line: semicolon\r\n            }\r\n            // tslint:disable-next-line: no-//\r\n\r\n            if (this.isEditMode) {\r\n                params.id = this.params.data.id\r\n                \r\n            } \r\n            params.modify_by = this.localStorage.userId;\r\n            params.created_by = this.localStorage.userId;\r\n\r\n            if (this.isEditMode) {\r\n\r\n                this.userRoleService.userRoleMapping(params).subscribe(\r\n                    (data: any) => {\r\n                        this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n                        this.dialogRef.close();\r\n                    },\r\n                    (err) => {\r\n                        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n                    }\r\n                )\r\n            } else {\r\n                this.userRoleService.userRoleMapping(params).subscribe(\r\n                    (data: any) => {\r\n                        this.snackBar.open(MessageConstant.chargerNCreate, 'Dismiss', { duration: 5000 });\r\n                        this.dialogRef.close();\r\n                    }, (err) => {\r\n                        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n                    }\r\n                )\r\n            }\r\n            this.dialogRef.close(params);\r\n        }\r\n        return;\r\n    }\r\n\r\n    getErrorMessage(form: FormGroup) {\r\n        return form.get('email').hasError('required')\r\n            ? 'You must enter a value'\r\n            : form.get('email').hasError('email')\r\n                ? 'Not a valid email'\r\n                : '';\r\n    }\r\n\r\n    assignValues(params) {\r\n        //this.form.get('client').setValue(params.data.client_id);\r\n        // this.form.get('userList').setValue(params.data.userlist);\r\n        // this.form.get('roleList').setValue(params.data.roleList);\r\n        this.status = params.data.map_status == 'Y' ? true : false;\r\n    }\r\n\r\n    updateStatus(event) {\r\n        this.status = event.checked;\r\n        this.ref.checked = this.status;\r\n    }\r\n\r\n    getClients() {\r\n        this.clientService.getActiveClientsCW(this.localStorage.userId).subscribe(\r\n            (data: any) => {\r\n                this.clients = data;\r\n                if (this.isEditMode) {\r\n                    const toSelect = this.clients.find(c => c.id == this.params.data.client_id);\r\n                    this.form.get('client').setValue(toSelect);\r\n                }\r\n                this.filteredOptionsClient = this.form.controls.client.valueChanges\r\n                    .pipe(\r\n                        startWith(''),\r\n                        map(value => typeof value === 'string' ? value : value.name),\r\n                        map(name => name ? this._filterClientModels(name) : this.clients)\r\n                    );\r\n            }, (err) => {\r\n\r\n            }\r\n        )\r\n    }\r\n onClientChange(client){\r\n        this.getUserList(client.id);\r\n        this.form.get('userList').setValue('');\r\n        this.form.get('roleList').setValue('');\r\n        this.form.get('defaultRole').setValue('');\r\n    }\r\n    displayClient(item: any): string {\r\n        return item && item.name ? item.name : '';\r\n    }\r\n\r\n    private _filterClientModels(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.clients.filter(option => option.name.toLowerCase().includes(filterValue));\r\n    }\r\n\r\n    getUserList(id) {\r\n        this.userRoleService.getActiveUsersByClient(id).subscribe(\r\n            (resp: any) => {\r\n                this.users = resp.data;\r\n                if (this.isEditMode) {\r\n                    const toSelect = this.users.find(c => c.id == this.params.data.user_id);\r\n                    this.form.get('userList').setValue(toSelect);\r\n                }\r\n                this.filteredOptionsUser = this.form.controls.userList.valueChanges\r\n                    .pipe(\r\n                        startWith(''),\r\n                        map(value => typeof value === 'string' ? value : value.username),\r\n                        map(username => username ? this._filterUserModels(username) : this.users)\r\n                    );\r\n            }, (err) => {\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    private _filterUserModels(username: string): any[] {\r\n        const filterValue = username.toLowerCase();\r\n        return this.users.filter(option => option.username.toLowerCase().includes(filterValue));\r\n    }\r\n\r\n    displayUser(item: any): string {\r\n        return item && item.username ? item.username : '';\r\n    }\r\n\r\n    // getRoleList() {\r\n    //   this.roleService.getActiveRoles(this.params.user_id, this.localStorage.project_id).subscribe(\r\n    //     (resp: any) => {\r\n    //       this.roles = resp.data;\r\n    //       if(this.isEditMode){\r\n    //         const toSelect= this.roles.find(c=> c.id == this.params.data.rolelist);\r\n    //         var selectedList = [];\r\n    //         for (let i = 0; i < this.roles.length; i++) {\r\n    //           var role = this.roles[i];\r\n    //           if (role.id != null && role.id != undefined) {\r\n    //           selectedList.push(role);\r\n    //          }\r\n    //       }\r\n    //       this.form.get('roleList').setValue(role);\r\n    //       }\r\n\r\n    //     }, (err) => {\r\n\r\n    //     }\r\n    //   )\r\n    // }\r\n    onRoleChange(event) {\r\n        this.radiobuttonList = event.value;\r\n    }\r\n\r\n    radioChange(e) {\r\n        for (var i = 0; i < this.radiobuttonList.length; i++) {\r\n            if (e.value == this.radiobuttonList[i].id) {\r\n                this.radiobuttonList[i].default_role = 'Y'\r\n                //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'Y' }))\r\n            } else {\r\n                this.radiobuttonList[i].default_role = 'N'\r\n                //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'N' }))\r\n            }\r\n        }\r\n    }\r\n    onUserChange(user) {\r\n        // this.userRoleService.getRoleListWithRolesAssignedToUserCW(this.localStorage.client_id, user.id, this.localStorage.project_id).subscribe(\r\n        this.userRoleService.getRoleListWithRolesAssignedToUserCW(this.form.controls.client.value.id, user.id, this.localStorage.project_id).subscribe(\r\n            (resp: any) => {\r\n                if (resp.status != 'false') {\r\n                    this.roles = resp.data;\r\n                    // for (var k = 0; k < this.roles.length; k++) {\r\n                    //     if (this.roles[k].default_role == 'Y') {\r\n                    //         this.roles[k].selected_role == true\r\n                    //         //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'Y' }))\r\n                    //     } else {\r\n                    //         this.roles[k].selected_role == false\r\n                    //         //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'N' }))\r\n                    //     }\r\n                    // }\r\n                    var selectedList = [];\r\n                    for (let i = 0; i < this.roles.length; i++) {\r\n                        if(this.roles[i].default_role == 'Y'){\r\n                            this.form.get('defaultRole').setValue(this.roles[i]);\r\n                        }\r\n                        var userRole = this.roles[i];\r\n                        if (userRole.map_id != null && userRole.map_id != undefined) {\r\n                            selectedList.push(userRole);\r\n                        }\r\n\r\n                    }\r\n                    this.form.get('roleList').setValue(selectedList);\r\n                    // for (var k = 0; k < selectedList.length; k++) {\r\n                    //     // if (selectedList[k].default_role == 'Y') {\r\n                    //     //     selectedList[k].default_role = true\r\n                    //     //     //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'Y' }))\r\n                    //     // } else {\r\n                    //     //     selectedList[k].default_role = false\r\n                    //     //     //this.radiobuttonList[i].map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : 'N' }))\r\n                    //     // }\r\n                    // }\r\n                    this.radiobuttonList = selectedList;\r\n\r\n                    // this.onRoleChange(selectedList);\r\n                    // this.roles = resp.data;\r\n                    // var selectedList = [];\r\n                    // for (var i = 0; i < this.roles.length; i++) {\r\n                    //     if (this.roles[i].map_id != null && this.roles[i].map_id != undefined) {\r\n                    //         selectedList.push(this.roles);\r\n                    //     }\r\n                    // }\r\n                    // this.form.get('roleList').setValue(selectedList);\r\n                    // //this.roles.setValue(selectedList);\r\n                }\r\n            }, (err) => {\r\n            }\r\n        )\r\n    }\r\n\r\n    getDefaultRole() {\r\n        this.userRoleService.getRoleListWithRolesAssignedToUserCW(this.params.data.client_id, this.params.data.user_id, this.localStorage.project_id).subscribe(\r\n            (resp: any) => {\r\n                if (resp.status != 'false') {\r\n                    this.roles = resp.data;\r\n                    var selectedList = [];\r\n                    for (let i = 0; i < this.roles.length; i++) {\r\n                        var userRole = this.roles[i];\r\n                        if(this.roles[i].default_role == 'Y'){\r\n                            this.form.get('defaultRole').setValue(this.roles[i]);\r\n                        }\r\n                        if (userRole.map_id != null && userRole.map_id != undefined) {\r\n                            selectedList.push(userRole);\r\n                        }\r\n                    }\r\n                    this.form.get('roleList').setValue(selectedList);\r\n                    this.radiobuttonList = selectedList;\r\n                    for (var k = 0; k < this.radiobuttonList; k++) {\r\n                        if (this.radiobuttonList[k].default_role == 'Y') {\r\n                            this.form.get('defaultRole').setValue((this.radiobuttonList[k]));\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }, (err) => {\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n  \r\n<mat-toolbar class=\"action_toolbar\">Manage User Role</mat-toolbar>\r\n<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n    <form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n        fxFlex=\"1 0 auto\" name=\"form\" style=\"padding-top:8px;\">\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                <mat-label>Client</mat-label>\r\n                <input type=\"text\" matInput formControlName=\"client\" autocomplete=\"off\" [matAutocomplete]=\"clientAuto\"\r\n                    required>\r\n                <mat-autocomplete #clientAuto=\"matAutocomplete\" [displayWith]=\"displayClient\"\r\n                    (optionSelected)='onClientChange($event.option.value)'>\r\n                    <mat-option *ngFor=\"let option of filteredOptionsClient | async\" [value]=\"option\">\r\n                        {{option.name}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select Client Name\">account_circle\r\n                    </mat-icon>\r\n                </div>\r\n                <mat-error *ngIf=\"form.get('client').invalid\">Please select client </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                <mat-label>Username</mat-label>\r\n                <input type=\"text\" matInput formControlName=\"userList\" autocomplete=\"off\"\r\n                    [matAutocomplete]=\"userListAuto\" required style=\"text-transform: none;\">\r\n                <mat-autocomplete #userListAuto=\"matAutocomplete\" [displayWith]=\"displayUser\"\r\n                    (optionSelected)='onUserChange($event.option.value)'>\r\n                    <mat-option *ngFor=\"let option of filteredOptionsUser | async\" [value]=\"option\">\r\n                        {{option.username}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select User\">account_circle</mat-icon>\r\n                </div>\r\n                <mat-error *ngIf=\"form.get('userList').hasError('required')\">Please Select User</mat-error>\r\n                <!-- <mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special Character are not allowed</mat-error> -->\r\n            </mat-form-field>\r\n\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                <mat-label>Role</mat-label>\r\n                <mat-select formControlName=\"roleList\" multiple (selectionChange)=\"onRoleChange($event)\">\r\n                    <mat-option *ngFor=\"let option of roles\" [value]=\"option\">\r\n                        {{option.role_name}}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select Role\">help</mat-icon>\r\n                <!-- <mat-error *ngIf=\"form.get('rolelist').hasError('required')\">Please Select Role</mat-error> -->\r\n            </mat-form-field>\r\n\r\n            <div fxFlex=\"50\" class=\"pr-4\">\r\n                <mat-radio-group aria-label=\"defaultRole\" formControlName=\"defaultRole\">\r\n                    <mat-radio-button *ngFor=\"let radioButton of radiobuttonList\" [value]=\"radioButton.id\"\r\n                        name=\"roleRadio\" (change)=\"radioChange($event)\"\r\n                        [checked]=\"'Y' == radioButton.default_role ? true : false\">\r\n                        {{radioButton.role_name}}&nbsp;&nbsp;\r\n                    </mat-radio-button>\r\n                    <mat-error *ngIf=\"form.get('defaultRole').hasError('required')\">Please select default role\r\n                    </mat-error>\r\n                </mat-radio-group>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"padding-bottom:3.24\" style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\"\r\n                class=\"example-margin\" color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\"\r\n                #toggleElement>\r\n                {{status ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-top:10px;\">\r\n            <button mat-raised-button color=\"accent\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n            <button mat-raised-button color=\"primary\" class=\"mr-8\" (click)=\"onYesClick()\">Save</button>\r\n        </div>\r\n\r\n    </form>\r\n</div>","import { Component, OnInit, Renderer2, ViewChild } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { UserRoleService } from 'app/shared/services/user/user-role.service';\r\nimport { RoleService } from 'app/shared/services/user/role.service';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport { UserService } from 'app/shared/services/user/user.service';\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n        if (typeof control.value === 'string') {\r\n            return { 'invalidAutocompleteObject': { value: control.value } }\r\n        }\r\n        return null  /* valid option selected */\r\n    }\r\n}\r\n@Component({\r\n    selector: 'app-create',\r\n    templateUrl: './create.component.html',\r\n    styleUrls: ['./create.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations\r\n})\r\nexport class CreateComponent implements OnInit {\r\n\r\n    form: FormGroup;\r\n    filteredOptionsClient: Observable<any[]>;\r\n    filteredOptionsUser: Observable<any[]>;\r\n    filteredOptionsRole: Observable<any[]>;\r\n    clients: any;\r\n    users: any;\r\n    roles: any;\r\n    role_id: any;\r\n    default_role: any;\r\n    localStorage: any;\r\n    radiobuttonList: any;\r\n    currentCheckedValue = null;\r\n    messageConstant: MessageConstant;\r\n    @ViewChild(\"toggleElement\") ref: any;\r\n    status = true;\r\n    selectedRoles: any;\r\n    defaultSelectedRoles: any;\r\n    default_checkedRoles: any;\r\n    constructor(private fb: FormBuilder, private userRoleService: UserRoleService, private snackBar: MatSnackBar, private router: Router,\r\n        private clientService: ClientService, private userService: UserService, private roleService: RoleService) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initialize();\r\n        this.getClients();\r\n       // this.getUserList();\r\n        //this.getRoleList();\r\n    }\r\n\r\n    initialize() {\r\n        this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n\r\n        this.form = this.fb.group({\r\n            client: ['', [autocompleteObjectValidator(), Validators.required]],\r\n            userList: ['', [autocompleteObjectValidator(), Validators.required]],\r\n            roleList: ['', [Validators.required]],\r\n            defaultRole: ['', [Validators.required]],\r\n            status: [{ value: false }, [Validators.required]]\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            let formValues = this.form.value;\r\n\r\n            let params = {\r\n                user_id: formValues.userList.id,\r\n                //roles: formValues.roleList,\r\n                //defaultrole: formValues.defaultRole,\r\n                // roles:formValues.roleList.map(v => ({ role_id: v.id,map_id:null,create_date:null,create_by:null,modify_date:null,modify_by:null,default_role : v.default_role })),\r\n                roles: this.radiobuttonList.map(v => ({ role_id: v.id, map_id: v.map_id, create_date: v.created_date, create_by: v.createdby, modify_date: v.modify_date, modify_by: v.modifyby, default_role: v.default_role })),\r\n                status: this.status == true ? 'Y' : 'N',\r\n                created_by: this.localStorage.userId,\r\n                modify_by :this.localStorage.userId\r\n            }\r\n\r\n            this.userRoleService.userRoleMapping(params).subscribe(\r\n                (resp: any) => {\r\n                    if (resp.status == true) {\r\n                        this.snackBar.open(MessageConstant.userRoleAssign, 'Dismiss', { duration: 5000 });\r\n                        this.router.navigate(['/userManagement/user-role/crud/list']);\r\n                    } else {\r\n                        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n                    }\r\n\r\n                },\r\n                (err) => {\r\n                    this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n                }\r\n            )\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    getErrorMessage(form: FormGroup) {\r\n        return form.get('email').hasError('required')\r\n            ? 'You must enter a value'\r\n            : form.get('email').hasError('email')\r\n                ? 'Not a valid email'\r\n                : '';\r\n    }\r\n    updateStatus(event) {\r\n        this.status = event.checked;\r\n        this.ref.checked = this.status;\r\n    }\r\n\r\n    getClients() {\r\n        this.clientService.getActiveClientsCW(this.localStorage.userId).subscribe(\r\n            (data: any) => {\r\n                this.clients = data;\r\n                const toSelect = this.clients.find(c => c.id == this.localStorage.client_id);\r\n                this.form.get('client').setValue(toSelect);\r\n                this.getUserList(toSelect.id);\r\n                this.filteredOptionsClient = this.form.controls.client.valueChanges\r\n                    .pipe(\r\n                        startWith(''),\r\n                        map(value => typeof value === 'string' ? value : value.name),\r\n                        map(name => name ? this._filterClientModels(name) : this.clients)\r\n                    );\r\n            }, (err) => {\r\n\r\n            }\r\n        )\r\n    }\r\n    onClientChange(client){\r\n        this.getUserList(client.id);\r\n        this.form.get('userList').setValue('');\r\n        this.form.get('roleList').setValue('');\r\n        this.form.get('defaultRole').setValue('');\r\n    }\r\n    displayClient(item: any): string {\r\n        return item && item.name ? item.name : '';\r\n    }\r\n\r\n    private _filterClientModels(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.clients.filter(option => option.name.toLowerCase().includes(filterValue));\r\n    }\r\n\r\n    getUserList(id) {\r\n        this.userRoleService.getActiveUsersByClient(id).subscribe(\r\n            (resp: any) => {\r\n                this.users = resp.data;\r\n                this.filteredOptionsUser = this.form.controls.userList.valueChanges\r\n                    .pipe(\r\n                        startWith(''),\r\n                        map(value => typeof value === 'string' ? value : value.username),\r\n                        map(username => username ? this._filterUserModels(username) : this.users)\r\n                    );\r\n            }, (err) => {\r\n            }\r\n        )\r\n    }\r\n\r\n    displayUser(item: any): string {\r\n        return item && item.username ? item.username : '';\r\n    }\r\n\r\n    private _filterUserModels(username: string): any[] {\r\n        const filterValue = username.toLowerCase();\r\n        return this.users.filter(option => option.username.toLowerCase().includes(filterValue));\r\n    }\r\n\r\n   \r\n\r\n    onRoleChange(event) {\r\n        this.radiobuttonList = event.value;\r\n    }\r\n\r\n    radioChange(e) {\r\n        for (var i = 0; i < this.radiobuttonList.length; i++) {\r\n            if (e.value == this.radiobuttonList[i].id) {\r\n                this.radiobuttonList[i].default_role = 'Y'\r\n               \r\n            } else {\r\n                this.radiobuttonList[i].default_role = 'N'\r\n               \r\n            }\r\n        }\r\n    }\r\n    onUserChange(user) {\r\n        // this.userRoleService.getRoleListWithRolesAssignedToUserCW(this.localStorage.client_id, user.id, this.localStorage.project_id).subscribe(\r\n        this.userRoleService.getRoleListWithRolesAssignedToUserCW(this.form.controls.client.value.id, user.id, this.localStorage.project_id).subscribe(\r\n            (resp: any) => {\r\n                if (resp.status != 'false') {\r\n                    this.roles = resp.data;\r\n                    \r\n                    var selectedList = [];\r\n                    for (let i = 0; i < this.roles.length; i++) {\r\n                        if(this.roles[i].default_role == 'Y'){\r\n                            this.form.get('defaultRole').setValue(this.roles[i]);\r\n                        }\r\n                        var userRole = this.roles[i];\r\n                        if (userRole.map_id != null && userRole.map_id != undefined) {\r\n                            selectedList.push(userRole);\r\n                        }\r\n\r\n                    }\r\n                    this.form.get('roleList').setValue(selectedList);\r\n                   \r\n                    this.radiobuttonList = selectedList;\r\n                  \r\n                }\r\n            }, (err) => {\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n    <form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n        fxFlex=\"1 0 auto\" name=\"form\" (submit)=\"onSubmit()\">\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\r\n                <mat-label>Client</mat-label>\r\n                <input type=\"text\" matInput formControlName=\"client\" autocomplete=\"off\" [matAutocomplete]=\"clientAuto\"\r\n                    required>\r\n                <mat-autocomplete #clientAuto=\"matAutocomplete\" [displayWith]=\"displayClient\"\r\n                    (optionSelected)='onClientChange($event.option.value)'>\r\n                    <mat-option *ngFor=\"let option of filteredOptionsClient | async\" [value]=\"option\">\r\n                        {{option.name}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter client name\">account_circle\r\n                    </mat-icon>\r\n                </div>\r\n                <mat-error *ngIf=\"form.get('client').invalid\">Please select client </mat-error>\r\n\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                <mat-label>User</mat-label>\r\n                <input type=\"text\" matInput formControlName=\"userList\" autocomplete=\"off\"\r\n                    [matAutocomplete]=\"userListAuto\" required style=\"text-transform: none;\">\r\n                <mat-autocomplete #userListAuto=\"matAutocomplete\" [displayWith]=\"displayUser\"\r\n                    (optionSelected)='onUserChange($event.option.value)'>\r\n                    <mat-option *ngFor=\"let option of filteredOptionsUser | async\" [value]=\"option\">\r\n                        {{option.username}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select User\">account_circle</mat-icon>\r\n                </div>\r\n                <mat-error *ngIf=\"form.get('userList').hasError('required')\">Please select user</mat-error>\r\n                <!-- <mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special Character are not allowed</mat-error> -->\r\n            </mat-form-field>\r\n\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                <mat-label>Role</mat-label>\r\n                <mat-select formControlName=\"roleList\" multiple (selectionChange)=\"onRoleChange($event)\">\r\n                    <mat-option *ngFor=\"let option of roles\" [value]=\"option\">\r\n                        {{option.role_name}}\r\n                    </mat-option>\r\n                </mat-select>\r\n                <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please Select Role\">help</mat-icon>\r\n                <!-- <mat-error *ngIf=\"form.get('rolelist').hasError('required')\">Please Select Role</mat-error> -->\r\n            </mat-form-field>\r\n\r\n            <div fxFlex=\"50\" class=\"pr-4\">\r\n                <mat-radio-group aria-label=\"defaultRole\" formControlName=\"defaultRole\">\r\n                    <mat-radio-button *ngFor=\"let radioButton of radiobuttonList\" [value]=\"radioButton.id\"\r\n                        name=\"roleRadio\" (change)=\"radioChange($event)\"\r\n                        [checked]=\"'Y' == radioButton.default_role ? true : false\">\r\n                        {{radioButton.role_name}}&nbsp;&nbsp;\r\n                    </mat-radio-button>\r\n                    <mat-error *ngIf=\"form.get('defaultRole').hasError('required')\">Please select default role\r\n                    </mat-error>\r\n                </mat-radio-group>\r\n            </div>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n            <mat-slide-toggle style=\"margin-bottom: 10px;\" fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\"\r\n                color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\" #toggleElement>\r\n                {{status ? 'Active' : 'Inactive'}}\r\n            </mat-slide-toggle>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-top:10px;\">\r\n            <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n            <button mat-raised-button color=\"warn\" class=\"mr-8\"\r\n                routerLink=\"/userManagement/user-role/crud/list\">Cancel</button>\r\n        </div>\r\n\r\n    </form>\r\n</div>","\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { RoleService } from 'app/shared/services/user/role.service';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport { ViewDialogComponent } from '../view-dialog/view-dialog.component';\r\nimport { UserRoleService } from 'app/shared/services/user/user-role.service';\r\n\r\nexport class Role {\r\n    id: string;\r\n    name: string;\r\n    status: string;\r\n    client: string;\r\n    role: string;\r\n    client_name: string;\r\n    default_role: string;\r\n    created_date: string;\r\n    createdby: number;\r\n    modify_date: string;\r\n    modifyby: number;\r\n    statusString: string;\r\n    roleString: string;\r\n    username :string;\r\n    role_name :any;\r\n\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n    selector: 'app-list',\r\n    templateUrl: './list.component.html',\r\n    styleUrls: ['./list.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: fuseAnimations\r\n})\r\nexport class ListComponent implements OnInit {\r\n    filterEntity: Role;\r\n    filterType: MatTableFilter;\r\n    displayedColumns: string[] = ['name', 'client', 'role', 'defaultRole', 'status', 'action'];\r\n    head = [['User Name', 'Client', 'Role', 'Default Role', 'Status']];\r\n    dataSource: MatTableDataSource<Role>;\r\n\r\n    roles: Role[];\r\n    confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n    dialogRef: any;\r\n    clientSearch = false;\r\n    roleSearch = false;\r\n    nameSearch = false;\r\n    defaultSearch = false;\r\n    statusSearch = false;\r\n    exportedData: any[];\r\n    localStorage: any;\r\n    userRole: any;\r\n    activeUserbyClient: any;\r\n    activeUserList: any;\r\n    previousUserID = 0;\r\n    constructor(public dialog: MatDialog, private snackBar: MatSnackBar, private userRoleService: UserRoleService) {\r\n        // Create 100 users\r\n        // const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\r\n\r\n        // Assign the data to the data source for the table to render\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n        this.getUserRoleMappingCW();\r\n        this.filterEntity = new Role();\r\n        this.filterType = MatTableFilter.ANYWHERE;\r\n    }\r\n\r\n    applyFilter(event: Event) {\r\n        const filterValue = (event.target as HTMLInputElement).value;\r\n        this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n        if (this.dataSource.paginator) {\r\n            this.dataSource.paginator.firstPage();\r\n        }\r\n    }\r\n\r\n    getUserRoleMappingCW() {\r\n        this.userRoleService.getUserRoleMappingCW(this.localStorage.userId, this.localStorage.project_id).subscribe(\r\n            (resp: any) => {\r\n                if (resp.data != null) {\r\n                    this.userRole = resp.data;\r\n                    for (var i = 0; i < this.userRole.length; i++) {\r\n                        if (this.userRole[i].map_status == 'N') {\r\n                            this.userRole[i].statusString = 'Inactive';\r\n                        } else {\r\n                            this.userRole[i].statusString = 'Active';\r\n                        }\r\n                        if (this.userRole[i].default_role == 'Y') {\r\n                            this.userRole[i].roleString = this.userRole[i].role_name;\r\n                        }\r\n                    }\r\n                    //const result = [];\r\n                    // const map = new Map();\r\n                    // for (const item of this.userRole) {\r\n                    //     if(!map.has(item.user_id)){\r\n                    //         map.set(item.user_id, true);    // set any value to Map\r\n                    //         result.push({\r\n                    //             id: item.user_id,\r\n                    //             name: item.role_name,\r\n                    //         });\r\n                    //     }\r\n                    // }\r\n                    const result = (arr, props = []) => [...new Map(arr.map(entry => [props.map(k => entry[k]).join('|'), entry])).values()];\r\n                    const newArr = result(this.userRole, ['user_id', 'role_id']);\r\n\r\n                    this.dataSource = new MatTableDataSource(this.userRole);\r\n                    this.dataSource.paginator = this.paginator;\r\n                    this.dataSource.sort = this.sort;\r\n                } else {\r\n                    this.snackBar.open(MessageConstant.NoRecordFoundMessage, 'Dismiss', { duration: 5000 })\r\n                    return;\r\n                }\r\n            }, (err) => { }\r\n        )\r\n    }\r\n\r\n    deleteUserRoleMapping(id) {\r\n        this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n            disableClose: true\r\n        });\r\n        //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n        this.confirmDialogRef.afterClosed().subscribe(result => {\r\n            if (result) {\r\n                this.userRoleService.deleteUserRoleMapping(id, this.localStorage.userId).subscribe(\r\n                    (data: any) => {\r\n                        if (data.status == false) {\r\n                            this.getUserRoleMappingCW();\r\n                            this.snackBar.open(MessageConstant.deleteMessage, 'Dismiss', { duration: 5000 });\r\n                        } else {\r\n                            this.snackBar.open(data.message, 'Dismiss', { duration: 5000 });\r\n                        }\r\n\r\n                    }, (err) => {\r\n                    }\r\n                )\r\n            }\r\n            this.confirmDialogRef = null;\r\n        });\r\n    }\r\n\r\n    viewDialog(data): void {\r\n        let params = {\r\n            action: 'View',\r\n            data: data\r\n        }\r\n        const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n            width: '800px',\r\n            data: params,\r\n            autoFocus: false,\r\n            panelClass: 'app-action-dialog',\r\n            disableClose: true,\r\n        });\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            this.getUserRoleMappingCW();\r\n        });\r\n    }\r\n\r\n    openDialog(action, data): void {\r\n        let params = {\r\n            action: action,\r\n            data: data,\r\n        }\r\n        const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n            width: '800px',\r\n            data: params,\r\n            autoFocus: false,\r\n            disableClose: true,\r\n            panelClass: 'app-action-dialog'\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            // this.moderate(result);\r\n            this.getUserRoleMappingCW();\r\n        });\r\n    }\r\n\r\n    changeVisibility(visibleOption, ev) {\r\n        // visibleOption = !visibleOption;\r\n        //nameSearch = false;\r\n        //descSearch = false;\r\n        ev.stopPropagation();\r\n        if (visibleOption == 'clientSearch') {\r\n            this.clientSearch = !this.clientSearch;\r\n            this.filterEntity.client_name = \"\";\r\n        }\r\n        if (visibleOption == 'roleSearch') {\r\n            this.roleSearch = !this.roleSearch;\r\n            this.filterEntity.role = \"\";\r\n        }\r\n        if (visibleOption == 'nameSearch') {\r\n            this.nameSearch = !this.nameSearch;\r\n            this.filterEntity.name = \"\";\r\n        }\r\n\r\n        if (visibleOption == 'defaultSearch') {\r\n            this.defaultSearch = !this.defaultSearch;\r\n            this.filterEntity.default_role = \"\";\r\n        }\r\n        if (visibleOption == 'statusSearch') {\r\n            this.statusSearch = !this.statusSearch;\r\n            this.filterEntity.statusString = \"\";\r\n        }\r\n    }\r\n\r\n    tableExport() {\r\n        this.exportedData = [];\r\n        for (let i = 0; i < this.userRole.length; i++) {\r\n            var userRole = this.userRole[i];\r\n            //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n            //statusString: `statusString${i}`});\r\n            var data = { 'User Name': userRole.username, 'Client': userRole.client_name, 'Role': userRole.role_name, 'Default_Role': userRole.default_role, 'Status': userRole.statusString };\r\n            this.exportedData.push(data);\r\n        }\r\n        const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n        const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n\r\n        XLSX.utils.book_append_sheet(workBook, workSheet, 'SheetName');\r\n        XLSX.writeFile(workBook, 'User role assign.xlsx');\r\n        //XLSX.writeFileAsync('OCPP Logs.xlsx',workBook, this.cb)\r\n        //this.preloader.close();\r\n    }\r\n\r\n    pdfExport() {\r\n        var doc = new jsPDF({ // set needed dimensions for any elemen\r\n        });\r\n        this.exportedData = [];\r\n        for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n            var chrger = this.dataSource.filteredData[i];\r\n            //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n            //statusString: `statusString${i}`});\r\n            var data = [chrger.username, chrger.client_name, chrger.role_name, chrger.default_role, chrger.statusString,];\r\n\r\n            this.exportedData.push(data);\r\n        }\r\n        var img = new Image();\r\n        var imgRight = new Image();\r\n        var src = 'assets/images/logos/logo_sparkev_main.png';\r\n        var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n        imgRight.src = srcSparkEV;\r\n        var createdDate = new Date().toLocaleString(('en-GB'));\r\n        img.src = src;\r\n        doc.setFontSize(11);\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(18);\r\n\r\n        (doc as any).autoTable({\r\n            head: this.head,\r\n            body: this.exportedData,\r\n            theme: 'grid',\r\n            headStyles: { fontStyle: 'majalla', fillColor: [11, 148, 68] },\r\n            styles: {\r\n                cellPadding: 1,\r\n                fontSize: 8,\r\n            },\r\n            margin: { top: 22 },\r\n            didDrawCell: data => {\r\n            },\r\n            didDrawPage: data => {\r\n                doc.addImage(img , 15, 7, 15, 6);\r\n                doc.addImage(imgRight, 170, 7, 25, 6);\r\n                doc.text('User Role Assign Report', doc.internal.pageSize.getWidth() / 2, 11, { align: 'center' });\r\n                doc.setTextColor(211, 211, 211);\r\n                doc.setFontSize(60);\r\n                doc.setGState(doc.GState({ opacity: 0.6 }));\r\n                doc.text('Confidential/Not for Public use', 25, 285, null, 60,);\r\n                doc.setGState(doc.GState({ opacity: 1 }));\r\n                doc.setTextColor(100);\r\n                doc.setFontSize(9);\r\n                doc.text('Date:' + createdDate, 15, 18);\r\n                doc.text('Generated By:' + this.localStorage.f_Name, 195, 18, { align: 'right' });\r\n                doc = this.addWaterMark(doc);\r\n            }\r\n        })\r\n        // below line for Open PDF document in new tab\r\n        doc.output('dataurlnewwindow')\r\n        // below line for Download PDF document  \r\n        doc.save('User Role Assign report.pdf');\r\n    }\r\n    addWaterMark(doc) {\r\n        var newpage = doc.getNumberOfPages();\r\n        const i = doc.internal.getNumberOfPages();\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(10);\r\n        //Print Page 1 of 4 for example\r\n\r\n        doc.text('Page ' + String(i) + ' of ' + String(newpage), 210 - 20, 297 - 10, null, null, \"right\")\r\n        return doc;\r\n    }\r\n\r\n\r\n}\r\n\r\n","<!--mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"\" #input autocomplete=\"password\">\r\n</mat-form-field-->\r\n<div style=\"text-align: left ;\r\nmargin-left: 10px;\r\nmargin-bottom:10px;margin-top: 10px;\">\r\n    <button mat-mini-fab  color=\"primary\" (click)=\"tableExport()\"  matTooltip=\"Excel Download\">\r\n        <mat-icon>sim_card_download</mat-icon> \r\n      </button>&nbsp;&nbsp;\r\n      <button mat-mini-fab  color=\"primary\" (click)=\"pdfExport()\"  matTooltip=\"PDF Download\">\r\n        <mat-icon>picture_as_pdf</mat-icon> \r\n      </button>\r\n    <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n</div>\r\n\r\n<div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\">\r\n        <div>\r\n\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\" [exampleEntity]=\"filterEntity\"\r\n                [filterType]=\"filterType\" matSort class=\"mat-elevation-z8\">\r\n\r\n                <!-- ID Column -->\r\n                <ng-container matColumnDef=\"id\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.id}} </td>\r\n                </ng-container>\r\n\r\n                <!-- Name Column -->\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!nameSearch\" class=\"custom_font_size\" style=\"display: flex;\">User Name &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"nameSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"User Name\" [(ngModel)]=\"filterEntity.username\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.username}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"client\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!clientSearch\" class=\"custom_font_size\" style=\"display: flex;\">Client &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('clientSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"clientSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Client\" [(ngModel)]=\"filterEntity.client_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('clientSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.client_name}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"role\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!roleSearch\" class=\"custom_font_size\" style=\"display: flex;\">Role &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('codeSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"roleSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Role\" [(ngModel)]=\"filterEntity.role\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('roleSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.role_name}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"defaultRole\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!defaultSearch\" class=\"custom_font_size\" style=\"display: flex;\"> Default Role\r\n                            &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('defaultSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"defaultSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Default Role\" [(ngModel)]=\"filterEntity.default_role\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('defaultSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.roleString}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!statusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Status &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.map_status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <span class=\"custom_font_size\" style=\"display: flex;\"> Action</span>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        <!-- <button mat-raised-button color=\"primary\"\r\n                                (click)=\"openDialog('EDIT',element)\">Edit</button>\r\n                        <button mat-raised-button color=\"warn\" (click)=\"delete(element.id)\"\r\n                                style=\"margin-left: 1%;\">Remove</button>  -->\r\n                        <mat-icon color=\"primary\" matTooltip=\"View\" (click)=\"viewDialog(element)\"\r\n                            style=\"cursor:pointer\">visibility</mat-icon>&nbsp;\r\n\r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" (click)=\"openDialog('EDIT',element)\"\r\n                            style=\"cursor:pointer\">edit</mat-icon>&nbsp;\r\n\r\n                        <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"deleteUserRoleMapping(element.map_id)\"\r\n                            style=\"cursor:pointer\">\r\n                            delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<!-- <button  (click)=\"tableExport()\" mat-fab color=\"primary\" matTooltip=\"export to excel\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;position:fixed;bottom:30px;right:20px\">\r\n    <mat-icon>downloading</mat-icon>\r\n  </button> -->\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->","import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TABS_DEMO_ROUTES } from './user-role-crud/routes';\r\nimport { UserRoleCrudComponent } from './user-role-crud/user-role-crud.component';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : 'crud',component : UserRoleCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class UserRoleRoutingModule{}"]}