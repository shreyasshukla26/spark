{"version":3,"sources":["webpack:///src/app/main/booking/list/list.component.ts","webpack:///src/app/main/booking/list/list.component.html","webpack:///src/app/main/booking/view-dialog/view-dialog.component.ts","webpack:///src/app/main/booking/view-dialog/view-dialog.component.html","webpack:///src/app/main/booking/list-approved/list-approved.component.ts","webpack:///src/app/main/booking/list-approved/list-approved.component.html","webpack:///src/app/main/booking/booking-crud/booking-crud.component.ts","webpack:///src/app/main/booking/booking-crud/booking-crud.component.html","webpack:///src/app/main/booking/booking-crud/routes.ts","webpack:///src/app/main/booking/registerUser-dialog/registerUser-dialog.component.ts","webpack:///src/app/main/booking/registerUser-dialog/registerUser-dialog.component.html","webpack:///src/app/main/booking/action-dialog/action-dialog.component.ts","webpack:///src/app/main/booking/action-dialog/action-dialog.component.html","webpack:///src/app/main/booking/create/create.component.ts","webpack:///src/app/main/booking/create/create.component.html","webpack:///src/app/shared/services/booking/booking.service.ts","webpack:///src/app/main/booking/booking.module.ts","webpack:///src/app/main/booking/registerVehicle-dialog/registerVehicle-dialog.component.ts","webpack:///src/app/main/booking/registerVehicle-dialog/registerVehicle-dialog.component.html","webpack:///src/app/main/booking/booking-routing.module.ts"],"names":["autocompleteObjectValidator","control","value","BookingModel","ListComponent","bookingService","dialog","snackBar","cdr","datepipe","fb","displayedColumns","head","bookingNumberSearch","userNameSearch","mobileSearch","registrationSearch","bookingDateSearch","startTimeSearch","endTimeSearch","bookingStatusSearch","form","group","charClient","charCPO","charStat","localStorage","JSON","parse","getItem","clientCpoStaDetails","filterEntity","filterType","ANYWHERE","getClients","event","filterValue","target","dataSource","filter","trim","toLowerCase","paginator","firstPage","formValues","params","status","station_id","f_date","t_date","user_id","userId","getallbookingscw","subscribe","resp","bookingModels","data","i","length","booking_date_string","transform","booking_date","sort","detectChanges","err","id","confirmDialogRef","open","disableClose","action","dialogRef","width","panelClass","autoFocus","afterClosed","result","getBookingModels","visibleOption","ev","stopPropagation","booking_number","username","mobile","registration_no","start_time","end_time","booking_status_description","exportedData","filteredData","bookingModel","push","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","doc","chrger","img","Image","imgRight","src","srcSparkEV","createdDate","Date","toLocaleString","setFontSize","setTextColor","autoTable","body","theme","headStyles","fontStyle","fillColor","styles","cellPadding","fontSize","margin","top","didDrawCell","didDrawPage","addImage","text","internal","pageSize","getWidth","align","setGState","GState","opacity","f_Name","addWaterMark","output","save","newpage","getNumberOfPages","String","clientList","role_code","undefined","toSelect","get","setValue","getCPOByClient","client_id","filteredOptionsCharClient","controls","valueChanges","pipe","client_name","name","_filterCharClient","cpoList","stationList","getStationByCPO","cpo_id","filteredOptionsCharCPO","cpo_name","_filterCharCPO","station","filteredOptionsCharStat","station_name","_filterCharStat","stationID","item","option","includes","tableExport","pdfExport","selector","templateUrl","styleUrls","encapsulation","None","animations","providers","ViewDialogComponent","chargerTypeService","chargingModelService","masterService","router","isEditMode","batteryBackup","rfidCardReader","communicationModeData","initialize","chargerType","required","manufacturer","chargerModelType","code","pattern","description","communicationProtocol","communicationMode","cardReaderType","noOfConnectors","disabled","ONLY_NUMBERS","connectorForm","array","createConnectorFG","getChargetTypes","getManufacturers","getChargerModelTypes","getCommunicationProtocols","getConnectorTypes","getIOTypes","getCurrentTypes","assignValues","filteredOptions","connectorType","ioType","currentType","voltage","THREE_DIGIT_DECIMAL","phase","maxAmp","power","frequency","removeAt","reset","getChargerTypes","chargerTypes","find","c","charger_type_id","filteredOptionsCharType","_filterCharType","manufacturers","manufacturer_id","filteredOptionsManufacturer","_filterManfacturer","chargerModelTypes","charger_model_type_id","filteredOptionsCharModelType","_filterCharModelType","communicationProtocols","communication_protocol_id","filteredOptionsCommunicationProto","_filterCommunicationProtocol","connectorTypes","ioTypes","currentTypes","close","valid","connectors","forEach","connector_type_id","io_type_id","current_type_id","max_amp","created_by","battery_backup","communication_mode","card_reader_type","no_of_connectors","connector_data","modify_by","update","recordUpdateMessage","duration","errorMessage","create","chargerCreateMessage","hasError","temp","Array","split","assignValuesFG","connector","addConnectorFG","model_id","created_date","modify_date","removeConnectorFG","patchValue","checked","ref","rfid","active","closeActionPanel","clkBatteryBackup","clkRfidCardReader","updateStatus","$event","selection","ListApprovedComponent","numSelected","selected","numRows","isAllSelected","clear","row","select","s","console","log","booking_id","map","v","param","ackBookingCW","bookingApproved","message","approveBookings","BookingCrudComponent","_utilityService","tabLinks","tempLinks","activeMenuItems$","menuItemSelecte","menuArray","title","nav_list","nav_list_with_tab","x","objectData","children","y","objectChildData","isDefaultRoutePermeted","z","label","link","navigate","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","TABS_DEMO_ROUTES","path","component","canActivate","redirectTo","pathMatch","RegisterUserDialogComponent","accountService","_formBuilder","vehicleService","validateOTP","hideDetail","isErrorMessage","isSuccessMessage","successMessage","selectedIndex","isFirstTab","isSecondTab","confirmValidator","error","registerForm","password","confirm","f_name","l_name","email","MobNo","u_altmobile","confirmPassword","otpForm","otp","brand","model","connector_type","registration","minLength","maxLength","yearOfManufacture","engineNumber","chassisNumber","VINnumber","getBrands","isPasswordFieldType","isPasswordConfirmFieldType","captchaResponse","alt_mobile","device_id","app_version","os_version","user_type","can_expire","is_verified","registration_origin","register","res","userOTPSend","setTimeout","dublicateRegistrationMessage","navigateByUrl","verifyUserNew","logs","userRegisterdMessage","otp_purpose","getotpNew","getOTPMessage","brands","filteredOptionsbrands","_filterbrands","models","connector_types","getModelsByBrand","filteredOptionsModel","_filterModels","getPublishedConnectorTypeByModel","filteredOptionsCurrType","_filterConnType","getConnectorTypeByModel","brand_id","ct_id","year_of_manufacture","engine_no","chassis_no","vin_no","vehicleCreate","err_code","errorMsg","index","lastIndexOf","splitted","substring","registrationDuplicateVehicle","engineDuplicateVehicle","chassisDuplicateVehicle","onTabChange","resendOTP","vaidateOTP","onSubmit","onBrandChange","onModelChange","onConnectorTypeChange","ActionDialogComponent","getActiveChargerTypes","NoRecordFoundMessage","onYesClick","CreateComponent","chargingStationService","chargerService","datePipe","isLinear","isEditable","is_read","minDate","timeSlotDisabled","userVehicleDisabled","eTime","charger","uname","vehicle","cdate","sTime","validUpto","validationCheck","requiredTrue","amount","chargerBookingObj","chargerBookingobj","getChargingStations","userName","getUserDetail","getActiveChargingStationsCW","chargingStations","toSelectSetation","getChargerByStation","filteredOptionsStationName","_filterStation","availableTimeSlot","getChargersByMappedStationId","toSelectCharger","charger_id","onChargerChange","filteredOptionsCharger","_filterCharger","toSelectConnectorType","toSelectConnector","connector_id","getAvailableSlot","filteredOptionsConnectorType","connector_type_name","_filterConnectorType","map_id","connector_no","hms","diff","format","a","minutes","userDetail","vehicle_id","adv_booking_amt","is_tnc_read","BookingCreateMessage","bookingDate","getAvailableTimeInterval","available_intervals","configBookingData","booking_config","BookingAvailableMessage","adv_booking_amount","booking_validity_time","time_set","selectedTimeSlot","getUserByMobile","user_detail","vehicleList","vehicles","getVehicleList","miniTime","add","min_charging_duration","miniChargingTime","maxiTime","max_charging_duration","maxiChargingTime","vehicleListUpdate","toSelectVechicle","filteredOptionVehicleList","_filterVehicle","onStationChange","startTimeCheck","timeCalculate","getUserMobile","registerNew","registerVehicle","submit","BookingService","http","apiUrl1","API_URL2","apiUrl2","apiUrl3","post","date","login_id","providedIn","COMPONENTS","COMPONENTS_DYNAMIC","BookingModule","imports","declarations","entryComponents","RegisterVehicleDialogComponent","routes","loadChildren","then","m","BookingConfigModule","BookingRoutingModule","forChild","exports"],"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","file":"app-main-booking-booking-module-es5.js","sourcesContent":["\r\nimport { Component, OnInit, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport { ViewDialogComponent } from '../view-dialog/view-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { BookingService } from 'app/shared/services/booking/booking.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { jsPDF } from 'jspdf';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport 'jspdf-autotable';\r\nimport { FormBuilder, FormGroup, ValidatorFn, AbstractControl, Validators } from '@angular/forms';\r\n\r\n\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n\r\nexport class BookingModel {\r\n  id: number;\r\n  booking_number: number;\r\n  username: string;\r\n  mobile: number;\r\n  registration_no: string;\r\n  booking_date: number;\r\n  booking_date_string: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  booking_status_description: string;\r\n\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n  providers: [DatePipe]\r\n})\r\nexport class ListComponent implements OnInit {\r\n  filterEntity: BookingModel;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['booking_number', 'username', 'mobile', 'registration_no', 'booking_date', 'start_time', 'end_time', 'booking_status_description'];\r\n  head = [['Booking Number', 'Username', 'Mobile', 'Registration Number', 'Booking Date', 'Start Time', 'End Time', 'Booking Status']];\r\n  dataSource: MatTableDataSource<BookingModel>;\r\n  bookingModels: BookingModel[];\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  dialogRef: any;\r\n  bookingNumberSearch = false;\r\n  userNameSearch = false;\r\n  mobileSearch = false;\r\n  registrationSearch = false;\r\n  bookingDateSearch = false;\r\n  startTimeSearch = false;\r\n  endTimeSearch = false;\r\n  bookingStatusSearch = false;\r\n  localStorage: any;\r\n  exportedData: any[];\r\n  filteredOptionsCharClient: Observable<any[]>;\r\n  filteredOptionsCharCPO: Observable<any[]>;\r\n  filteredOptionsCharStat: Observable<any[]>;\r\n  stationID: any;\r\n  form: FormGroup;\r\n  clientCpoStaDetails: any;\r\n  clientList: any; cpoList: any; stationList: any;\r\n  station: any;\r\n  //messageConstant = MessageConstant;\r\n  constructor(private bookingService: BookingService, public dialog: MatDialog, \r\n    private snackBar: MatSnackBar, private cdr: ChangeDetectorRef, public datepipe: DatePipe, private fb: FormBuilder) {\r\n    this.form = this.fb.group({\r\n      charClient: ['', [autocompleteObjectValidator()]],\r\n      charCPO: ['', [autocompleteObjectValidator()]],\r\n      charStat: ['', [autocompleteObjectValidator()]]\r\n    });\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.clientCpoStaDetails = JSON.parse(localStorage.getItem('clientCpoStaDetails'));\r\n    //this.getBookingModels();\r\n    this.filterEntity = new BookingModel();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.getClients();\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getBookingModels() {\r\n    let formValues = this.form.value;\r\n    let params = {\r\n      status: 'ALL',\r\n      station_id: formValues.charStat.station_id,\r\n      f_date: '',\r\n      t_date: '',\r\n      user_id: this.localStorage.userId\r\n    }\r\n    this.bookingService.getallbookingscw(params).subscribe(\r\n      (resp: any) => {\r\n        if (resp != null) {\r\n          this.bookingModels = resp.data;\r\n          for (var i = 0; i < this.bookingModels.length; i++) {\r\n            this.bookingModels[i].booking_date_string = this.datepipe.transform(this.bookingModels[i].booking_date, 'dd/MM/yyyy hh:mm:ss');\r\n          }\r\n          this.dataSource = new MatTableDataSource(this.bookingModels);\r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n          this.cdr.detectChanges();\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id) {\r\n    this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n      disableClose: true\r\n    });\r\n\r\n    //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n\r\n    // this.confirmDialogRef.afterClosed().subscribe(result => {\r\n    //     if ( result )\r\n    //     {\r\n    //         this.chargingModelService.delete(id).subscribe(\r\n    //     (data:any)=>{\r\n    //       ;\r\n    //       this.getBookingModels();\r\n    //       this.snackBar.open(MessageConstant.deleteMessage,'Dismiss',{duration:2000});\r\n    //       this.cdr.detectChanges();\r\n    //     },(err)=>{\r\n\r\n    //     }\r\n    //   )\r\n    //     }\r\n    //     this.confirmDialogRef = null;\r\n    // });\r\n\r\n  }\r\n\r\n  viewDialog(action, data): void {\r\n    let params = {\r\n      action: action,\r\n      data: data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n      width: '1400px',\r\n      data: params,\r\n      panelClass: 'app-action-dialog',\r\n      autoFocus: false,\r\n      disableClose: true\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.getBookingModels();\r\n    });\r\n  }\r\n  openDialog(action, data): void {\r\n    // this.snackBar.open('Unable to proceed, In prgress','Dismiss');\r\n    // return false;\r\n    let params = {\r\n      action: action,\r\n      data: data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '1400px',\r\n      data: params,\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.getBookingModels();\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n  changeVisibility(visibleOption, ev) {\r\n    ev.stopPropagation();\r\n    if (visibleOption == 'bookingNumberSearch') {\r\n      this.bookingNumberSearch = !this.bookingNumberSearch;\r\n      this.filterEntity.booking_number = null;\r\n    }\r\n    if (visibleOption == 'userNameSearch') {\r\n      this.userNameSearch = !this.userNameSearch;\r\n      this.filterEntity.username = \"\";\r\n    }\r\n    if (visibleOption == 'mobileSearch') {\r\n      this.mobileSearch = !this.mobileSearch;\r\n      this.filterEntity.mobile = null;\r\n    }\r\n    if (visibleOption == 'registrationSearch') {\r\n      this.registrationSearch = !this.registrationSearch;\r\n      this.filterEntity.registration_no = \"\";\r\n    }\r\n    if (visibleOption == 'bookingDateSearch') {\r\n      this.bookingDateSearch = !this.bookingDateSearch;\r\n      this.filterEntity.booking_date_string = \"\";\r\n    }\r\n    if (visibleOption == 'startTimeSearch') {\r\n      this.startTimeSearch = !this.startTimeSearch;\r\n      this.filterEntity.start_time = \"\";\r\n    }\r\n    if (visibleOption == 'endTimeSearch') {\r\n      this.endTimeSearch = !this.endTimeSearch;\r\n      this.filterEntity.end_time = \"\";\r\n    }\r\n    if (visibleOption == 'bookingStatusSearch') {\r\n      this.bookingStatusSearch = !this.bookingStatusSearch;\r\n      this.filterEntity.booking_status_description = \"\";\r\n    }\r\n\r\n  }\r\n  tableExport() {\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var bookingModel = this.dataSource.filteredData[i];\r\n      var data = {\r\n        'Booking Number': bookingModel.booking_number, 'User Name ': bookingModel.username, 'Mobile': bookingModel.mobile,\r\n        'Registration Number': bookingModel.registration_no, 'Booking Date ': bookingModel.booking_date_string,\r\n        'Start Time': bookingModel.start_time, 'End Time': bookingModel.end_time,\r\n        'Booking Status': bookingModel.booking_status_description\r\n      };\r\n      this.exportedData.push(data);\r\n    }\r\n    const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n    const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, 'SheetName');\r\n    XLSX.writeFile(workBook, 'Booking.xlsx');\r\n  }\r\n\r\n  pdfExport() {\r\n    var doc = new jsPDF({ // set needed dimensions for any elemen\r\n\r\n    });\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chrger = this.dataSource.filteredData[i];\r\n      var data = [chrger.booking_number, chrger.username, chrger.mobile, chrger.registration_no, chrger.booking_date_string, chrger.start_time, chrger.end_time, chrger.booking_status_description];\r\n\r\n      this.exportedData.push(data);\r\n    }\r\n    var img = new Image();\r\n    var imgRight = new Image();\r\n    var src = 'assets/images/logos/logo_sparkev_main.png';\r\n    var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n    imgRight.src = srcSparkEV;\r\n    var createdDate = new Date().toLocaleString(('en-GB'));\r\n    img.src = src;\r\n    doc.setFontSize(11);\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(18);\r\n\r\n    (doc as any).autoTable({\r\n      head: this.head,\r\n      body: this.exportedData,\r\n      theme: 'grid',\r\n      headStyles: { fontStyle: 'majalla', fillColor: [11, 148, 68] },\r\n      styles: {\r\n        cellPadding: 1,\r\n        fontSize: 8,\r\n\r\n      },\r\n\r\n      margin: { top: 22 },\r\n      didDrawCell: data => {\r\n      },\r\n      didDrawPage: data => {\r\n        doc.addImage(img , 15, 7, 15, 6);\r\n        doc.addImage(imgRight, 170, 7, 25, 6);\r\n\r\n        doc.text('Booking Report', doc.internal.pageSize.getWidth() / 2, 11, { align: 'center' });\r\n\r\n        doc.setTextColor(211, 211, 211);\r\n        doc.setFontSize(60);\r\n        doc.setGState(doc.GState({ opacity: 0.6 }));\r\n        doc.text('Confidential/Not for Public use', 25, 285, null, 60,);\r\n        doc.setGState(doc.GState({ opacity: 1 }));\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(9);\r\n        doc.text('Date:' + createdDate, 15, 18);\r\n\r\n        doc.text('Generated By:' + this.localStorage.f_Name, 195, 18, { align: 'right' });\r\n        doc = this.addWaterMark(doc);\r\n      }\r\n    })\r\n\r\n    // below line for Open PDF document in new tab\r\n    doc.output('dataurlnewwindow');\r\n\r\n    // below line for Download PDF document  \r\n    doc.save('Booking report.pdf');\r\n\r\n  }\r\n  addWaterMark(doc) {\r\n    var newpage = doc.getNumberOfPages();\r\n    const i = doc.internal.getNumberOfPages();\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(10);\r\n    //Print Page 1 of 4 for example\r\n\r\n    doc.text('Page ' + String(i) + ' of ' + String(newpage), 210 - 20, 297 - 10, null, null, \"right\");\r\n    return doc;\r\n\r\n  }\r\n\r\n  getClients() {\r\n    this.clientList = JSON.parse(localStorage.getItem('ClientList'));\r\n    if (this.localStorage.role_code != \"END\") {\r\n      if (this.clientList != null && this.clientList != undefined) {\r\n        const toSelect = this.clientList[0];\r\n        this.form.get('charClient').setValue(toSelect);\r\n        this.getCPOByClient(toSelect.client_id);\r\n      }\r\n      this.filteredOptionsCharClient = this.form.controls.charClient.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.client_name),\r\n          map(name => name ? this._filterCharClient(name) : this.clientList)\r\n        );\r\n\r\n    } \r\n  }\r\n  onClientChange(client_id) {\r\n    this.cpoList = [];\r\n    this.stationList = [];\r\n    this.form.get('charCPO').setValue(\"\");\r\n    this.form.get('charStat').setValue(\"\");\r\n    this.getCPOByClient(client_id);\r\n  }\r\n\r\n  getCPOByClient(client_id) {\r\n    this.cpoList = JSON.parse(localStorage.getItem('CpoList'));\r\n    if (this.localStorage.role_code != \"END\") {\r\n      if (this.cpoList != null && this.cpoList != undefined) {\r\n        const toSelect = this.cpoList.length == 1 ? this.cpoList[0] : this.cpoList[1];\r\n        this.form.get('charCPO').setValue(toSelect);\r\n        this.getStationByCPO(toSelect.cpo_id);\r\n      }\r\n      this.filteredOptionsCharCPO = this.form.controls.charCPO.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.cpo_name),\r\n          map(name => name ? this._filterCharCPO(name) : this.cpoList)\r\n        );\r\n    } \r\n  }\r\n  onCPOChange(event) {\r\n    this.stationList = [];\r\n    this.form.get('charStat').setValue(\"\");\r\n    this.getStationByCPO(event);\r\n  }\r\n  \r\n  getStationByCPO(id) {\r\n    this.stationList = JSON.parse(localStorage.getItem('StationList'));\r\n    this.station =[];\r\n\r\n    if (this.localStorage.role_code != \"END\") {\r\n      for(var i = 0; i< this.stationList.length; i++){\r\n        if(id == this.stationList[i].cpo_id){\r\n          this.station.push( this.stationList[i])\r\n        }\r\n        if (id == -1) {\r\n          this.station.push(this.stationList[i])\r\n        }\r\n      }\r\n      if (this.station != null && this.station != undefined && this.station.length > 0) {\r\n        const toSelect =  this.station[0];\r\n        this.form.get('charStat').setValue(toSelect);\r\n        this.getBookingModels()\r\n      }\r\n      this.filteredOptionsCharStat = this.form.controls.charStat.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.station_name),\r\n          map(station_name => station_name ? this._filterCharStat(station_name) : this.station)\r\n        );\r\n    } \r\n\r\n  }\r\n  onStationChange(id) {\r\n    this.stationID = id\r\n    this.getBookingModels();\r\n  }\r\n\r\n  \r\n  displayCharClient(item: any): string {\r\n    return item && item.client_name ? item.client_name : '';\r\n  }\r\n  displayCharCPO(item: any): string {\r\n    return item && item.cpo_name ? item.cpo_name : '';\r\n  }\r\n  displayCharStat(item: any): string {\r\n    return item && item.station_name ? item.station_name : '';\r\n  }\r\n\r\n  private _filterCharStat(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.station.filter(option => option.station_name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharCPO(name: string): any[] {\r\n    this.form.get('charStat').setValue('');\r\n    const filterValue = name.toLowerCase();\r\n    return this.cpoList.filter(option => option.cpo_name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharClient(name: string): any[] {\r\n    this.form.get('charCPO').setValue('');\r\n    this.form.get('charStat').setValue('');\r\n    const filterValue = name.toLowerCase();\r\n    return this.clientList.filter(option => option.client_name.toLowerCase().includes(filterValue));\r\n  }\r\n  \r\n  \r\n\r\n  \r\n\r\n\r\n\r\n\r\n}\r\n\r\n","\r\n<div style=\"text-align: left ;margin-left: 10px;margin-bottom:10px;margin-top: 10px;\">\r\n    <button mat-mini-fab  color=\"primary\" (click)=\"tableExport()\"  matTooltip=\"Excel Download\">\r\n        <mat-icon>sim_card_download</mat-icon> \r\n      </button>&nbsp;&nbsp;\r\n      <button mat-mini-fab  color=\"primary\" (click)=\"pdfExport()\"  matTooltip=\"PDF Download\">\r\n        <mat-icon>picture_as_pdf</mat-icon> \r\n      </button>\r\n    \r\n    <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n</div>\r\n<mat-card style=\"padding:16px  !important; display:none;\" *ngIf=\"localStorage.role_code != 'END' \">\r\n    <mat-card-content>\r\n        <form [formGroup]=\"form\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\">\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                    <mat-label>Select Client</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"charClient\" [matAutocomplete]=\"autoClient\" readonly>\r\n                    <mat-autocomplete #autoClient=\"matAutocomplete\" [displayWith]=\"displayCharClient\"\r\n                        (optionSelected)='onClientChange($event.option.value.client_id)'>\r\n                        <mat-option *ngFor=\"let option of filteredOptionsCharClient | async\" [value]=\"option\">\r\n                            {{option.client_name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select client\">expand_more</mat-icon>\r\n                    <mat-error *ngIf=\"form.get('charClient').invalid\">\r\n                        Please select client \r\n                    </mat-error>\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                    <mat-label>Select CPO's</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"charCPO\" [matAutocomplete]=\"auto1\" readonly>\r\n                    <mat-autocomplete #auto1=\"matAutocomplete\" [displayWith]=\"displayCharCPO\"\r\n                        (optionSelected)='onCPOChange($event.option.value.cpo_id)'>\r\n                        <mat-option *ngFor=\"let option of filteredOptionsCharCPO | async\" [value]=\"option\">\r\n                            {{option.cpo_name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select CPO\" >expand_more</mat-icon>\r\n                    <mat-error *ngIf=\"form.get('charCPO').invalid\">\r\n                        Please select  CPO\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                    <mat-label>Select Charging Station</mat-label>\r\n                    <input type=\"text\" matInput formControlName=\"charStat\" [matAutocomplete]=\"auto2\" readonly>\r\n                    <mat-autocomplete #auto2=\"matAutocomplete\" [displayWith]=\"displayCharStat\"\r\n                        (optionSelected)='onStationChange($event.option.value.station_id)'>\r\n                        <mat-option *ngFor=\"let option of filteredOptionsCharStat | async\" [value]=\"option\">\r\n                            {{option.station_name}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charging station\">expand_more</mat-icon>\r\n                    <mat-error *ngIf=\"form.get('charStat').invalid\">\r\n                        Please select charging station\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n            </div>\r\n            \r\n        </form>\r\n    </mat-card-content>\r\n</mat-card>\r\n<div fxLayout=\"row wrap\"  class=\"page-layout simple fullwidth\"  style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\" >\r\n       \r\n        <div class=\"\">\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\"  [exampleEntity]=\"filterEntity\"\r\n            [filterType]=\"filterType\"  matSort class=\"mat-elevation-z8\">\r\n                <ng-container matColumnDef=\"booking_number\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!bookingNumberSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Booking Number &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('bookingNumberSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"bookingNumberSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Booking Number\" [(ngModel)]=\"filterEntity.code\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('bookingNumberSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.booking_number}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"username\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!userNameSearch\"  class=\"custom_font_size\" style=\"display: flex;\">User Name &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('userNameSearch',$event)\">search</mat-icon> </span>\r\n\t\t\t\t\t\t<mat-form-field *ngIf=\"userNameSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"User Name\" [(ngModel)]=\"filterEntity.username\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('userNameSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.username}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"mobile\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!mobileSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Moblie &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('mobileSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"mobileSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Mobile\" [(ngModel)]=\"filterEntity.mobile\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('mobileSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.mobile}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"registration_no\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!registrationSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Registration Number &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('registrationSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field  *ngIf=\"registrationSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Registration Number\" [(ngModel)]=\"filterEntity.registration_no\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('registrationSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.registration_no}} </td>\r\n                </ng-container>\r\n                \r\n\r\n                <ng-container matColumnDef=\"booking_date\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!bookingDateSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Booking Date &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('bookingDateSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"bookingDateSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Booking Date\" [(ngModel)]=\"filterEntity.booking_date_string\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('bookingDateSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.booking_date_string}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"start_time\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!startTimeSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Start Time &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('startTimeSearch',$event)\">search</mat-icon> </span>\r\n\t\t\t\t\t\t<mat-form-field *ngIf=\"startTimeSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Start Time\" [(ngModel)]=\"filterEntity.start_time\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('startTimeSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.start_time}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"end_time\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!endTimeSearch\"  class=\"custom_font_size\" style=\"display: flex;\">End Time &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('endTimeSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"mobileSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"End Time\" [(ngModel)]=\"filterEntity.end_time\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('endTimeSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.end_time}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"booking_status_description\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!bookingStatusSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Booking Status &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('bookingStatusSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field  *ngIf=\"bookingStatusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Booking Status\" [(ngModel)]=\"filterEntity.booking_status_description\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('bookingStatusSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.booking_status_description}} </td>\r\n                </ng-container>\r\n\r\n\r\n\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!statusSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Status &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"\r\n                        [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n                <!-- <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef  >\r\n                        <span class=\"custom_font_size\">Action</span> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        \r\n                        <mat-icon color=\"primary\" matTooltip=\"View\"\r\n                        (click)=\"viewDialog('VIEW',element)\"\r\n                        style=\"cursor:pointer\">visibility</mat-icon>&nbsp;&nbsp;\r\n                        \r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" \r\n                        (click)=\"openDialog('EDIT',element)\" \r\n                        style=\"cursor:pointer\">edit</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon  color=\"warn\"  matTooltip=\"Remove\"  \r\n                        (click)=\"delete(element.id)\" \r\n                        style=\"cursor:pointer\">delete</mat-icon>\r\n                    </td>\r\n                </ng-container> -->\r\n                \r\n                <!-- <tr mat-header-row  *matHeaderRowDef=\"['lable_code','lable_name', 'lable_charger_type','lable_manufacturer','lable_status','lable_Active']\"></tr> -->\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n               \r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport {  FormControl, FormArray } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { Router } from '@angular/router';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { ChargerTypeService } from 'app/shared/services/charger-type/charger-type.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith,tap} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nexport interface ChargingModel {\r\n  id ?: number;\r\n  client_id ?: number;\r\n  charger_type_id : number;\r\n  client_name ?: string;\r\n  manufacturer_id : number ;\r\n  manufacturer_name ?: string ;\r\n  charger_model_type_id : number;\r\n  charger_model_type_name ?: string;\r\n  battery_backup : string;\r\n  code : string;\r\n  name : string;\r\n  description : string;\r\n  communication_protocol_id : number;\r\n  communication_protocol_name ?: string;\r\n  communication_mode : string;\r\n  card_reader_type : string;\r\n  no_of_connectors : number;\r\n  connector_data : ChargingModelConnectorMap[];\r\n  status : string ;\r\n  created_date ?: string ;\r\n  created_by ?: number;\r\n  modify_date ?: string ;\r\n  modify_by ?: number;\r\n}\r\n\r\nexport interface ChargingModelConnectorMap{\r\n  id : number;\r\n  model_id : number;\r\n  connector_type_id : number;\r\n  io_type_id : number;\r\n  current_type_id : number;\r\n  voltage : number;\r\n  phase : number;\r\n  max_amp : number;\r\n  power : number;\r\n  frequency : number;\r\n  status : string ;\r\n  created_date : string ;\r\n  created_by : number;\r\n  modify_date : string ;\r\n  modify_by : number;\r\n}\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-view-dialog',\r\n  templateUrl: './view-dialog.component.html',\r\n  styleUrls: ['./view-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ViewDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  \r\n  chargerTypes :any;\r\n  manufacturers:any;\r\n  chargerModelTypes:any;\r\n  communicationProtocols:any;\r\n  connectorTypes:any;\r\n  ioTypes:any;\r\n  currentTypes:any;\r\n  batteryBackup = false;\r\n  rfidCardReader = false;\r\n  status = false;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"rfidToggleElement\") rfid: any;\r\n  @ViewChild(\"activeElement\") active:any;\r\n  filteredOptionsCharType: Observable<any[]>;\r\n  filteredOptionsManufacturer: Observable<any[]>;\r\n  filteredOptionsCharModelType : Observable<any[]>;\r\n  filteredOptionsCommunicationProto: Observable<any[]>;\r\n  communicationModeData: string[] = ['LAN', 'SIM', 'WIFI'];\r\n // messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder, private chargerTypeService: ChargerTypeService, \r\n    private snackBar: MatSnackBar,public dialogRef: MatDialogRef<ViewDialogComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, \r\n    private chargingModelService : ChargingModelService, \r\n     private masterService: MasterService,\r\n    private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      chargerType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      manufacturer: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      chargerModelType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      batteryBackup: [{value:false},  [Validators.required]],\r\n      code: ['', [ Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description: ['',[Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      communicationProtocol: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      communicationMode: ['', [Validators.required]],\r\n      cardReaderType: ['', [Validators.required]],\r\n      noOfConnectors: [{value : '',disabled : true}, [Validators.required,Validators.pattern(PATTERNS.ONLY_NUMBERS)]],\r\n      connectorForm : this.fb.array([this.createConnectorFG()]) ,\r\n    });\r\n\r\n    this.getChargetTypes();\r\n    this.getManufacturers();\r\n    this.getChargerModelTypes();\r\n    this.getCommunicationProtocols();\r\n    this.getConnectorTypes();\r\n    this.getIOTypes();\r\n    this.getCurrentTypes();   \r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n   this.filteredOptions();\r\n  }\r\n\r\n  private createConnectorFG(): FormGroup {\r\n    return new FormGroup({\r\n      connectorType: new FormControl(''),\r\n      ioType: new FormControl(''),\r\n      currentType: new FormControl('',),\r\n      voltage: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      phase: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      maxAmp: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      power: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      frequency: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)])\r\n    });\r\n  }\r\n\r\n  public addConnectorFG() {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    connectorForm.push(this.createConnectorFG());\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  public removeConnectorFG(i: number) {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    if (connectorForm.length > 1) {\r\n      connectorForm.removeAt(i)\r\n    } else {\r\n      connectorForm.reset()\r\n    }\r\n\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  getChargetTypes(){\r\n    this.chargerTypeService.getChargerTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerTypes = data;\r\n        \r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerTypes.find(c => c.id == this.params.data.charger_type_id);\r\n          this.form.get('chargerType').setValue(toSelect);\r\n         this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n            //tap(() => this.form.controls.chargerType.setValue(toSelect)),\r\n           //tap(() => this.form.get('chargerType').setValue({name:toSelect.name, id:toSelect.id})),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n         \r\n         );\r\n        }\r\n        \r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getManufacturers(){\r\n    this.masterService.getManufacturers().subscribe(\r\n      (data:any)=>{\r\n        this.manufacturers = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n          this.form.get('manufacturer').setValue(toSelect);\r\n          this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n           // tap(() => this.form.controls.manufacturer.setValue(toSelect)),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n          );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getChargerModelTypes(){\r\n    this.masterService.getChargerModelTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerModelTypes = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerModelTypes.find(c => c.id == this.params.data.charger_model_type_id);\r\n         this.form.get('chargerModelType').setValue(toSelect);\r\n         this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n           //tap(() => this.form.controls.chargerModelType.setValue(toSelect)),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n         );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCommunicationProtocols(){\r\n    this.masterService.getCommunicationProtocols().subscribe(\r\n      (data:any)=>{\r\n        this.communicationProtocols = data;\r\n        if(this.isEditMode){\r\n          \r\n          const toSelect = this.communicationProtocols.find(c => c.id == this.params.data.communication_protocol_id);\r\n          this.form.get('communicationProtocol').setValue(toSelect);\r\n          this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          //tap(() => this.form.controls.communicationProtocol.setValue(toSelect)),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n        );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getConnectorTypes(){\r\n    this.masterService.getConnectorTypes().subscribe(\r\n      (data:any)=>{\r\n        \r\n        this.connectorTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getIOTypes(){\r\n    this.masterService.getIOTypes().subscribe(\r\n      (data:any)=>{\r\n        this.ioTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCurrentTypes(){\r\n    this.masterService.getCurrentTypes().subscribe(\r\n      (data:any)=>{\r\n        this.currentTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onYesClick(){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n    \r\n\r\n      let connectors=[] ;\r\n  \r\n      formValues.connectorForm.forEach(item => {\r\n        connectors.push({\r\n          connector_type_id : item.connectorType ,\r\n          io_type_id : item.ioType,\r\n          current_type_id : item.currentType,\r\n          voltage : item.voltage ,\r\n          phase : item.phase,\r\n          max_amp : item.maxAmp,\r\n          power : item.power,\r\n          frequency : item.frequency,\r\n          status : 'Y',\r\n          created_by : this.localStorage.userId \r\n        })\r\n      });\r\n  \r\n      \r\n      let params : ChargingModel = {\r\n        charger_type_id : formValues.chargerType.id,\r\n        manufacturer_id : formValues.manufacturer.id ,\r\n        charger_model_type_id : formValues.chargerModelType.id ,\r\n        battery_backup  : this.batteryBackup == true ? 'Y' : 'N',\r\n        code : formValues.code ,\r\n        name : formValues.name ,\r\n        description : formValues.description ,\r\n        communication_protocol_id : formValues.communicationProtocol.id ,\r\n        communication_mode : formValues.communicationMode ,\r\n        card_reader_type : formValues.cardReaderType ,\r\n        no_of_connectors : formValues.connectorForm.length ,\r\n        connector_data : connectors,\r\n        status : this.status == true ? 'Y' : 'N',\r\n        created_by : this.localStorage.userId \r\n      }\r\n  \r\n  \r\n      if (this.isEditMode){\r\n        params.id = this.params.data.id,\r\n        params.modify_by = this.localStorage.userId;\r\n      } else{\r\n        params.created_by = this.localStorage.userId;\r\n      }\r\n  \r\n      \r\n  \r\n      if (this.isEditMode){\r\n        this.chargingModelService.update(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      }else{\r\n        this.chargingModelService.create(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.chargerCreateMessage, 'Dismiss', { duration: 5000 });\r\n            // this.router.navigate(['/chargingModel/crud/list']);\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n    \r\n      }\r\n    \r\n        this.dialogRef.close(params);\r\n    }\r\n   \r\n    return;\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('code').setValue(params.data.code);\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    var temp = new Array();\r\n    temp = this.params.data.communication_mode.split(\",\");\r\n\r\n    this.form.get('communicationMode').setValue(temp);\r\n    this.form.get('cardReaderType').setValue(params.data.card_reader_type);\r\n    this.form.get('noOfConnectors').setValue(params.data.no_of_connectors);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n    this.batteryBackup = params.data.battery_backup == 'Y' ? true : false;\r\n\r\n    this.assignValuesFG(params.data.connector_data);\r\n  }\r\n\r\n  assignValuesFG(data){\r\n\r\n    let connector_data = [];\r\n\r\n    data.forEach(connector => {\r\n      this.addConnectorFG();\r\n      connector_data.push({ id : connector.id ,\r\n        model_id : connector.model_id ,\r\n        connectorType : connector.connector_type_id ,\r\n        ioType : connector.io_type_id ,\r\n        currentType : connector.current_type_id ,\r\n        voltage : connector.voltage ,\r\n        phase : connector.phase ,\r\n        maxAmp : connector.max_amp ,\r\n        power : connector.power ,\r\n        frequency : connector.frequency ,\r\n        status : connector.status ,\r\n        created_date : connector.created_date ,\r\n        created_by : connector.created_by ,\r\n        modify_date : connector.modify_date ,\r\n        modify_by : connector.modify_by })\r\n    });\r\n    \r\n   this.removeConnectorFG(data.length);\r\n\r\n   const connectorForm = this.form.get('connectorForm') as FormArray;\r\n\r\n   connectorForm.patchValue(connector_data);\r\n\r\n\r\n  }\r\n\r\n  clkBatteryBackup(event){\r\n    this.batteryBackup = event.checked;\r\n    this.ref.checked = this.batteryBackup;\r\n  }\r\n  clkRfidCardReader(event){\r\n    this.rfidCardReader = event.checked;\r\n    this.rfid.checked = this.rfidCardReader;\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.active.checked = this.status;\r\n  }\r\n  \r\n  filteredOptions(){\r\n    this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n    );\r\n    this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n     \r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n    );\r\n    this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n    );\r\n    this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n      );\r\n  }\r\n  displayCharType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayManfacturer(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCharModelType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCommunicationProto(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }  \r\n  private _filterCharType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterManfacturer(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.manufacturers.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharModelType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerModelTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCommunicationProtocol(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.communicationProtocols.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n\r\n\r\n<mat-toolbar class=\"action_toolbar\">Variants</mat-toolbar>\r\n<div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n\t<div id=\"forms\" class=\"page-layout simple fullwidth mat-dialog\" fxLayout=\"column\">\r\n\t\t<form [formGroup]=\"form\" class=\"\" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\">\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"chargerType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerType').invalid\">Please select charger model</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Manufacturer</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"manufacturer\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"manufacturerAuto\">\r\n\t\t\t\t\t<mat-autocomplete #manufacturerAuto=\"matAutocomplete\" [displayWith]=\"displayManfacturer\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsManufacturer | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('manufacturer').invalid\">Please select manufacturer</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model Type</mat-label>\r\n\t\t\t\t\t<input type=\"text\" readonly matInput formControlName=\"chargerModelType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerModelTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerModelTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharModelType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharModelType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerModelType').invalid\">Please select charger model type</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Code</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"code\" maxlength=\"20\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Name</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"name\" maxlength=\"50\" required\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\">Please enter name</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"description\" maxlength=\"200\"\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Protocol</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"communicationProtocol\" required\r\n\t\t\t\t\t\tautocomplete=\"off\" [matAutocomplete]=\"communicationProtocolAuto\">\r\n\t\t\t\t\t<mat-autocomplete #communicationProtocolAuto=\"matAutocomplete\"\r\n\t\t\t\t\t\t[displayWith]=\"displayCommunicationProto\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCommunicationProto | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationProtocol').invalid\">Please select communication protocol\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Mode</mat-label>\r\n\t\t\t\t\t<mat-select formControlName=\"communicationMode\" disabled multiple>\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let communication of communicationModeData\" [value]=\"communication\">\r\n\t\t\t\t\t\t\t{{communication}}</mat-option>\r\n\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationMode').invalid\">Please enter communication mode</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Card Reader Type</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"cardReaderType\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('cardReaderType').invalid\">Please enter card reader type\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>No Of Connectors</mat-label>\r\n\t\t\t\t\t<input matInput numbersOnly readonly placeholder=\"\" formControlName=\"noOfConnectors\" required\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.required\">Please enter numbers of connectors\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.pattern\">Only numbers are allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<div fxFlex=\"15\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Battery Backup</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle disabled class=\"example-margin sm-txt mt-10\" color=\"primary\"\r\n\t\t\t\t\t\t[checked]=\"batteryBackup\" (change)=\"clkBatteryBackup($event)\" #toggleElement>\r\n\t\t\t\t\t\t{{batteryBackup ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"17\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">RFID Card Reader</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle disabled class=\"example-margin sm-txt mt-10\" color=\"primary\"\r\n\t\t\t\t\t\t[checked]=\"rfidCardReader\" (change)=\"clkRfidCardReader($event)\" #rfidToggleElement>\r\n\t\t\t\t\t\t{{rfidCardReader ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"18\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle disabled class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n\t\t\t\t\t\t(change)=\"updateStatus($event)\" #activeElement>\r\n\t\t\t\t\t\t{{status ? 'Active' : 'Inactive'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<mat-card style=\"box-shadow: none!important;\">\r\n\t\t\t\t<div formArrayName=\"connectorForm\">\r\n\t\t\t\t\t<div fxLayout=\"column\" *ngFor=\"let cf of form.get('connectorForm')['controls']; let i = index\"\r\n\t\t\t\t\t\t[formGroupName]=\"i\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tConnector {{i+1}}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select disabled formControlName=\"connectorType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of connectorTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>I/O Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select disabled formControlName=\"ioType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of ioTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Current Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select disabled formControlName=\"currentType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of currentTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Voltage(V)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput readonly formControlName=\"voltage\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('voltage').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Phase</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput readonly placeholder=\"\" formControlName=\"phase\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('phase').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Max Amp(A)</mat-label>\r\n\t\t\t\t\t\t\t\t<input readonly matInput placeholder=\"\" formControlName=\"maxAmp\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('maxAmp').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Power(KW)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput readonly placeholder=\"\" formControlName=\"power\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('power').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Frequency(Hz)</mat-label>\r\n\t\t\t\t\t\t\t\t<input readonly matInput placeholder=\"\" formControlName=\"frequency\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('frequency').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<!-- <div class=\"add-row\">\r\n              <mat-label class=\"sm-txt\">Add Row</mat-label>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"primary\" aria-label=\"Add\"\r\n                (click)=\"addConnectorFG()\" matTooltip=\"Add\">\r\n              <mat-icon>add_circle</mat-icon>\r\n              </button>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"warn\" aria-label=\"Remove/clear\"\r\n                (click)=\"removeConnectorFG(i)\" matTooltip=\"Remove\">\r\n              <mat-icon>delete</mat-icon>\r\n              </button>\r\n            </div> -->\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</mat-card>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\t\t\t\t<!-- button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\"\r\n      (click)=\"onYesClick()\">{{isEditMode ? 'Save' : 'Save'}}</button> -->\r\n\t\t\t\t<button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t</form>\r\n\t</div>\r\n</div>","\r\nimport { Component, OnInit, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { BookingService } from 'app/shared/services/booking/booking.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { jsPDF } from 'jspdf';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport 'jspdf-autotable';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\nexport class BookingModel {\r\n  id: number;\r\n  booking_number: number;\r\n  username: string;\r\n  mobile: number;\r\n  registration_no: string;\r\n  booking_date: number;\r\n  booking_date_string: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  booking_status_description: string;\r\n\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list-approved',\r\n  templateUrl: './list-approved.component.html',\r\n  styleUrls: ['./list-approved.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n  providers: [DatePipe]\r\n})\r\nexport class ListApprovedComponent implements OnInit {\r\n  filterEntity: BookingModel;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['select', 'booking_number', 'username', 'mobile', 'registration_no', 'booking_date', 'start_time', 'end_time', 'booking_status_description'];\r\n  head = [['Booking Number', 'Username', 'Mobile', 'Registration Number', 'Booking Date', 'Start Time', 'End Time', 'Booking Status']];\r\n  dataSource: MatTableDataSource<BookingModel>;\r\n  selection = new SelectionModel<BookingModel>(true, []);\r\n  bookingModels: BookingModel[];\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  dialogRef: any;\r\n  bookingNumberSearch = false;\r\n  userNameSearch = false;\r\n  mobileSearch = false;\r\n  registrationSearch = false;\r\n  bookingDateSearch = false;\r\n  startTimeSearch = false;\r\n  endTimeSearch = false;\r\n  bookingStatusSearch = false;\r\n  localStorage: any;\r\n  exportedData: any[];\r\n  filteredOptionsCharClient: Observable<any[]>;\r\n  filteredOptionsCharCPO: Observable<any[]>;\r\n  filteredOptionsCharStat: Observable<any[]>;\r\n\r\n  form: FormGroup;\r\n  clientCpoStaDetails: any;\r\n  clientList: any;\r\n  cpoList: any;\r\n  stationList: any;\r\n  station: any;\r\n  //messageConstant = MessageConstant;\r\n  constructor(private bookingService: BookingService, public dialog: MatDialog,\r\n    private snackBar: MatSnackBar, private cdr: ChangeDetectorRef, public datepipe: DatePipe, private fb: FormBuilder) {\r\n    this.form = this.fb.group({\r\n      charClient: [''],\r\n      charCPO: [''],\r\n      charStat: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.clientCpoStaDetails = JSON.parse(localStorage.getItem('clientCpoStaDetails'));\r\n    //this.getBookingModels();\r\n    this.filterEntity = new BookingModel();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.getClients();\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getBookingModels() {\r\n    let formValues = this.form.value;\r\n    let params = {\r\n      status: \"P\",\r\n      station_id: formValues.charStat.station_id,\r\n      f_date: \"\",\r\n      t_date: \"\",\r\n      user_id: this.localStorage.userId,\r\n    }\r\n    this.bookingService.getallbookingscw(params).subscribe(\r\n      (resp: any) => {\r\n        //;\r\n        if (resp != null) {\r\n          this.bookingModels = resp.data;\r\n\r\n          for (var i = 0; i < this.bookingModels.length; i++) {\r\n            this.bookingModels[i].booking_date_string = this.datepipe.transform(this.bookingModels[i].booking_date, 'dd/MM/yyyy hh:mm:ss');\r\n\r\n\r\n          }\r\n          this.dataSource = new MatTableDataSource(this.bookingModels);\r\n\r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n          this.cdr.detectChanges();\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n  changeVisibility(visibleOption, ev) {\r\n    ev.stopPropagation();\r\n    if (visibleOption == 'bookingNumberSearch') {\r\n      this.bookingNumberSearch = !this.bookingNumberSearch;\r\n      this.filterEntity.booking_number = null;\r\n    }\r\n    if (visibleOption == 'userNameSearch') {\r\n      this.userNameSearch = !this.userNameSearch;\r\n      this.filterEntity.username = \"\";\r\n    }\r\n    if (visibleOption == 'mobileSearch') {\r\n      this.mobileSearch = !this.mobileSearch;\r\n      this.filterEntity.mobile = null;\r\n    }\r\n    if (visibleOption == 'registrationSearch') {\r\n      this.registrationSearch = !this.registrationSearch;\r\n      this.filterEntity.registration_no = \"\";\r\n    }\r\n    if (visibleOption == 'bookingDateSearch') {\r\n      this.bookingDateSearch = !this.bookingDateSearch;\r\n      this.filterEntity.booking_date_string = \"\";\r\n    }\r\n    if (visibleOption == 'startTimeSearch') {\r\n      this.startTimeSearch = !this.startTimeSearch;\r\n      this.filterEntity.start_time = \"\";\r\n    }\r\n    if (visibleOption == 'endTimeSearch') {\r\n      this.endTimeSearch = !this.endTimeSearch;\r\n      this.filterEntity.end_time = \"\";\r\n    }\r\n    if (visibleOption == 'bookingStatusSearch') {\r\n      this.bookingStatusSearch = !this.bookingStatusSearch;\r\n      this.filterEntity.booking_status_description = \"\";\r\n    }\r\n\r\n  }\r\n  tableExport() {\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var bookingModel = this.dataSource.filteredData[i];\r\n      var data = {\r\n        'Booking Number': bookingModel.booking_number, 'User Name ': bookingModel.username, 'Mobile': bookingModel.mobile,\r\n        'Registration Number': bookingModel.registration_no, 'Booking Date ': bookingModel.booking_date_string,\r\n        'Start Time': bookingModel.start_time, 'End Time': bookingModel.end_time,\r\n        'Booking Status': bookingModel.booking_status_description\r\n      };\r\n      this.exportedData.push(data);\r\n    }\r\n    const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n    const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workBook, workSheet, 'SheetName');\r\n    XLSX.writeFile(workBook, 'Booking.xlsx');\r\n  }\r\n\r\n  pdfExport() {\r\n    var doc = new jsPDF({ // set needed dimensions for any elemen\r\n\r\n    });\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chrger = this.dataSource.filteredData[i];\r\n      var data = [chrger.booking_number, chrger.username, chrger.mobile, chrger.registration_no, chrger.booking_date_string, chrger.start_time, chrger.end_time, chrger.booking_status_description];\r\n\r\n      this.exportedData.push(data);\r\n    }\r\n    var img = new Image();\r\n    var imgRight = new Image();\r\n    var src = 'assets/images/logos/logo_sparkev_main.png';\r\n    var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n    imgRight.src = srcSparkEV;\r\n    var createdDate = new Date().toLocaleString(('en-GB'));\r\n    img.src = src;\r\n    doc.setFontSize(11);\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(18);\r\n\r\n    (doc as any).autoTable({\r\n      head: this.head,\r\n      body: this.exportedData,\r\n      theme: 'grid',\r\n      headStyles: { fontStyle: 'majalla', fillColor: [11, 148, 68] },\r\n      styles: {\r\n        cellPadding: 1,\r\n        fontSize: 8,\r\n\r\n      },\r\n\r\n      margin: { top: 22 },\r\n      didDrawCell: data => {\r\n      },\r\n      didDrawPage: data => {\r\n        doc.addImage(img , 15, 7, 15, 6);\r\n        doc.addImage(imgRight, 170, 7, 25, 6);\r\n\r\n        doc.text('Booking Approved Report', doc.internal.pageSize.getWidth() / 2, 11, { align: 'center' });\r\n\r\n        doc.setTextColor(211, 211, 211);\r\n        doc.setFontSize(60);\r\n        doc.setGState(doc.GState({ opacity: 0.6 }));\r\n        doc.text('Confidential/Not for Public use', 25, 285, null, 60,);\r\n        doc.setGState(doc.GState({ opacity: 1 }));\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(9);\r\n        doc.text('Date:' + createdDate, 15, 18);\r\n\r\n        doc.text('Generated By:' + this.localStorage.f_Name, 195, 18, { align: 'right' });\r\n        doc = this.addWaterMark(doc);\r\n      }\r\n    })\r\n\r\n    // below line for Open PDF document in new tab\r\n    doc.output('dataurlnewwindow');\r\n\r\n    // below line for Download PDF document  \r\n    doc.save('Booking Approved report.pdf');\r\n\r\n  }\r\n  addWaterMark(doc) {\r\n    var newpage = doc.getNumberOfPages();\r\n    const i = doc.internal.getNumberOfPages();\r\n    doc.setTextColor(100);\r\n    doc.setFontSize(10);\r\n    //Print Page 1 of 4 for example\r\n\r\n    doc.text('Page ' + String(i) + ' of ' + String(newpage), 210 - 20, 297 - 10, null, null, \"right\");\r\n    return doc;\r\n\r\n  }\r\n\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected() ?\r\n      this.selection.clear() :\r\n      this.dataSource.data.forEach(row => this.selection.select(row));\r\n  }\r\n  bookingSelection() {\r\n    this.selection.selected.forEach(s => console.log(s.booking_number));\r\n  }\r\n  approveBookings() {\r\n    const booking_id = this.selection.selected.map(v => (v.booking_number));\r\n    let formValues = this.form.value;\r\n    let param = {\r\n\r\n      \"action\": \"A\",\r\n      \"booking_id\": booking_id,\r\n      \"station_id\": formValues.charStat.id,\r\n      \"modified_by\": this.localStorage.userId,\r\n    }\r\n    this.bookingService.ackBookingCW(param).subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n\r\n          this.getBookingModels();\r\n          this.snackBar.open(MessageConstant.bookingApproved, 'Dismiss', { duration: 5000 });\r\n        }\r\n        else {\r\n          this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  getClients() {\r\n    this.clientList = JSON.parse(localStorage.getItem('ClientList'));\r\n    if (this.localStorage.role_code != \"END\") {\r\n      if (this.clientList != null && this.clientList != undefined) {\r\n        const toSelect = this.clientList[0];\r\n        this.form.get('charClient').setValue(toSelect);\r\n        this.getCPOByClient(toSelect.client_id);\r\n      }\r\n      this.filteredOptionsCharClient = this.form.controls.charClient.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.client_name),\r\n          map(name => name ? this._filterCharClient(name) : this.clientList)\r\n        );\r\n\r\n    }\r\n  }\r\n  onClientChange(client_id) {\r\n    this.cpoList = [];\r\n    this.stationList = [];\r\n    this.form.get('charCPO').setValue(\"\");\r\n    this.form.get('charStat').setValue(\"\");\r\n    this.getCPOByClient(client_id);\r\n  }\r\n\r\n  getCPOByClient(client_id) {\r\n    this.cpoList = JSON.parse(localStorage.getItem('CpoList'));\r\n    if (this.localStorage.role_code != \"END\") {\r\n      if (this.cpoList != null && this.cpoList != undefined) {\r\n        const toSelect = this.cpoList.length == 1 ? this.cpoList[0] : this.cpoList[1];\r\n        this.form.get('charCPO').setValue(toSelect);\r\n        this.getStationByCPO(toSelect.cpo_id);\r\n      }\r\n      this.filteredOptionsCharCPO = this.form.controls.charCPO.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.cpo_name),\r\n          map(name => name ? this._filterCharCPO(name) : this.cpoList)\r\n        );\r\n    }\r\n  }\r\n  onCPOChange(event) {\r\n    this.stationList = [];\r\n    this.form.get('charStat').setValue(\"\");\r\n    this.getStationByCPO(event);\r\n    //this.getChargerbyCPO(event);\r\n    // this.getOCPPTag(event);\r\n  }\r\n\r\n  getStationByCPO(id) {\r\n    this.stationList = JSON.parse(localStorage.getItem('StationList'));\r\n    this.station = [];\r\n\r\n    if (this.localStorage.role_code != \"END\") {\r\n      for (var i = 0; i < this.stationList.length; i++) {\r\n        if (id == this.stationList[i].cpo_id) {\r\n          this.station.push(this.stationList[i])\r\n        }\r\n        if (id == -1) {\r\n          this.station.push(this.stationList[i])\r\n        }\r\n      }\r\n      if (this.station != null && this.station != undefined && this.station.length > 0) {\r\n        const toSelect = this.station[0];\r\n        this.form.get('charStat').setValue(toSelect);\r\n        this.getBookingModels();\r\n      }\r\n      this.filteredOptionsCharStat = this.form.controls.charStat.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.station_name),\r\n          map(station_name => station_name ? this._filterCharStat(station_name) : this.station)\r\n        );\r\n    }\r\n  }\r\n  onStationChange(event) {\r\n    this.getBookingModels();\r\n  }\r\n\r\n  displayCharClient(item: any): string {\r\n    return item && item.client_name ? item.client_name : '';\r\n  }\r\n  displayCharCPO(item: any): string {\r\n    return item && item.cpo_name ? item.cpo_name : '';\r\n  }\r\n  displayCharStat(item: any): string {\r\n    return item && item.station_name ? item.station_name : '';\r\n  }\r\n\r\n  private _filterCharClient(name: string): any[] {\r\n    this.form.get('charCPO').setValue('');\r\n    this.form.get('charStat').setValue('');\r\n    const filterValue = name.toLowerCase();\r\n    return this.clientList.filter(option => option.client_name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  private _filterCharCPO(name: string): any[] {\r\n    this.form.get('charStat').setValue('');\r\n    const filterValue = name.toLowerCase();\r\n    return this.cpoList.filter(option => option.cpo_name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  private _filterCharStat(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.station.filter(option => option.station_name.toLowerCase().includes(filterValue));\r\n  }\r\n}\r\n\r\n","\r\n    <div style=\"text-align: left ;\r\nmargin-left: 10px;\r\nmargin-bottom:10px;margin-top: 10px;\">\r\n        <button mat-mini-fab  color=\"primary\" (click)=\"tableExport()\"  matTooltip=\"Excel Download\">\r\n            <mat-icon>sim_card_download</mat-icon> \r\n          </button>&nbsp;&nbsp;\r\n          <button mat-mini-fab  color=\"primary\" (click)=\"pdfExport()\"  matTooltip=\"PDF Download\">\r\n            <mat-icon>picture_as_pdf</mat-icon> \r\n          </button>&nbsp;&nbsp;\r\n          <button mat-mini-fab  color=\"primary\" (click)=\"approveBookings()\"  matTooltip=\"Approve Booking\">\r\n            <mat-icon>task</mat-icon> \r\n          </button>\r\n        <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n    </div>\r\n    <mat-card style=\"padding:16px  !important; display:none;\" *ngIf=\"localStorage.role_code != 'END' \">\r\n        <mat-card-content>\r\n            <form [formGroup]=\"form\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                        <mat-label>Select Client</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"charClient\" [matAutocomplete]=\"autoClient\" readonly>\r\n                        <mat-autocomplete #autoClient=\"matAutocomplete\" [displayWith]=\"displayCharClient\"\r\n                            (optionSelected)='onClientChange($event.option.value.client_id)' >\r\n                            <mat-option *ngFor=\"let option of filteredOptionsCharClient | async\" [value]=\"option\">\r\n                                {{option.client_name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select client\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('charClient').invalid\">\r\n                            Please select client \r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                        <mat-label>Select CPO's</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"charCPO\" [matAutocomplete]=\"auto1\" readonly>\r\n                        <mat-autocomplete #auto1=\"matAutocomplete\" [displayWith]=\"displayCharCPO\"\r\n                            (optionSelected)='onCPOChange($event.option.value.cpo_id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsCharCPO | async\" [value]=\"option\">\r\n                                {{option.cpo_name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select CPO\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('charCPO').invalid\">\r\n                            Please select CPO\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" style=\"height: 60px; \" fxFlex=\"33\" class=\"pr-4\">\r\n                        <mat-label>Select Charging Station</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"charStat\" [matAutocomplete]=\"auto2\" readonly>\r\n                        <mat-autocomplete #auto2=\"matAutocomplete\" [displayWith]=\"displayCharStat\"\r\n                            (optionSelected)='onStationChange($event.option.value.station_id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsCharStat | async\" [value]=\"option\">\r\n                                {{option.station_name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charging station\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('charStat').invalid\">\r\n                            Please select charging station\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <!-- <div   fxFlex=\"10\" class=\" example-button-container pr-4 mb-16\">\r\n                            <button mat-mini-fab color=\"warn\" (click)=\"getAllCharger()\">\r\n                                <mat-icon>restart_alt</mat-icon>\r\n                            </button>\r\n                          </div> -->\r\n\r\n                </div>\r\n            </form>\r\n        </mat-card-content>\r\n    </mat-card>\r\n    <div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n        <div class=\"content\" style=\"min-width: auto;\">\r\n\r\n            <div class=\"mat-elevation-z8\">\r\n                <table mat-table matTableFilter [dataSource]=\"dataSource\" [exampleEntity]=\"filterEntity\"\r\n                    [filterType]=\"filterType\" matSort class=\"mat-elevation-z8\">\r\n                    <ng-container matColumnDef=\"select\">\r\n                        <th mat-header-cell *matHeaderCellDef > \r\n                          <mat-checkbox (change)=\"$event ? masterToggle() : null\" style=\"width: 40px;\"\r\n                                        [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n                          </mat-checkbox>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                                        (change)=\"$event ? selection.toggle(row) : null\"\r\n                                        [checked]=\"selection.isSelected(row)\">\r\n                          </mat-checkbox>\r\n                        </td>\r\n                      </ng-container>\r\n                    \r\n                    <ng-container matColumnDef=\"booking_number\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!bookingNumberSearch\" class=\"custom_font_size\" style=\"display: flex;\">Booking\r\n                                Number &nbsp;&nbsp; <mat-icon matSuffix\r\n                                    (click)=\"changeVisibility('bookingNumberSearch',$event)\">search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"bookingNumberSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"Booking Number\" [(ngModel)]=\"filterEntity.code\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('bookingNumberSearch',$event)\">\r\n                                    highlight_off</mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.booking_number}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"username\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!userNameSearch\" class=\"custom_font_size\" style=\"display: flex;\">User Name\r\n                                &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('userNameSearch',$event)\">\r\n                                    search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"userNameSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"User Name\" [(ngModel)]=\"filterEntity.username\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('userNameSearch',$event)\">highlight_off\r\n                                </mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.username}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"mobile\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!mobileSearch\" class=\"custom_font_size\" style=\"display: flex;\">Moblie\r\n                                &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('mobileSearch',$event)\">\r\n                                    search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"mobileSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"Mobile\" [(ngModel)]=\"filterEntity.mobile\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('mobileSearch',$event)\">highlight_off\r\n                                </mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.mobile}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"registration_no\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!registrationSearch\" class=\"custom_font_size\"\r\n                                style=\"display: flex;\">Registration Number &nbsp;&nbsp; <mat-icon matSuffix\r\n                                    (click)=\"changeVisibility('registrationSearch',$event)\">search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"registrationSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"Registration Number\"\r\n                                    [(ngModel)]=\"filterEntity.registration_no\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('registrationSearch',$event)\">\r\n                                    highlight_off</mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.registration_no}} </td>\r\n                    </ng-container>\r\n\r\n\r\n                    <ng-container matColumnDef=\"booking_date\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!bookingDateSearch\" class=\"custom_font_size\" style=\"display: flex;\">Booking\r\n                                Date &nbsp;&nbsp; <mat-icon matSuffix\r\n                                    (click)=\"changeVisibility('bookingDateSearch',$event)\">search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"bookingDateSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"Booking Date\"\r\n                                    [(ngModel)]=\"filterEntity.booking_date_string\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('bookingDateSearch',$event)\">highlight_off\r\n                                </mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.booking_date_string}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"start_time\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!startTimeSearch\" class=\"custom_font_size\" style=\"display: flex;\">Start Time\r\n                                &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('startTimeSearch',$event)\">\r\n                                    search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"startTimeSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"Start Time\" [(ngModel)]=\"filterEntity.start_time\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('startTimeSearch',$event)\">highlight_off\r\n                                </mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.start_time}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"end_time\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!endTimeSearch\" class=\"custom_font_size\" style=\"display: flex;\">End Time\r\n                                &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('endTimeSearch',$event)\">\r\n                                    search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"mobileSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"End Time\" [(ngModel)]=\"filterEntity.end_time\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('endTimeSearch',$event)\">highlight_off\r\n                                </mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.end_time}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"booking_status_description\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!bookingStatusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Booking\r\n                                Status &nbsp;&nbsp; <mat-icon matSuffix\r\n                                    (click)=\"changeVisibility('bookingStatusSearch',$event)\">search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"bookingStatusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"Booking Status\"\r\n                                    [(ngModel)]=\"filterEntity.booking_status_description\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('bookingStatusSearch',$event)\">\r\n                                    highlight_off</mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\"> {{row.booking_status_description}} </td>\r\n                    </ng-container>\r\n\r\n\r\n\r\n                    <ng-container matColumnDef=\"status\">\r\n                        <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                            <span *ngIf=\"!statusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Status\r\n                                &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">\r\n                                    search</mat-icon> </span>\r\n                            <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                                <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                                <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">highlight_off\r\n                                </mat-icon>\r\n                            </mat-form-field>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                            {{row.statusString}} </td>\r\n                    </ng-container>\r\n                   \r\n\r\n                    \r\n                    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                    <!-- Row shown when there is no matching data. -->\r\n\r\n                </table>\r\n\r\n                <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n            </div>\r\n        </div>\r\n    </div>\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->","import { ChangeDetectorRef, Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-booking-crud',\r\n  templateUrl: './booking-crud.component.html',\r\n  styleUrls: ['./booking-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class BookingCrudComponent implements OnInit {\r\n  // Nav bar demo\r\n  tabLinks = [\r\n    //   { label: 'Booking Details', link: 'list' },\r\n    // { label: 'Pending Bookings', link: 'pendingBookings' },\r\n    //   { label: 'Add New Booking', link: 'create' }\r\n  ];\r\n  menuArray: any;\r\n  localStorage: any;\r\n  objectData: any;\r\n  objectChildData: any;\r\n  tempLinks = [];\r\n\r\n  constructor(private router: Router, private cdr: ChangeDetectorRef, private _utilityService: UtilityService) {\r\n\r\n  }\r\n  ngAfterViewInit() {\r\n    this._utilityService.activeMenuItems$.subscribe(menuItemSelecte => {\r\n      this.menuArray = menuItemSelecte;\r\n      if (this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined) {\r\n        this.menuArray = JSON.parse(localStorage.getItem('activeMenuItems'));\r\n      }\r\n      this.cdr.detectChanges();\r\n    })\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    let nav_list = this.localStorage.nav_list_with_tab;\r\n    nav_list.filter((x) => {\r\n      if (x.id === \"bookingManagement\") {\r\n        this.objectData = x;\r\n\r\n        if(this.objectData.children != null && this.objectData.children!= undefined){\r\n          this.objectData.children.filter((y) => {\r\n            if (y.id === \"crud\") {\r\n              this.objectChildData = y;\r\n              if(this.objectChildData.children != null && this.objectChildData != undefined){\r\n                let isDefaultRoutePermeted = false;\r\n                this.objectChildData.children.filter((z) => {\r\n                  if (z.id === \"bookingDetails\") {\r\n                    isDefaultRoutePermeted = true;\r\n                    this.tempLinks.push({ label: 'Booking Details', link: 'list' });\r\n                  }\r\n                  if (z.id === \"pendingBookings\") {\r\n                    this.tempLinks.push({ label: 'Pending Bookings', link: 'pendingBookings' });\r\n                  }\r\n                  if (z.id === \"addNewBooking\") {\r\n                    this.tempLinks.push({ label: 'Add New', link: 'create' });\r\n                  }\r\n                });\r\n                this.tabLinks = this.tempLinks;\r\n                if (!isDefaultRoutePermeted) {\r\n                  this.router.navigate(['/bookingManagement/crud/' + this.tempLinks[0].link]);\r\n                }\r\n                }\r\n              }\r\n             \r\n          });\r\n        }\r\n        \r\n      }\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent { }\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}} \r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\nimport {ListApprovedComponent} from '../list-approved/list-approved.component'\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent, canActivate:[AuthGuard] },\r\n  { path : 'list', component : ListComponent, canActivate:[AuthGuard] },\r\n\t  {path: 'pendingBookings',component:ListApprovedComponent},\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl, FormControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { VehicleService } from 'app/shared/services/master/vehicle/vehicle.service';\r\nimport { Router } from '@angular/router';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { Subject } from 'rxjs';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport { FuseConfigService } from '@fuse/services/config.service';\r\nimport { AccountService } from 'app/shared/services/account/account.service';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-registerUser-dialog',\r\n  templateUrl: './registerUser-dialog.component.html',\r\n  styleUrls: ['./registerUser-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class RegisterUserDialogComponent implements OnInit {\r\n\r\n  \r\n  registerForm: FormGroup;\r\n  isPasswordFieldType: boolean;\r\n  isPasswordConfirmFieldType: boolean;\r\n  logs:any;\r\n  validateOTP:boolean= false;\r\n  hideDetail:boolean= true;\r\n  // Private\r\n  isErrorMessage = false;\r\n  errorMessage = \"\";\r\n  isSuccessMessage = false;\r\n  successMessage =\"\";\r\n  private _unsubscribeAll: Subject<any>;\r\n\r\n  form: FormGroup;\r\n  brands:any;\r\n  models:any;\r\n  connector_types:any;\r\n  localStorage : any;\r\n  filteredOptionsbrands: Observable<any[]>;\r\n  filteredOptionsModel: Observable<any[]>;\r\n  filteredOptionsCurrType: Observable<any[]>;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  status = false;\r\n  errorMsg:String;\r\n  splitted:String;\r\n\r\n  otpForm: FormGroup;\r\n  selectedIndex = 0;\r\n  isFirstTab = true;\r\n  isSecondTab = true;\r\n \r\n  constructor(\r\n    public dialogRef: MatDialogRef<RegisterUserDialogComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, \r\n    private accountService: AccountService,\r\n     private _formBuilder: FormBuilder,private router : Router,private masterService : MasterService,\r\n     private vehicleService : VehicleService,private snackBar: MatSnackBar) {}\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this._formBuilder.group({\r\n      f_name: ['', [Validators.required]],\r\n      l_name: ['', [Validators.required]],\r\n      username: ['', [Validators.required]],\r\n      email: ['', [Validators.required]],\r\n      MobNo: ['', [Validators.required, Validators.pattern('^((\\\\+91-?)|0)?[0-9]{10}$')]],\r\n      u_altmobile: ['',],\r\n      password: ['', [Validators.required]],\r\n      confirmPassword: ['', [this.confirmValidator]],\r\n    });\r\n\r\n    this.otpForm = this._formBuilder.group({\r\n      otp :['']\r\n    });\r\n\r\n    this.initialize();\r\n  }\r\n  initialize(){\r\n    ////\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    \r\n    this.form = this._formBuilder.group({\r\n      brand: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      model: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      connector_type : ['', [autocompleteObjectValidator(),Validators.required]],\r\n      registration: ['', [Validators.required,\r\n        Validators.minLength(8),Validators.maxLength(100),\r\n        Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      yearOfManufacture: ['', [Validators.required]],\r\n      engineNumber: ['', [ Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      chassisNumber: ['', [ Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      VINnumber: [''],\r\n      status : this.status == true ? 'Y' : 'N'   \r\n      // vehicle: ['', [Validators.required]],\r\n      // manufacturer: ['', [Validators.required]],\r\n      \r\n    });\r\n\r\n    this.getBrands();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n  confirmValidator = (control: FormControl): { [s: string]: boolean } => {\r\n    if (!control.value) {\r\n      return { error: true, required: true };\r\n    } else if (control.value !== this.registerForm.controls.password.value) {\r\n      return { error: true, confirm: true };\r\n    }\r\n  }\r\n  togglePasswordFieldType(){\r\n    this.isPasswordFieldType = !this.isPasswordFieldType;\r\n  }\r\n  togglePasswordConfirmFieldType(){\r\n    this.isPasswordConfirmFieldType = !this.isPasswordConfirmFieldType;\r\n  }\r\n  public resolved(captchaResponse: string) {\r\n  }\r\n  register(){\r\n    this.selectedIndex = 1;\r\n    let formValues = this.registerForm.value;\r\n    let params = {\r\n      f_name:formValues.f_name, \r\n      l_name:formValues.l_name,\r\n      username : formValues.username ,\r\n      password : formValues.confirmPassword ,\r\n      mobile :   formValues.MobNo ,\r\n      alt_mobile : \"1234567890\" ,\r\n      email : formValues.email,\r\n      device_id : \"qwertyuiop\",\r\n      app_version : \"9876543wsdfghnm\",\r\n      os_version : \"10\",\r\n      user_type : \"END\" ,\r\n      can_expire :\"Y\",\r\n      is_verified : \"N\" ,\r\n      registration_origin : \"WEB\" ,\r\n      status : \"Y\" ,\r\n      created_by   : 1\r\n     \r\n    }\r\n     //\r\n      this.accountService.register(params).subscribe((res:any)=>{\r\n        //\r\n       \r\n        if(res.status == true){\r\n          this.successMessage = MessageConstant.userOTPSend;\r\n          this.isSuccessMessage = true;\r\n          this.isFirstTab = false;\r\n          setTimeout(() => {                           //<<<---using ()=> syntax\r\n          this.isSuccessMessage = false;\r\n        }, 3000);\r\n          //this.snackBar.open(MessageConstant.userOTPSend, 'Dismiss', { duration: 3000 });\r\n          this.hideDetail = false;\r\n          this.validateOTP = true;\r\n        }else{\r\n          this.errorMessage = MessageConstant.dublicateRegistrationMessage;\r\n          this.isErrorMessage = true;\r\n          setTimeout(() => {                           //<<<---using ()=> syntax\r\n          this.isErrorMessage = false;\r\n        }, 3000);\r\n          //this.snackBar.open(MessageConstant.dublicateRegistrationMessage, 'Dismiss', { duration: 3000 });\r\n        }\r\n        \r\n       },(err)=>{\r\n        this.errorMessage = MessageConstant.errorMessage;\r\n        this.isErrorMessage = true;\r\n        setTimeout(() => {                           //<<<---using ()=> syntax\r\n        this.isErrorMessage = false;\r\n      }, 3000);\r\n        //this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 3000 });\r\n       this.router.navigateByUrl('/register');   \r\n    })\r\n  }\r\n  vaidateOTP(){\r\n    let formValues = this.otpForm.value;\r\n    let params = {\r\n      username : formValues.username ,\r\n      mobile :   formValues.MobNo ,\r\n      email : formValues.email,\r\n      otp: formValues.otp\r\n     \r\n    }\r\n    this.accountService.verifyUserNew(params).subscribe((res:any)=>{\r\n      this.logs = res;\r\n      //this.router.navigateByUrl('/login'); \r\n      this.successMessage = MessageConstant.userRegisterdMessage;\r\n      this.isSuccessMessage = true;\r\n      this.isSecondTab = false;\r\n      setTimeout(() => {                           //<<<---using ()=> syntax\r\n      this.isSuccessMessage = false;\r\n    }, 3000);\r\n        //this.snackBar.open(MessageConstant.userRegisterdMessage, 'Dismiss', { duration: 3000 });\r\n     },(err)=>{\r\n      this.errorMessage = MessageConstant.errorMessage;\r\n      this.isErrorMessage = true;\r\n      setTimeout(() => {                           //<<<---using ()=> syntax\r\n      this.isErrorMessage = false;\r\n    }, 3000);\r\n      //this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 3000 });\r\n     this.router.navigateByUrl('/register');   \r\n  })\r\n  }\r\n  resendOTP(){\r\n    let formValues = this.otpForm.value;\r\n    let params = {\r\n      mobile :   formValues.MobNo ,\r\n      email : formValues.email,\r\n      username:formValues.username,\r\n      id:null,\r\n      otp_purpose : \"REGISTER\" \r\n    }\r\n    this.accountService.getotpNew(params).subscribe((res:any)=>{\r\n      this.logs = res;\r\n      this.successMessage = MessageConstant.getOTPMessage;\r\n      this.isSuccessMessage = true;\r\n      setTimeout(() => {                           //<<<---using ()=> syntax\r\n      this.isSuccessMessage = false;\r\n      }, 3000);\r\n        //this.snackBar.open(MessageConstant.getOTPMessage, 'Dismiss', { duration: 3000 });\r\n     },(err)=>{\r\n      this.errorMessage = MessageConstant.errorMessage;\r\n      this.isErrorMessage = true;\r\n      setTimeout(() => {                           //<<<---using ()=> syntax\r\n      this.isErrorMessage = false;\r\n    }, 3000);\r\n      //this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 3000 });\r\n      this.router.navigateByUrl('/register');   \r\n  })\r\n  }\r\n\r\n  getBrands(){\r\n    this.masterService.getBrands().subscribe(\r\n      (data:any)=>{\r\n        \r\n        this.brands = data;\r\n        \r\n        this.filteredOptionsbrands = this.form.controls.brand.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterbrands(name) : this.brands)\r\n        );\r\n      },\r\n      (err)=>{\r\n        ////\r\n      })\r\n  }\r\n  getModelsByBrand(id){\r\n    this.models=[];\r\n    this.connector_types=[];\r\n    this.masterService.getModelsByBrand(id).subscribe(\r\n      (data:any)=>{\r\n        this.models = data;\r\n        this.filteredOptionsModel = this.form.controls.model.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterModels(name) : this.models)\r\n        );\r\n      },\r\n      (err)=>{\r\n        ////\r\n      })\r\n  }\r\n  getConnectorTypeByModel(id){\r\n    this.connector_types=[];\r\n    this.masterService.getPublishedConnectorTypeByModel(id).subscribe(\r\n      (data:any)=>{\r\n        this.connector_types = data;\r\n        this.filteredOptionsCurrType = this.form.controls.connector_type.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterConnType(name) : this.connector_types)\r\n        );\r\n      },\r\n      (err)=>{\r\n        ////\r\n      })\r\n  }\r\n  onBrandChange(event){\r\n    this.getModelsByBrand(event);\r\n    this.form.get('model').setValue('');\r\n  }\r\n  onModelChange(event){\r\n    this.getConnectorTypeByModel(event);\r\n  }\r\n  onConnectorTypeChange(event){\r\n    ////\r\n    // this.getConnectorTypeByModel(event.value);\r\n  }\r\n\r\n  onSubmit(){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n    \r\n\r\n      let params = {\r\n          brand_id : formValues.brand.id,\r\n          model_id : formValues.model.id,\r\n          connector_type_id : formValues.connector_type.ct_id,\r\n          registration_no : formValues.registration,\r\n          year_of_manufacture : formValues.yearOfManufacture,\r\n          engine_no : formValues.engineNumber,\r\n          chassis_no : formValues.chassisNumber,\r\n          vin_no : formValues.VINnumber,\r\n          status :  this.status == true ? 'Y' : 'N', \r\n          created_by : this.localStorage.userId\r\n      }\r\n      this.vehicleService.register(params).subscribe(\r\n        (resp:any )=>{\r\n          ////\r\n          if(resp.status == true){\r\n            this.snackBar.open(MessageConstant.vehicleCreate, 'Dismiss', { duration: 5000 });\r\n            this.router.navigate(['/booking/crud/create']);\r\n          }else{\r\n            if(resp.err_code == \"ERROR : ER_DUP_ENTRY\"){\r\n              this. errorMsg = resp.message;\r\n              var index=  this. errorMsg.lastIndexOf(\" \");\r\n              \r\n              this.splitted = this. errorMsg.substring(index+1); \r\n              if(this.splitted == \"'registration_no'\" ){\r\n                this.snackBar.open(MessageConstant.registrationDuplicateVehicle, 'Dismiss', { duration: 5000 });\r\n              } if(this.splitted == \"'engine_no'\" ){\r\n                this.snackBar.open(MessageConstant.engineDuplicateVehicle, 'Dismiss', { duration: 5000 });\r\n              }if(this.splitted == \"'chassis_no'\" ){\r\n                this.snackBar.open(MessageConstant.chassisDuplicateVehicle, 'Dismiss', { duration: 5000 });\r\n              }\r\n\r\n            }else{\r\n              this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n            }\r\n            //this.snackBar.open(MessageConstant.errorMessage,'Dismiss', { duration: 5000 })\r\n          }\r\n  \r\n        },\r\n        (err)=>{\r\n          ////\r\n          this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n        }\r\n      )\r\n\r\n    }\r\n    else{\r\n      return;\r\n    }\r\n  }\r\n  onTabChange(event) {\r\n    this.selectedIndex = event.index;\r\n  }\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n  displayBrands(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayModels(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCurrentType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterbrands(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.brands.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterModels(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.models.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterConnType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.connector_types.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n\r\n}","<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n    style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n<mat-toolbar class=\"action_toolbar\">End User Register</mat-toolbar>\r\n<mat-tab-group dynamicHeight [selectedIndex]=\"selectedIndex\" (selectedTabChange)=\"onTabChange($event)\" class=\"pt-0 pb-0 mt-0 mb-0\">\r\n    <mat-tab label=\"New User Register\">\r\n        <div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n            <div id=\"registerForm\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n                <form [formGroup]=\"registerForm\" class=\"mat-elevation-z4 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n                    fxFlex=\"1 0 auto\" name=\"registerForm\">\r\n                    <div *ngIf=\"hideDetail\" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n                        fxLayoutGap=\"8px grid\">\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                                <mat-label>First Name</mat-label>\r\n                                <input matInput placeholder=\"\" formControlName=\"f_name\" required>\r\n                                <mat-icon style=\"color:#1c5483 !important\" matSuffix>person</mat-icon>\r\n                                <mat-error *ngIf=\"registerForm.get('f_name').invalid\">Please enter first name\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                            <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                                <mat-label>Last Name</mat-label>\r\n                                <input matInput placeholder=\"\" formControlName=\"l_name\" required>\r\n                                <mat-icon style=\"color:#1c5483 !important\" matSuffix>person</mat-icon>\r\n                                <mat-error *ngIf=\"registerForm.get('l_name').invalid\">Please enter last name</mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                            <mat-form-field appearance=\"outline\" class=\"pr-4\" fxFlex=\"50\">\r\n                                <mat-label>Username</mat-label>\r\n                                <input matInput placeholder=\"\" formControlName=\"username\" required\r\n                                    style=\"text-transform: none;\">\r\n                                <mat-icon style=\"color:#1c5483 !important\" matSuffix>account_circle</mat-icon>\r\n                                <mat-error *ngIf=\"registerForm.get('username').invalid\">Please enter name</mat-error>\r\n                            </mat-form-field>\r\n                            <mat-form-field appearance=\"outline\" class=\"pr-4\" fxFlex=\"50\">\r\n                                <mat-label>Email</mat-label>\r\n                                <input matInput placeholder=\"\" formControlName=\"email\" required\r\n                                    style=\"text-transform: none;\">\r\n                                <mat-icon style=\"color:#1c5483 !important\" matSuffix>email</mat-icon>\r\n                                <mat-error *ngIf=\"registerForm.get('email').invalid\">Please enter email</mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                            <mat-form-field appearance=\"outline\" class=\"pr-4\" fxFlex=\"50\">\r\n                                <mat-label>Mobile No</mat-label>\r\n                                <input matInput placeholder=\"\" type=\"number\" formControlName=\"MobNo\" required>\r\n                                <mat-icon style=\"color:#1c5483 !important\" matSuffix>smartphone</mat-icon>\r\n                                <mat-error *ngIf=\"registerForm.get('MobNo').hasError('required')\">Mobile Number is\r\n                                    Required\r\n                                </mat-error>\r\n                                <mat-error *ngIf=\"registerForm.get('MobNo').hasError('pattern')\">Mobile number must be\r\n                                    10 digit\r\n                                </mat-error>\r\n\r\n                            </mat-form-field>\r\n                            <mat-form-field appearance=\"outline\" class=\"pr-4\" fxFlex=\"50\">\r\n                                <mat-label>Alternate Mobile Number</mat-label>\r\n                                <input matInput placeholder=\"\" type=\"number\" formControlName=\"u_altmobile\">\r\n                                <mat-error *ngIf=\"registerForm.get('u_altmobile').invalid\">Please enter alternate mobile\r\n                                    no\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                            <mat-form-field appearance=\"outline\" class=\"pr-4\" fxFlex=\"50\">\r\n                                <mat-label>Password</mat-label>\r\n                                <input matInput placeholder=\"\" [type]=\"isPasswordFieldType ? 'text' : 'password'\"\r\n                                    formControlName=\"password\" required style=\"text-transform: none;\">\r\n                                <mat-icon (click)=\"togglePasswordFieldType()\" style=\"color:#1c5483 !important\"\r\n                                    matSuffix>\r\n                                    {{isPasswordFieldType ? 'visibility_off' :\r\n                                    'visibility'}}</mat-icon>\r\n                                <mat-error *ngIf=\"registerForm.get('password').invalid\">Please enter password\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n\r\n                            <mat-form-field appearance=\"outline\" class=\"pr-4\" fxFlex=\"50\">\r\n                                <mat-label>Confirm Password</mat-label>\r\n                                <input matInput placeholder=\"\" [type]=\"isPasswordConfirmFieldType ? 'text' : 'password'\"\r\n                                    formControlName=\"confirmPassword\" required style=\"text-transform: none;\">\r\n                                <mat-icon (click)=\"togglePasswordConfirmFieldType()\" style=\"color:#1c5483 !important\"\r\n                                    matSuffix>\r\n                                    {{isPasswordConfirmFieldType ?\r\n                                    'visibility_off' : 'visibility'}}</mat-icon>\r\n                                <mat-error *ngIf=\"registerForm.get('confirmPassword').hasError('required')\">Please\r\n                                    confirm\r\n                                    your password!\r\n                                </mat-error>\r\n                                <mat-error *ngIf=\"registerForm.get('confirmPassword').hasError('confirm')\">Password is\r\n                                    inconsistent!\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                            <div fxFlex=\"100\">\r\n                                <button mat-raised-button class=\"submit-button\" color=\"accent\" mat-raised-button\r\n                                    color=\"primary\" [disabled]=\"registerForm.invalid\" (click)=\"register()\">Proceed\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"remember-forgot-password\" *ngIf=\"isSuccessMessage\" fxLayout=\"row\"\r\n                            fxLayout.xs=\"column\" fxLayoutAlign=\"space-between center\">\r\n                            <mat-error style=\"color:white\"> <b> {{successMessage}}</b></mat-error>\r\n                        </div>\r\n                        <div class=\"remember-forgot-password\" *ngIf=\"isErrorMessage\" fxLayout=\"row\" fxLayout.xs=\"column\"\r\n                            fxLayoutAlign=\"space-between center\">\r\n                            <mat-error> <b> {{errorMessage}}</b></mat-error>\r\n                        </div>\r\n                    </div>\r\n                    <!-- <div *ngIf=\"validateOTP\" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n                        fxLayoutGap=\"8px grid\">\r\n                        <div>\r\n                            <mat-form-field appearance=\"outline\" fxFlex=\"100\">\r\n                                <mat-label>OTP</mat-label>\r\n                                <input matInput formControlName=\"otp\">\r\n                            </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"100\" fxFlex.lt-sm=\"100\" style=\"text-align:end\">\r\n                            <span><a style=\"font-size:14px;cursor: pointer;text-decoration: underline;\"\r\n                                    (click)=\"resendOTP()\">Resend\r\n                                    OTP</a></span>\r\n                        </div>\r\n\r\n                        <div fxFlex=\"100\" fxFlex.lt-sm=\"100\">\r\n                            <button mat-raised-button class=\"submit-button\" color=\"accent\" mat-raised-button\r\n                                color=\"primary\" (click)=\"vaidateOTP()\">Validate OTP</button>\r\n                        </div>\r\n                        <div class=\"remember-forgot-password\" *ngIf=\"isSuccessMessage\" fxLayout=\"row\"\r\n                            fxLayout.xs=\"column\" fxLayoutAlign=\"space-between center\">\r\n                            <mat-error style=\"color:white\"> <b> {{successMessage}}</b></mat-error>\r\n                        </div>\r\n                        <div class=\"remember-forgot-password\" *ngIf=\"isErrorMessage\" fxLayout=\"row\" fxLayout.xs=\"column\"\r\n                            fxLayoutAlign=\"space-between center\">\r\n                            <mat-error> <b> {{errorMessage}}</b></mat-error>\r\n                        </div>\r\n                    </div> -->\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    </mat-tab>\r\n    <mat-tab label=\"Verification\"  [disabled]='isFirstTab'>\r\n        <div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n            <div id=\"otpForm\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n                <form [formGroup]=\"otpForm\" class=\"mat-elevation-z4 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"otpForm\">\r\n                    <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n                        <div fxFlex=\"100\" fxFlex.lt-sm=\"100\" >\r\n                          <mat-form-field appearance=\"outline\"fxFlex=\"50\">\r\n                            <mat-label>OTP</mat-label>\r\n                            <input matInput formControlName=\"otp\">\r\n                          </mat-form-field>\r\n                        </div>\r\n                        <div fxFlex=\"100\" fxFlex.lt-sm=\"100\" style=\"text-align:end\">\r\n                          <span><a style=\"font-size:14px;cursor: pointer;text-decoration: underline;\" (click)=\"resendOTP()\">Resend\r\n                              OTP</a></span>\r\n                        </div>\r\n              \r\n                        <div fxFlex=\"100\" fxFlex.lt-sm=\"100\">\r\n                          <button mat-raised-button class=\"submit-button\" color=\"accent\" mat-raised-button color=\"primary\"\r\n                            (click)=\"vaidateOTP()\">Validate OTP</button>\r\n                        </div>\r\n                        <div class=\"remember-forgot-password\" *ngIf=\"isSuccessMessage\" fxLayout=\"row\" fxLayout.xs=\"column\"\r\n                          fxLayoutAlign=\"space-between center\">\r\n                          <mat-error style=\"color:white\"> <b> {{successMessage}}</b></mat-error>\r\n                        </div>\r\n                        <div class=\"remember-forgot-password\" *ngIf=\"isErrorMessage\" fxLayout=\"row\" fxLayout.xs=\"column\"\r\n                          fxLayoutAlign=\"space-between center\">\r\n                          <mat-error> <b> {{errorMessage}}</b></mat-error>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </mat-tab>\r\n\r\n    <mat-tab label=\"Vehicle Registration\" [disabled]='isSecondTab'>\r\n        <!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n        <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n            <form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n                fxFlex=\"1 0 auto\" name=\"form\" (submit)=\"onSubmit()\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Brand</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"brand\" [matAutocomplete]=\"brandAuto\" required>\r\n                        <mat-autocomplete #brandAuto=\"matAutocomplete\" [displayWith]=\"displayBrands\"\r\n                            (optionSelected)='onBrandChange($event.option.value.id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsbrands | async\" [value]=\"option\">\r\n                                {{option.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-error *ngIf=\"form.get('brand').invalid\">Please select brand\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Model</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"model\" [matAutocomplete]=\"modelAuto\" required>\r\n                        <mat-autocomplete #modelAuto=\"matAutocomplete\" [displayWith]=\"displayModels\"\r\n                            (optionSelected)='onModelChange($event.option.value.id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsModel | async\" [value]=\"option\">\r\n                                {{option.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n\r\n                        <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('model').invalid\">Please select model\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Connector Type</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"connector_type\" [matAutocomplete]=\"connTypeAuto\"\r\n                            required>\r\n                        <mat-autocomplete #connTypeAuto=\"matAutocomplete\" [displayWith]=\"displayModels\"\r\n                            (optionSelected)='onConnectorTypeChange($event.option.value.id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsCurrType | async\" [value]=\"option\">\r\n                                {{option.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('connector_type').invalid\">Please select model\r\n                        </mat-error>\r\n\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Registration Number</mat-label>\r\n                        <input matInput formControlName=\"registration\" required>\r\n                        <mat-error *ngIf=\"form.controls.registration.hasError('required')\">Please enter registration\r\n                            number</mat-error>\r\n                        <mat-error\r\n                            *ngIf=\"form.controls.registration.hasError('maxlength') || form.controls.registration.hasError('minlength')\">\r\n                            Registration number is incorrect</mat-error>\r\n                        <mat-error *ngIf=\"form.controls.registration.hasError('pattern')\">Special characters not\r\n                            allowed</mat-error>\r\n                    </mat-form-field>\r\n\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Year Of Manufacture</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"yearOfManufacture\" required>\r\n                        <mat-error *ngIf=\"form.controls.registration.hasError('required')\">Please enter year Of\r\n                            manufacture</mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Engine Number</mat-label>\r\n                        <input matInput formControlName=\"engineNumber\">\r\n\r\n                        <mat-error *ngIf=\"form.get('engineNumber').hasError('pattern')\">Special characters are not\r\n                            allowed\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Chassis Number</mat-label>\r\n                        <input matInput formControlName=\"chassisNumber\">\r\n\r\n                        <mat-error *ngIf=\"form.get('chassisNumber').hasError('pattern')\">Special characters are not\r\n                            allowed\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>VIN Number</mat-label>\r\n                        <input matInput formControlName=\"VINnumber\">\r\n                        <mat-error *ngIf=\"form.get('VINnumber').invalid\">Please enter vin number\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n                    <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n                    <button mat-raised-button color=\"warn\" class=\"mr-8\"\r\n                        routerLink=\"/booking/crud/create\">Cancel</button>\r\n\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    </mat-tab>\r\n</mat-tab-group>","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport {  FormControl, FormArray } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { Router } from '@angular/router';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { ChargerTypeService } from 'app/shared/services/charger-type/charger-type.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith,tap} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nexport interface ChargingModel {\r\n  id ?: number;\r\n  client_id ?: number;\r\n  charger_type_id : number;\r\n  client_name ?: string;\r\n  manufacturer_id : number ;\r\n  manufacturer_name ?: string ;\r\n  charger_model_type_id : number;\r\n  charger_model_type_name ?: string;\r\n  battery_backup : string;\r\n  code : string;\r\n  name : string;\r\n  description : string;\r\n  communication_protocol_id : number;\r\n  communication_protocol_name ?: string;\r\n  communication_mode : string;\r\n  card_reader_type : string;\r\n  no_of_connectors : number;\r\n  connector_data : ChargingModelConnectorMap[];\r\n  status : string ;\r\n  created_date ?: string ;\r\n  created_by ?: number;\r\n  modify_date ?: string ;\r\n  modify_by ?: number;\r\n}\r\n\r\nexport interface ChargingModelConnectorMap{\r\n  id : number;\r\n  model_id : number;\r\n  connector_type_id : number;\r\n  io_type_id : number;\r\n  current_type_id : number;\r\n  voltage : number;\r\n  phase : number;\r\n  max_amp : number;\r\n  power : number;\r\n  frequency : number;\r\n  status : string ;\r\n  created_date : string ;\r\n  created_by : number;\r\n  modify_date : string ;\r\n  modify_by : number;\r\n}\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-action-dialog',\r\n  templateUrl: './action-dialog.component.html',\r\n  styleUrls: ['./action-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  \r\n  chargerTypes :any;\r\n  manufacturers:any;\r\n  chargerModelTypes:any;\r\n  communicationProtocols:any;\r\n  connectorTypes:any;\r\n  ioTypes:any;\r\n  currentTypes:any;\r\n  batteryBackup = false;\r\n  rfidCardReader = false;\r\n  status = false;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"rfidToggleElement\") rfid: any;\r\n  @ViewChild(\"activeElement\") active:any;\r\n  filteredOptionsCharType: Observable<any[]>;\r\n  filteredOptionsManufacturer: Observable<any[]>;\r\n  filteredOptionsCharModelType : Observable<any[]>;\r\n  filteredOptionsCommunicationProto: Observable<any[]>;\r\n  communicationModeData: string[] = ['LAN', 'SIM', 'WIFI'];\r\n // messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder, private chargerTypeService: ChargerTypeService, \r\n    private snackBar: MatSnackBar,public dialogRef: MatDialogRef<ActionDialogComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, \r\n    private chargingModelService : ChargingModelService, \r\n     private masterService: MasterService,\r\n    private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      chargerType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      manufacturer: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      chargerModelType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      batteryBackup: [{value:false},  [Validators.required]],\r\n      code: ['', [ Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description: ['',[Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      communicationProtocol: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      communicationMode: ['', [Validators.required]],\r\n      cardReaderType: [''],\r\n      noOfConnectors: [{value : '',disabled : true}, [Validators.required,Validators.pattern(PATTERNS.ONLY_NUMBERS)]],\r\n      connectorForm : this.fb.array([this.createConnectorFG()]) ,\r\n    });\r\n\r\n    this.getChargetTypes();\r\n    this.getManufacturers();\r\n    this.getChargerModelTypes();\r\n    this.getCommunicationProtocols();\r\n    this.getConnectorTypes();\r\n    this.getIOTypes();\r\n    this.getCurrentTypes();   \r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n   this.filteredOptions();\r\n  }\r\n\r\n  private createConnectorFG(): FormGroup {\r\n    return new FormGroup({\r\n      connectorType: new FormControl(''),\r\n      ioType: new FormControl(''),\r\n      currentType: new FormControl('',),\r\n      voltage: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      phase: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      maxAmp: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      power: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      frequency: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)])\r\n    });\r\n  }\r\n\r\n  public addConnectorFG() {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    connectorForm.push(this.createConnectorFG());\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  public removeConnectorFG(i: number) {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    if (connectorForm.length > 1) {\r\n      connectorForm.removeAt(i)\r\n    } else {\r\n      connectorForm.reset()\r\n    }\r\n\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  getChargetTypes(){\r\n    this.chargerTypeService.getActiveChargerTypes().subscribe(\r\n      (resp:any)=>{\r\n        if(resp.status == true){\r\n          if(resp.data.length > 0){\r\n            this.chargerTypes = resp.data;\r\n        \r\n            if(this.isEditMode){\r\n              const toSelect = this.chargerTypes.find(c => c.id == this.params.data.charger_type_id);\r\n              this.form.get('chargerType').setValue(toSelect);\r\n             this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n             .pipe(\r\n               startWith(''),\r\n                //tap(() => this.form.controls.chargerType.setValue(toSelect)),\r\n               //tap(() => this.form.get('chargerType').setValue({name:toSelect.name, id:toSelect.id})),\r\n               map(value => typeof value === 'string' ? value : value.name),\r\n               map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n             \r\n             );\r\n            }\r\n          }else{\r\n            this.snackBar.open(MessageConstant.NoRecordFoundMessage,'Dismiss',{duration:2000});\r\n          }\r\n        }\r\n        \r\n        \r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getManufacturers(){\r\n    this.masterService.getManufacturers().subscribe(\r\n      (data:any)=>{\r\n        this.manufacturers = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n          this.form.get('manufacturer').setValue(toSelect);\r\n          this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n           // tap(() => this.form.controls.manufacturer.setValue(toSelect)),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n          );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getChargerModelTypes(){\r\n    this.masterService.getChargerModelTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerModelTypes = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerModelTypes.find(c => c.id == this.params.data.charger_model_type_id);\r\n         this.form.get('chargerModelType').setValue(toSelect);\r\n         this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n           //tap(() => this.form.controls.chargerModelType.setValue(toSelect)),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n         );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCommunicationProtocols(){\r\n    this.masterService.getCommunicationProtocols().subscribe(\r\n      (data:any)=>{\r\n        this.communicationProtocols = data;\r\n        if(this.isEditMode){\r\n          \r\n          const toSelect = this.communicationProtocols.find(c => c.id == this.params.data.communication_protocol_id);\r\n          this.form.get('communicationProtocol').setValue(toSelect);\r\n          this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          //tap(() => this.form.controls.communicationProtocol.setValue(toSelect)),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n        );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getConnectorTypes(){\r\n    this.masterService.getConnectorTypes().subscribe(\r\n      (data:any)=>{\r\n        \r\n        this.connectorTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getIOTypes(){\r\n    this.masterService.getIOTypes().subscribe(\r\n      (data:any)=>{\r\n        this.ioTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCurrentTypes(){\r\n    this.masterService.getCurrentTypes().subscribe(\r\n      (data:any)=>{\r\n        this.currentTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onYesClick(){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n    \r\n\r\n      let connectors=[] ;\r\n  \r\n      formValues.connectorForm.forEach(item => {\r\n        connectors.push({\r\n          connector_type_id : item.connectorType ,\r\n          io_type_id : item.ioType,\r\n          current_type_id : item.currentType,\r\n          voltage : item.voltage ,\r\n          phase : item.phase,\r\n          max_amp : item.maxAmp,\r\n          power : item.power,\r\n          frequency : item.frequency,\r\n          status : 'Y',\r\n          created_by : this.localStorage.userId \r\n        })\r\n      });\r\n  \r\n      \r\n      let params : ChargingModel = {\r\n        charger_type_id : formValues.chargerType.id,\r\n        manufacturer_id : formValues.manufacturer.id ,\r\n        charger_model_type_id : formValues.chargerModelType.id ,\r\n        battery_backup  : this.batteryBackup == true ? 'Y' : 'N',\r\n        code : formValues.code ,\r\n        name : formValues.name ,\r\n        description : formValues.description ,\r\n        communication_protocol_id : formValues.communicationProtocol.id ,\r\n        communication_mode : formValues.communicationMode ,\r\n        card_reader_type : formValues.cardReaderType ,\r\n        no_of_connectors : formValues.connectorForm.length ,\r\n        connector_data : connectors,\r\n        status : this.status == true ? 'Y' : 'N',\r\n        created_by : this.localStorage.userId \r\n      }\r\n  \r\n  \r\n      if (this.isEditMode){\r\n        params.id = this.params.data.id,\r\n        params.modify_by = this.localStorage.userId;\r\n      } else{\r\n        params.created_by = this.localStorage.userId;\r\n      }\r\n  \r\n      \r\n  \r\n      if (this.isEditMode){\r\n        this.chargingModelService.update(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      }else{\r\n        this.chargingModelService.create(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.chargerCreateMessage, 'Dismiss', { duration: 5000 });\r\n            // this.router.navigate(['/chargingModel/crud/list']);\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n    \r\n      }\r\n    \r\n        this.dialogRef.close(params);\r\n    }\r\n   \r\n    return;\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('code').setValue(params.data.code);\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    var temp = new Array();\r\n    temp = this.params.data.communication_mode.split(\",\");\r\n\r\n    this.form.get('communicationMode').setValue(temp);\r\n    this.form.get('cardReaderType').setValue(params.data.card_reader_type);\r\n    this.form.get('noOfConnectors').setValue(params.data.no_of_connectors);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n    this.batteryBackup = params.data.battery_backup == 'Y' ? true : false;\r\n\r\n    this.assignValuesFG(params.data.connector_data);\r\n  }\r\n\r\n  assignValuesFG(data){\r\n\r\n    let connector_data = [];\r\n\r\n    data.forEach(connector => {\r\n      this.addConnectorFG();\r\n      connector_data.push({ id : connector.id ,\r\n        model_id : connector.model_id ,\r\n        connectorType : connector.connector_type_id ,\r\n        ioType : connector.io_type_id ,\r\n        currentType : connector.current_type_id ,\r\n        voltage : connector.voltage ,\r\n        phase : connector.phase ,\r\n        maxAmp : connector.max_amp ,\r\n        power : connector.power ,\r\n        frequency : connector.frequency ,\r\n        status : connector.status ,\r\n        created_date : connector.created_date ,\r\n        created_by : connector.created_by ,\r\n        modify_date : connector.modify_date ,\r\n        modify_by : connector.modify_by })\r\n    });\r\n    \r\n   this.removeConnectorFG(data.length);\r\n\r\n   const connectorForm = this.form.get('connectorForm') as FormArray;\r\n\r\n   connectorForm.patchValue(connector_data);\r\n\r\n\r\n  }\r\n\r\n  clkBatteryBackup(event){\r\n    this.batteryBackup = event.checked;\r\n    this.ref.checked = this.batteryBackup;\r\n  }\r\n  clkRfidCardReader(event){\r\n    this.rfidCardReader = event.checked;\r\n    this.rfid.checked = this.rfidCardReader;\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.active.checked = this.status;\r\n  }\r\n  \r\n  filteredOptions(){\r\n    this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n    );\r\n    this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n     \r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n    );\r\n    this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n    );\r\n    this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n      );\r\n  }\r\n  displayCharType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayManfacturer(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCharModelType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCommunicationProto(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }  \r\n  private _filterCharType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterManfacturer(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.manufacturers.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharModelType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerModelTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCommunicationProtocol(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.communicationProtocols.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n  \r\n<mat-toolbar class=\"action_toolbar\"> Variants</mat-toolbar>\r\n<div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n\t<div id=\"forms\" class=\"page-layout simple fullwidth mat-dialog\" fxLayout=\"column\">\r\n\t\t<form [formGroup]=\"form\" class=\"\" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\">\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charger model\">model_training</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerType').invalid\">Please select charger model</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Manufacturer</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"manufacturer\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"manufacturerAuto\">\r\n\t\t\t\t\t<mat-autocomplete #manufacturerAuto=\"matAutocomplete\" [displayWith]=\"displayManfacturer\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsManufacturer | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select manufacturer\">\r\n\t\t\t\t\t\tprecision_manufacturing</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('manufacturer').invalid\">Please select manufacturer</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model Type</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerModelType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerModelTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerModelTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharModelType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharModelType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charger model type\">\r\n\t\t\t\t\t\tformat_list_bulleted</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerModelType').invalid\">Please select charger model type</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Code</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"code\" maxlength=\"200\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter code\">qr_code_scanner</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Name</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"name\" maxlength=\"200\" required autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter name\">badge</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\">Please enter name</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"description\" maxlength=\"200\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter description\">description\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Protocol</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"communicationProtocol\" required autocomplete=\"off\"\r\n\t\t\t\t\t\t[matAutocomplete]=\"communicationProtocolAuto\">\r\n\t\t\t\t\t<mat-autocomplete #communicationProtocolAuto=\"matAutocomplete\"\r\n\t\t\t\t\t\t[displayWith]=\"displayCommunicationProto\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCommunicationProto | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select communication protocol\">\r\n\t\t\t\t\t\timport_contacts</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationProtocol').invalid\">Please select communication protocol\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Mode</mat-label>\r\n\t\t\t\t\t<mat-select formControlName=\"communicationMode\" multiple>\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let communication of communicationModeData\" [value]=\"communication\">\r\n\t\t\t\t\t\t\t{{communication}}</mat-option>\r\n\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter communication mode\">burst_mode\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationMode').invalid\">Please enter communication mode</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Card Reader Type</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"cardReaderType\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter card reader type\">\r\n\t\t\t\t\t\tchrome_reader_mode</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('cardReaderType').invalid\">Please enter card reader type\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>No Of Connectors</mat-label>\r\n\t\t\t\t\t<input matInput numbersOnly placeholder=\"\" formControlName=\"noOfConnectors\" required\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter no. of connectors\">help\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.required\">Please enter numbers of connectors\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.pattern\">Only numbers are allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<div fxFlex=\"15\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Battery Backup</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"batteryBackup\"\r\n\t\t\t\t\t\t(change)=\"clkBatteryBackup($event)\" #toggleElement>\r\n\t\t\t\t\t\t{{batteryBackup ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"17\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">RFID Card Reader</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"rfidCardReader\"\r\n\t\t\t\t\t\t(change)=\"clkRfidCardReader($event)\" #rfidToggleElement>\r\n\t\t\t\t\t\t{{rfidCardReader ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"18\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n\t\t\t\t\t\t(change)=\"updateStatus($event)\" #activeElement>\r\n\t\t\t\t\t\t{{status ? 'Active' : 'Inactive'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<mat-card style=\"box-shadow: none!important;\">\r\n\t\t\t\t<div formArrayName=\"connectorForm\">\r\n\t\t\t\t\t<div fxLayout=\"column\" *ngFor=\"let cf of form.get('connectorForm')['controls']; let i = index\"\r\n\t\t\t\t\t\t[formGroupName]=\"i\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tConnector {{i+1}}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"connectorType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of connectorTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter connector type\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>I/O Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"ioType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of ioTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter I/O type\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Current Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"currentType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of currentTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter current type\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Voltage(V)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput formControlName=\"voltage\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter voltage \">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('voltage').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Phase</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"phase\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter phase\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('phase').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Max Amp(A)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"maxAmp\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter max Amp.\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('maxAmp').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Power(KW)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"power\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter power\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('power').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Frequency(Hz)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"frequency\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter frequency\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('frequency').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<div class=\"add-row\">\r\n\t\t\t\t\t\t\t\t<mat-label class=\"sm-txt\">Add Row</mat-label>\r\n\t\t\t\t\t\t\t\t<button class=\"float-left\" type=\"button\" mat-icon-button color=\"primary\"\r\n\t\t\t\t\t\t\t\t\taria-label=\"Add\" (click)=\"addConnectorFG()\" matTooltip=\"Add\">\r\n\t\t\t\t\t\t\t\t\t<mat-icon>add_circle</mat-icon>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t<button class=\"float-left\" type=\"button\" mat-icon-button color=\"warn\"\r\n\t\t\t\t\t\t\t\t\taria-label=\"Remove/clear\" (click)=\"removeConnectorFG(i)\" matTooltip=\"Remove\">\r\n\t\t\t\t\t\t\t\t\t<mat-icon>delete</mat-icon>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</mat-card>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\t\t\t\t<button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"onYesClick()\">{{isEditMode\r\n\t\t\t\t\t? 'Save' : 'Save'}}</button>\r\n\t\t\t\t<button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t</form>\r\n\t</div>\r\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup, FormControl, FormArray, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ChargingStationService } from 'app/shared/services/charging-station/charging-station.service';\r\nimport { ChargerService } from 'app/shared/services/charger/charger.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { RegisterUserDialogComponent } from 'app/main/booking/registerUser-dialog/registerUser-dialog.component';\r\nimport { RegisterVehicleDialogComponent } from 'app/main/booking/registerVehicle-dialog/registerVehicle-dialog.component';\r\nimport * as moment from 'moment';\r\nimport { BookingService } from 'app/shared/services/booking/booking.service';\r\n\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss'],\r\n  providers: [DatePipe],\r\n\r\n})\r\n\r\nexport class CreateComponent implements OnInit {\r\n\r\n\r\n  isLinear = true;\r\n  form: FormGroup;\r\n  PersonalFormGroup: FormGroup;\r\n  isEditable = false;\r\n  localStorage: any;\r\n  batteryBackup = false;\r\n  rfidCardReader = false;\r\n  is_read = false;\r\n  station: any;\r\n  charger: any;\r\n  connector: any;\r\n  chargingStations: any;\r\n  connectorTypes: any;\r\n  minDate = new Date();\r\n  filteredOptionsStationName: Observable<any[]>;\r\n  filteredOptionsCharger: Observable<any[]>;\r\n  filteredOptionsConnector: Observable<any[]>;\r\n  filteredOptionsConnectorType: Observable<any[]>;\r\n  chargerBookingObj: any;\r\n  availableTimeSlot: any;\r\n  selectedTimeSlot: any;\r\n  timeSlotDisabled: boolean = true;\r\n  vehicleList: any;\r\n  filteredOptionVehicleList: Observable<any[]>;\r\n  userVehicleDisabled: boolean = true;\r\n  userDetail: any;\r\n  vehicleListUpdate: any;\r\n  miniChargingTime: any;\r\n  maxiChargingTime: any;\r\n  configBookingData: any;\r\n  constructor(private _formBuilder: FormBuilder, private snackBar: MatSnackBar,\r\n    private router: Router, private chargingStationService: ChargingStationService, private chargerService: ChargerService,\r\n    public dialog: MatDialog, private bookingService: BookingService, private datePipe: DatePipe) {\r\n    this.batteryBackup = false;\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this._formBuilder.group({\r\n      station_name: ['', Validators.required],\r\n      charger: ['', Validators.required],\r\n      connectorType: ['', Validators.required],\r\n      connector: ['', Validators.required],\r\n      mobile: ['', [Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{10}$\")]],//\"[0-9]{0-10}]\"\r\n      uname: ['', Validators.required],\r\n      vehicle: ['', Validators.required],\r\n      cdate: [new Date(), [Validators.required]],\r\n      sTime: ['', [Validators.required]],\r\n      eTime: ['', [this.confirmValidator, Validators.required]],\r\n      duration: [''],\r\n      validUpto: [''],\r\n      validationCheck: [false, Validators.requiredTrue],\r\n      amount: ['']\r\n    });\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.chargerBookingObj = this.chargerService.chargerBookingobj;\r\n    this.getChargingStations();\r\n    if (this.localStorage.client_id == '0') {\r\n      this.form.get('mobile').setValue(this.localStorage.mobile);\r\n      this.form.get('uname').setValue(this.localStorage.userName);\r\n      this.getUserDetail(this.localStorage.mobile);\r\n    }\r\n\r\n  }\r\n\r\n  getChargingStations() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    this.chargingStationService.getActiveChargingStationsCW(this.localStorage.userId).subscribe(\r\n      (resp: any) => {\r\n        this.chargingStations = resp.data;\r\n        if (this.chargerBookingObj != null && this.chargerBookingObj != undefined) {\r\n          const toSelectSetation = this.chargingStations.find(c => c.id == this.chargerBookingObj.station_id);\r\n          this.form.get('station_name').setValue(toSelectSetation);\r\n          this.getChargerByStation(toSelectSetation.id)\r\n        }\r\n        this.filteredOptionsStationName = this.form.controls.station_name.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterStation(name) : this.chargingStations)\r\n          );\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  onStationChange(station) {\r\n    this.getChargerByStation(station.id);\r\n    this.form.get('charger').setValue('');\r\n    this.form.get('connectorType').setValue('');\r\n    this.form.get('connector').setValue('');\r\n    this.form.get('amount').setValue('');\r\n    this.form.get('validUpto').setValue('');\r\n    this.availableTimeSlot = [];\r\n  }\r\n  getChargerByStation(id) {\r\n    this.chargerService.getChargersByMappedStationId(id).subscribe(\r\n      (resp: any) => {\r\n        this.charger = resp.data;\r\n        if (this.chargerBookingObj != null && this.chargerBookingObj != undefined) {\r\n          const toSelectCharger = this.charger.find(c => c.charger_id == this.chargerBookingObj.charger_id);\r\n          this.form.get('charger').setValue(toSelectCharger);\r\n          this.onChargerChange(this.chargerBookingObj);\r\n        }\r\n        this.filteredOptionsCharger = this.form.controls.charger.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterCharger(name) : this.charger)\r\n          );\r\n      }\r\n      , (err) => {\r\n      }\r\n    )\r\n  }\r\n  onChargerChange(charger) {\r\n    this.form.get('connectorType').setValue(\"\");\r\n    this.form.get('connector').setValue(\"\");\r\n    this.form.get('amount').setValue('');\r\n    this.form.get('validUpto').setValue('');\r\n    this.availableTimeSlot = [];\r\n    this.connectorTypes = charger.connector_data;\r\n    this.connector = charger.connector_data;\r\n    if (this.chargerBookingObj != null && this.chargerBookingObj != undefined) {\r\n\r\n      const toSelectConnectorType = this.connectorTypes.find(c => c.connector_type_id == this.chargerBookingObj.connector_data[0].connector_type_id);\r\n      this.form.get('connectorType').setValue(toSelectConnectorType);\r\n\r\n      const toSelectConnector = this.connector.find(c => c.connector_id == this.chargerBookingObj.connector_data[0].connector_id);\r\n      this.form.get('connector').setValue(toSelectConnector);\r\n      this.getAvailableSlot();\r\n    }\r\n    this.filteredOptionsConnectorType = this.form.controls.connectorType.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.connector_type_name),\r\n        map(connector_type_name => connector_type_name ? this._filterConnectorType(connector_type_name) : this.connectorTypes)\r\n      );\r\n    // this.filteredOptionsConnector = this.form.controls.connector.valueChanges\r\n    //     .pipe(\r\n    //       startWith(''),\r\n    //       map(value => typeof value === 'string' ? value : value.connector_no),\r\n    //       map(connector_no => connector_no ? this._filterConnector(connector_no) : this.connector)\r\n    //     );\r\n\r\n  }\r\n  onConnectorTypeChange(connectorType) {\r\n    this.availableTimeSlot = [];\r\n    const toSelect = this.connector.find(c => c.map_id == connectorType.map_id);\r\n\r\n    this.form.get('connector').setValue(toSelect);\r\n    this.getAvailableSlot();\r\n  }\r\n  displayStationName(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCharger(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayConnectorType(item: any): string {\r\n    return item && item.connector_type_name ? item.connector_type_name : '';\r\n  }\r\n  displayConnector(item: any): string {\r\n    return item && item.connector_no ? item.connector_no : '';\r\n  }\r\n  private _filterStation(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargingStations.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharger(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.charger.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterConnectorType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.connector.filter(option => option.connector_type_name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  registerNew() {\r\n    const dialogRef = this.dialog.open(RegisterUserDialogComponent, {\r\n      width: '800px',\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog',\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n\r\n    });\r\n  }\r\n  confirmValidator = (control: FormControl): { [s: string]: boolean } => {\r\n    if (!control.value) {\r\n      return { error: true, required: true };\r\n    } else if (control.value < this.form.controls.eTime.value) {\r\n      return { error: true, confirm: true };\r\n    }\r\n  }\r\n  timeCalculate() {\r\n    let formValues = this.form.value;\r\n    var hms = moment.utc(moment(formValues.eTime, \"HH:mm:ss\").diff(moment(formValues.sTime, \"HH:mm:ss\"))).format(\"HH:mm:ss\")\r\n    var a = hms.split(':');\r\n    var minutes = (+a[0]) * 60 + (+a[1]);\r\n\r\n    this.form.get('duration').setValue(minutes);\r\n\r\n  }\r\n  submit() {\r\n    if (this.form.valid) {\r\n      let formValues = this.form.value;\r\n      let params = {\r\n        user_id: this.userDetail.id,\r\n        mobile: formValues.mobile,\r\n        vehicle_id: formValues.vehicle.id,\r\n        registration_no: formValues.vehicle.registration_no,\r\n        station_id: formValues.station_name.id,\r\n        charger_id: formValues.charger.charger_id,\r\n        connector_no: formValues.connector.connector_no,\r\n        connector_type_id: formValues.connectorType.connector_type_id,\r\n        booking_date: this.datePipe.transform(formValues.cdate, \"yyyy-MM-dd\"),\r\n        start_time: formValues.sTime,\r\n        end_time: formValues.eTime,\r\n        duration: formValues.duration,\r\n        adv_booking_amt: formValues.amount,//this.status == true ? 'Y' : 'N', \r\n        is_tnc_read: 1,\r\n        status: 'P',\r\n        created_by: this.localStorage.userId\r\n      }\r\n\r\n      this.bookingService.create(params).subscribe(\r\n        (resp: any) => {\r\n          if (resp.status == true) {\r\n            this.snackBar.open(MessageConstant.BookingCreateMessage, 'Dismiss', { duration: 5000 });\r\n            this.router.navigate(['/booking/crud/list']);\r\n          }\r\n          else {\r\n            this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n          }\r\n        },\r\n        (err) => {\r\n          this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n        }\r\n      )\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n  close() {\r\n    this.router.navigate(['/booking/crud/list']);\r\n  }\r\n  getAvailableSlot() {\r\n    let formValues = this.form.value;\r\n    var station_id = formValues.station_name.id;\r\n    var charger_id = formValues.charger.map_id;\r\n    var connector_id = formValues.connector.id;\r\n    var bookingDate = this.datePipe.transform(formValues.cdate, \"yyyy-MM-dd\");\r\n    this.bookingService.getAvailableTimeInterval(station_id, bookingDate, charger_id, connector_id).subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.availableTimeSlot = resp.data.available_intervals;\r\n          this.configBookingData = resp.data.booking_config[0];\r\n          this.snackBar.open(MessageConstant.BookingAvailableMessage, 'Dismiss', { duration: 5000 });\r\n          this.form.get('amount').setValue(resp.data.booking_config[0].adv_booking_amount);\r\n          this.form.get('validUpto').setValue(resp.data.booking_config[0].booking_validity_time);\r\n          //this.miniChargingTime = this.availableTimeSlot.from_time + resp.data.booking_config[0].min_charging_duration;\r\n        }\r\n        else {\r\n          this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n        }\r\n      },\r\n      (err) => {\r\n        ////\r\n        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n\r\n  }\r\n\r\n  timeBook(time_set, event, i) {\r\n    this.selectedTimeSlot = time_set;\r\n    this.timeSlotDisabled = false;\r\n  }\r\n\r\n  getUserMobile() {\r\n    let formValues = this.form.value;\r\n    this.getUserDetail(formValues.mobile);\r\n  }\r\n\r\n  getUserDetail(mobile) {\r\n    this.bookingService.getUserByMobile(mobile).subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          this.form.get('uname').setValue(resp.data.user_detail[0].username);\r\n          this.vehicleList = resp.data.vehicles.data;\r\n          this.userDetail = resp.data.user_detail[0];\r\n          this.userVehicleDisabled = false;\r\n          this.getVehicleList();\r\n        }\r\n        else {\r\n          this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n        }\r\n      },\r\n      (err) => {\r\n        ////\r\n        this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n      }\r\n    )\r\n  }\r\n\r\n  startTimeCheck() {\r\n    let formValues = this.form.value;\r\n    var miniTime = moment.utc(moment(formValues.sTime, \"HH:mm:ss\").add(this.configBookingData.min_charging_duration, 'minutes').format('HH:mm'));\r\n    this.miniChargingTime = miniTime;\r\n    var maxiTime = moment.utc(moment(formValues.sTime, \"HH:mm:ss\").add(this.configBookingData.max_charging_duration, 'minutes').format('HH:mm'));\r\n    this.maxiChargingTime = maxiTime;\r\n  }\r\n  stopTimeCheck() {\r\n\r\n  }\r\n\r\n  getVehicleList() {\r\n    if (this.vehicleListUpdate != null) {\r\n      const toSelectVechicle = this.vehicleList.find(c => c.id == this.vehicleListUpdate.id);\r\n      this.form.get('vehicle').setValue(toSelectVechicle);\r\n    }\r\n    this.filteredOptionVehicleList = this.form.controls.vehicle.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.registration_no),\r\n        map(registration_no => registration_no ? this._filterVehicle(registration_no) : this.vehicleList)\r\n      );\r\n  }\r\n\r\n  displayVehicle(item: any): string {\r\n    return item && item.registration_no ? item.registration_no : '';\r\n  }\r\n  private _filterVehicle(registration_no: string): any[] {\r\n    const filterValue = registration_no.toLowerCase();\r\n    return this.vehicleList.filter(option => option.registration_no.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  registerVehicle() {\r\n    const dialogRef = this.dialog.open(RegisterVehicleDialogComponent, {\r\n      width: '800px',\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      data: this.userDetail,\r\n      panelClass: 'app-action-dialog',\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result != null) {\r\n        let formValues = this.form.value;\r\n        this.getUserDetail(formValues.mobile);\r\n        this.vehicleListUpdate = result;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","<div fxLayout=\"column\" class=\"page-layout simple fullwidth\">\r\n\t<form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\" >\r\n\t\t\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Station</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"station_name\" autocomplete=\"off\" required [matAutocomplete]=\"stationNameAuto\">\r\n\t\t\t\t\t<mat-autocomplete #stationNameAuto=\"matAutocomplete\"  [displayWith]=\"displayStationName\"\r\n\t\t\t\t\t(optionSelected)='onStationChange($event.option.value)'>\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsStationName | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select station name\">\r\n\t\t\t\t\t\t\tmodel_training</mat-icon>\r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('station_name').invalid\">Please select station</mat-error>\t\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"charger\" autocomplete=\"off\" required [matAutocomplete]=\"chargerAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerAuto=\"matAutocomplete\"  [displayWith]=\"displayCharger\"\r\n\t\t\t\t\t(optionSelected)='onChargerChange($event.option.value)'>\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharger | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charger\">\r\n\t\t\t\t\t\t\tmodel_training</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('charger').invalid\">Please select charger</mat-error>\t\t\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"connectorType\" autocomplete=\"off\" required [matAutocomplete] = \"connectorTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #connectorTypeAuto=\"matAutocomplete\"  [displayWith]=\"displayConnectorType\"\r\n\t\t\t\t\t(optionSelected)='onConnectorTypeChange($event.option.value)'>\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsConnectorType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.connector_type_name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select connector\">\r\n\t\t\t\t\t\t\tmodel_training</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('connectorType').invalid\">Please select connector type</mat-error>\t\t\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Connector</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"connector\" readonly autocomplete=\"off\" required [matAutocomplete] = \"connectorAuto\">\r\n\t\t\t\t\t<mat-autocomplete #connectorAuto=\"matAutocomplete\"  [displayWith]=\"displayConnector\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsConnector | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.connector_no}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select connector\">\r\n\t\t\t\t\t\t\tmodel_training</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('connector').invalid\">Please select connector</mat-error>\t\t\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div *ngIf=\"availableTimeSlot !=null\">\r\n\t\t\t\t<div class=\"row\" style=\"padding-bottom:10px\">\r\n\t\t\t\t\t<div fxFlex=\"100\" class=\"pr-4\">\r\n\t\t\t\t\t\t<ul style=\"display:flex;padding-inline-start:5px;margin-top:1px\">\r\n\t\t\t\t\t\t  <li *ngFor=\"let option of availableTimeSlot; let i = index;\" style=\"list-style: none;display: contents;\" >\r\n\t\t\t\t\t\t\t<span class=\"chip\" (click)=\"timeBook(option,$event,i)\" [style.background-color]=\"option===selectedTimeSlot ? 'green' : ''\"> {{option?.from_time}} &nbsp;{{option?.to_time}} &nbsp;\r\n\t\t\t\t\t\t\t</span>&nbsp;&nbsp;\r\n\t\t\t\t\t\t  </li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Date</mat-label>\r\n\t\t\t\t\t<input matInput [matDatepicker]=\"dp3\" [min]=\"minDate\" formControlName=\"cdate\" (dateChange)=\"getAvailableSlot()\" >\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t  <mat-icon style=\"padding-top:7px;\" class=\"secondary-text\" matTooltip=\"Please enter  date\">help</mat-icon>\r\n\t\t\t\t\t  <mat-datepicker-toggle [for]=\"dp3\"></mat-datepicker-toggle>\r\n\t\t\t\t\t  <mat-datepicker #dp3 disabled=\"false\"></mat-datepicker>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('cdate').invalid\">Please enter  date</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-2\">\r\n\t\t\t\t\t<mat-label>Start Time</mat-label>\r\n\t\t\t\t\t\t<input matInput placeholder=\"\"  [ngxTimepicker]=\"sTime\" readonly [min]=\"selectedTimeSlot?.from_time\" [max]=\"selectedTimeSlot?.to_time\"\r\n\t\t\t\t\t\tformControlName=\"sTime\" [format]=\"24\" required  [disabled]=\"timeSlotDisabled\" (ngModelChange)=\"startTimeCheck()\" >\r\n\t\t\t\t\t<ngx-material-timepicker #sTime [enableKeyboardInput]=\"true\" ></ngx-material-timepicker>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter start time\">schedule</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('sTime').invalid\">Please enter start time\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>End Time</mat-label>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<input matInput placeholder=\"\"[ngxTimepicker]=\"eTime\" readonly [min]=\"miniChargingTime?._i\" [max]=\"maxiChargingTime?._i\"\r\n\t\t\t\t\t\tformControlName=\"eTime\" [format]=\"24\" required [disabled]=\"timeSlotDisabled\" (ngModelChange)=\"timeCalculate()\" >\r\n\t\t\t\t\t<ngx-material-timepicker #eTime [enableKeyboardInput]=\"true\"></ngx-material-timepicker>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter close time\">schedule</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('eTime').hasError('required')\">Please enter end time\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('eTime').hasError('confirm')\">End time is not be less then start time\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Duration</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"duration\"   readonly autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter duration\">duration</mat-icon>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\r\n\t\t \r\n\t\t\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Mobile</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"mobile\" type=\"number\"  required autocomplete=\"off\" (change)=\"getUserMobile()\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter mobile\">settings_cell</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('mobile').hasError('required')\">Please enter mobile\r\n\t\t\t\t</mat-error>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('mobile').hasError('pattern')\">Mobile number must be 10 digit\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Username</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"uname\"   required autocomplete=\"off\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter username\">user</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('uname').hasError('required')\">Please enter username\r\n\t\t\t\t</mat-error>\r\n\t\t\t\t\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Vehicle</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"vehicle\" autocomplete=\"off\" required [matAutocomplete]=\"vehicleAuto\">\r\n\t\t\t\t<mat-autocomplete #vehicleAuto=\"matAutocomplete\"  [displayWith]=\"displayVehicle\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionVehicleList | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.registration_no}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select vehicle registration\">\r\n\t\t\t\t\t\tmodel_training</mat-icon>\r\n\t\t\t\t</div>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('vehicle').invalid\">Please select charger</mat-error>\t\t\r\n\t\t\t</mat-form-field>\r\n\t\t\t<!-- <mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Vehicle</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"vehicle\"   required autocomplete=\"off\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter vehicle\">vehicle</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('vehicle').hasError('required')\">Please enter vehicle\r\n\t\t\t\t</mat-error>\r\n\t\t\t\t\r\n\t\t\t</mat-form-field> -->\r\n\t\t\t<div fxFlex=\"25\" class=\"pr-4\"  style=\"padding-bottom: 25px !important;text-align: center;\">\r\n\t\t\t\t<button mat-mini-fab color=\"primary\" type=\"button\" (click)=\"registerNew()\" class=\"mr-8\"  matTooltip=\"User register\" aria-label=\"Example icon button with a filter list icon\">\r\n\t\t\t\t\t<mat-icon>person_add</mat-icon>\r\n\t\t\t\t  </button>\r\n\t\t\t\t<!-- <button mat-raised-button type=\"button\" color=\"primary\" class=\"mr-8\" \r\n\t\t\t\t(click)=\"registerNew()\" >Register New User</button> -->\r\n\t\t\t\t<button mat-mini-fab color=\"primary\"  type=\"button\" (click)=\"registerVehicle()\"  [disabled]=\"userVehicleDisabled\" class=\"mr-8\"  matTooltip=\"Vechicle register\" aria-label=\"Example icon button with a filter list icon\">\r\n\t\t\t\t\t<mat-icon>electric_car</mat-icon>\r\n\t\t\t\t  </button>\r\n\t\t\t\t<!-- <button mat-raised-button type=\"button\" color=\"primary\" [disabled]=\"userVehicleDisabled\" class=\"mr-8\" \r\n\t\t\t\t(click)=\"registerVehicle()\" >Vechicle Register</button> -->\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"24\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Advance Booking Amount</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"amount\"   readonly autocomplete=\"off\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter Auration\">currency_rupee</mat-icon>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"24\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Valid Upto</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"validUpto\"   readonly autocomplete=\"off\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Valid upto\">where_to_vote</mat-icon>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<div fxFlex=\"24\" class=\"pr-4\">\r\n\t\t\t\t<mat-checkbox formControlName=\"validationCheck\">Please read before submit</mat-checkbox>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('validationCheck').invalid\">Please select checkbox</mat-error>\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n\t\t\t<button mat-raised-button color=\"primary\" type=\"submit\" class=\"mr-8\" (click)=\"submit()\">Confirm</button>\r\n\t\t\t<button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n\t\t</div>\r\n\r\n\t</form>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookingService {\r\n  apiUrl1 = `${environment.API_URL2}/chargingStation` ;\r\n  apiUrl2 = `${environment.API_URL2}/booking` ;\r\n  apiUrl3 = `${environment.API_URL2}/usermanagement` ;\r\n  constructor(private http : HttpClient) { }\r\n\r\n  create(params){\r\n    return this.http.post(`${this.apiUrl2}/create/`,params);\r\n  }\r\n  getAvailableTimeInterval(station_id,date,charger_id,connector_no){\r\n    return this.http.get(`${this.apiUrl2}/getAvailableTimeInterval/${station_id}/${date}/${charger_id}/${connector_no}`);\r\n  }\r\n  getUserByMobile(mobile){\r\n    return this.http.get(`${this.apiUrl3}/getUserByMobile/${mobile}`);\r\n  }\r\n  getBookingHistory(params){\r\n    return this.http.post(`${this.apiUrl2}/getBookingHistory/`,params);\r\n  }\r\n  getPendingBookingsCW(params){\r\n    return this.http.post(`${this.apiUrl2}/getPendingBookingsCW/`,params);\r\n  }\r\n  ackBookingCW(params){\r\n    return this.http.post(`${this.apiUrl2}/ackBookingCW/`,params);\r\n  }\r\n  getallbookingscw(params){\r\n    return this.http.post(`${this.apiUrl2}/allbookingscw/`,params);\r\n  }\r\n\r\n\r\n  //booking-config API\r\n  getAllActiveChargingStations(client_id,cpo_id){\r\n    return this.http.get(`${this.apiUrl1}/gtAllActiveChargingStations/${client_id}/${cpo_id}`);\r\n  }\r\n  getAllBookingConfigList(){\r\n    return this.http.get(`${this.apiUrl2}/getAllBookingConfigList/`);\r\n  }\r\n  createBookingConfig(params){\r\n    return this.http.post(`${this.apiUrl2}/createBookingConfig`,params);\r\n  }\r\n  updateBookingConfig(params){\r\n    return this.http.post(`${this.apiUrl2}/updateBookingConfig`,params);\r\n  }\r\n  deleteBookingConfig(id,login_id){\r\n    return this.http.delete(`${this.apiUrl2}/deleteBookingConfig/${id}/${login_id}`);\r\n  }\r\n\r\n  \r\n}\r\n","\r\nimport { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { BookingRoutingModule } from './booking-routing.module';\r\nimport { BookingCrudComponent } from './booking-crud/booking-crud.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport { RegisterUserDialogComponent } from './registerUser-dialog/registerUser-dialog.component';\r\nimport { ListApprovedComponent } from './list-approved/list-approved.component';\r\nimport { RegisterVehicleDialogComponent } from './registerVehicle-dialog/registerVehicle-dialog.component';\r\nconst COMPONENTS =[ BookingCrudComponent, CreateComponent, ListComponent,ListApprovedComponent];\r\nconst COMPONENTS_DYNAMIC =[ViewDialogComponent,ActionDialogComponent,RegisterUserDialogComponent,RegisterVehicleDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, BookingRoutingModule,FuseSharedModule,MatStepperModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class BookingModule{}","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl, FormControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { VehicleService } from 'app/shared/services/master/vehicle/vehicle.service';\r\nimport { Router } from '@angular/router';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { Subject } from 'rxjs';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport { FuseConfigService } from '@fuse/services/config.service';\r\nimport { AccountService } from 'app/shared/services/account/account.service';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-registerVehicle-dialog',\r\n  templateUrl: './registerVehicle-dialog.component.html',\r\n  styleUrls: ['./registerVehicle-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class RegisterVehicleDialogComponent implements OnInit {\r\n\r\n  \r\n  registerForm: FormGroup;\r\n \r\n  form: FormGroup;\r\n  brands:any;\r\n  models:any;\r\n  connector_types:any;\r\n  localStorage : any;\r\n  filteredOptionsbrands: Observable<any[]>;\r\n  filteredOptionsModel: Observable<any[]>;\r\n  filteredOptionsCurrType: Observable<any[]>;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  status = false;\r\n  errorMsg:String;\r\n  splitted:String;\r\n  params:any;\r\n \r\n  constructor(\r\n    public dialogRef: MatDialogRef<RegisterVehicleDialogComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, \r\n    private accountService: AccountService,\r\n     private _formBuilder: FormBuilder,private router : Router,private masterService : MasterService,\r\n     private vehicleService : VehicleService,private snackBar: MatSnackBar) {}\r\n\r\n  ngOnInit() {\r\n   \r\n    this.params  = this.data;\r\n    this.initialize();\r\n  }\r\n  initialize(){\r\n    ////\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    \r\n    this.form = this._formBuilder.group({\r\n      brand: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      model: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      connector_type : ['', [autocompleteObjectValidator(),Validators.required]],\r\n      registration: ['', [Validators.required,\r\n        Validators.minLength(8),Validators.maxLength(100),\r\n        Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      yearOfManufacture: ['', [Validators.required]],\r\n      engineNumber: ['', [ Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      chassisNumber: ['', [ Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      VINnumber: [''],\r\n      status : this.status == true ? 'Y' : 'N'   \r\n      // vehicle: ['', [Validators.required]],\r\n      // manufacturer: ['', [Validators.required]],\r\n      \r\n    });\r\n\r\n    this.getBrands();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n \r\n\r\n  getBrands(){\r\n    this.masterService.getBrands().subscribe(\r\n      (data:any)=>{\r\n        \r\n        this.brands = data;\r\n        \r\n        this.filteredOptionsbrands = this.form.controls.brand.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterbrands(name) : this.brands)\r\n        );\r\n      },\r\n      (err)=>{\r\n        ////\r\n      })\r\n  }\r\n  getModelsByBrand(id){\r\n    this.models=[];\r\n    this.connector_types=[];\r\n    this.masterService.getModelsByBrand(id).subscribe(\r\n      (data:any)=>{\r\n        this.models = data;\r\n        this.filteredOptionsModel = this.form.controls.model.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterModels(name) : this.models)\r\n        );\r\n      },\r\n      (err)=>{\r\n        ////\r\n      })\r\n  }\r\n  getConnectorTypeByModel(id){\r\n    this.connector_types=[];\r\n    this.masterService.getPublishedConnectorTypeByModel(id).subscribe(\r\n      (data:any)=>{\r\n        this.connector_types = data;\r\n        this.filteredOptionsCurrType = this.form.controls.connector_type.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterConnType(name) : this.connector_types)\r\n        );\r\n      },\r\n      (err)=>{\r\n        ////\r\n      })\r\n  }\r\n  onBrandChange(event){\r\n    this.getModelsByBrand(event);\r\n    this.form.get('model').setValue('');\r\n  }\r\n  onModelChange(event){\r\n    this.getConnectorTypeByModel(event);\r\n  }\r\n  onConnectorTypeChange(event){\r\n    ////\r\n    // this.getConnectorTypeByModel(event.value);\r\n  }\r\n\r\n  onSubmit(){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n    \r\n\r\n      let params = {\r\n          user_id: this.params.id,\r\n          brand_id : formValues.brand.id,\r\n          model_id : formValues.model.id,\r\n          connector_type_id : formValues.connector_type.ct_id,\r\n          registration_no : formValues.registration,\r\n          year_of_manufacture : formValues.yearOfManufacture,\r\n          engine_no : formValues.engineNumber,\r\n          chassis_no : formValues.chassisNumber,\r\n          vin_no : formValues.VINnumber,\r\n          status :  this.status == true ? 'Y' : 'N', \r\n          created_by : this.localStorage.userId\r\n      }\r\n      this.vehicleService.register(params).subscribe(\r\n        (resp:any )=>{\r\n          ////\r\n          if(resp.status == true){\r\n            this.snackBar.open(MessageConstant.vehicleCreate, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close(resp.data);\r\n          }else{\r\n            if(resp.err_code == \"ERROR : ER_DUP_ENTRY\"){\r\n              this. errorMsg = resp.message;\r\n              var index=  this. errorMsg.lastIndexOf(\" \");\r\n               this.splitted = this. errorMsg.substring(index+1); \r\n              if(this.splitted == \"'registration_no'\" ){\r\n                this.snackBar.open(MessageConstant.registrationDuplicateVehicle, 'Dismiss', { duration: 5000 });\r\n              } if(this.splitted == \"'engine_no'\" ){\r\n                this.snackBar.open(MessageConstant.engineDuplicateVehicle, 'Dismiss', { duration: 5000 });\r\n              }if(this.splitted == \"'chassis_no'\" ){\r\n                this.snackBar.open(MessageConstant.chassisDuplicateVehicle, 'Dismiss', { duration: 5000 });\r\n              }\r\n\r\n            }else{\r\n              this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n            }\r\n            //this.snackBar.open(MessageConstant.errorMessage,'Dismiss', { duration: 5000 })\r\n          }\r\n  \r\n        },\r\n        (err)=>{\r\n          ////\r\n          this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n        }\r\n      )\r\n\r\n    }\r\n    else{\r\n      return;\r\n    }\r\n  }\r\n \r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n  displayBrands(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayModels(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCurrentType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterbrands(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.brands.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterModels(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.models.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterConnType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.connector_types.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n\r\n}","<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n    style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n    <mat-toolbar class=\"action_toolbar\">End Vehicle Register</mat-toolbar>\r\n        <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n            <form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n                fxFlex=\"1 0 auto\" name=\"form\" (submit)=\"onSubmit()\">\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Brand</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"brand\" [matAutocomplete]=\"brandAuto\" required>\r\n                        <mat-autocomplete #brandAuto=\"matAutocomplete\" [displayWith]=\"displayBrands\"\r\n                            (optionSelected)='onBrandChange($event.option.value.id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsbrands | async\" [value]=\"option\">\r\n                                {{option.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('brand').invalid\">Please select brand\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Model</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"model\" [matAutocomplete]=\"modelAuto\" required>\r\n                        <mat-autocomplete #modelAuto=\"matAutocomplete\" [displayWith]=\"displayModels\"\r\n                            (optionSelected)='onModelChange($event.option.value.id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsModel | async\" [value]=\"option\">\r\n                                {{option.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n\r\n                        <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('model').invalid\">Please select model\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Connector Type</mat-label>\r\n                        <input type=\"text\" matInput formControlName=\"connector_type\" [matAutocomplete]=\"connTypeAuto\"\r\n                            required>\r\n                        <mat-autocomplete #connTypeAuto=\"matAutocomplete\" [displayWith]=\"displayModels\"\r\n                            (optionSelected)='onConnectorTypeChange($event.option.value.id)'>\r\n                            <mat-option *ngFor=\"let option of filteredOptionsCurrType | async\" [value]=\"option\">\r\n                                {{option.name}}\r\n                            </mat-option>\r\n                        </mat-autocomplete>\r\n                        <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n                        <mat-error *ngIf=\"form.get('connector_type').invalid\">Please select model\r\n                        </mat-error>\r\n\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Registration Number</mat-label>\r\n                        <input matInput formControlName=\"registration\" required>\r\n                        <mat-error *ngIf=\"form.controls.registration.hasError('required')\">Please enter registration\r\n                            number</mat-error>\r\n                        <mat-error\r\n                            *ngIf=\"form.controls.registration.hasError('maxlength') || form.controls.registration.hasError('minlength')\">\r\n                            Registration number is incorrect</mat-error>\r\n                        <mat-error *ngIf=\"form.controls.registration.hasError('pattern')\">Special characters not\r\n                            allowed</mat-error>\r\n                    </mat-form-field>\r\n\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Year Of Manufacture</mat-label>\r\n                        <input matInput placeholder=\"\" formControlName=\"yearOfManufacture\" required>\r\n                        <mat-error *ngIf=\"form.controls.registration.hasError('required')\">Please enter year Of\r\n                            manufacture</mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Engine Number</mat-label>\r\n                        <input matInput formControlName=\"engineNumber\">\r\n\r\n                        <mat-error *ngIf=\"form.get('engineNumber').hasError('pattern')\">Special characters are not\r\n                            allowed\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>Chassis Number</mat-label>\r\n                        <input matInput formControlName=\"chassisNumber\">\r\n\r\n                        <mat-error *ngIf=\"form.get('chassisNumber').hasError('pattern')\">Special characters are not\r\n                            allowed\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n                        <mat-label>VIN Number</mat-label>\r\n                        <input matInput formControlName=\"VINnumber\">\r\n                        <mat-error *ngIf=\"form.get('VINnumber').invalid\">Please enter vin number\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n                    <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n                    <button mat-raised-button color=\"warn\" class=\"mr-8\" (click)=\"closeActionPanel()\">Cancel</button>\r\n\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n  ","\r\nimport { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BookingCrudComponent } from './booking-crud/booking-crud.component';\r\nimport { TABS_DEMO_ROUTES } from './booking-crud/routes';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : 'crud',component : BookingCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    },\r\n    {\r\n        path : 'bookingStationConfig',\r\n        loadChildren: () => import('app/main/booking/booking-config/booking-config.module').then(m => m.BookingConfigModule)\r\n    },\r\n    \r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class BookingRoutingModule{}"]}