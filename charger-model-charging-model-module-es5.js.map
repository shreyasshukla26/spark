{"version":3,"sources":["webpack:///src/app/main/asset/charger-model/charging-model-routing.module.ts","webpack:///src/app/main/asset/charger-model/view-dialog/view-dialog.component.ts","webpack:///src/app/main/asset/charger-model/view-dialog/view-dialog.component.html","webpack:///src/app/main/asset/charger-model/create/create.component.ts","webpack:///src/app/main/asset/charger-model/create/create.component.html","webpack:///src/app/main/asset/charger-model/charging-model-crud/routes.ts","webpack:///src/app/main/asset/charger-model/charging-model.module.ts","webpack:///src/app/main/asset/charger-model/action-dialog/action-dialog.component.ts","webpack:///src/app/main/asset/charger-model/action-dialog/action-dialog.component.html","webpack:///src/app/main/asset/charger-model/charging-model-crud/charging-model-crud.component.ts","webpack:///src/app/main/asset/charger-model/charging-model-crud/charging-model-crud.component.html","webpack:///src/app/main/asset/charger-model/list/list.component.ts","webpack:///src/app/main/asset/charger-model/list/list.component.html"],"names":["routes","path","component","canActivate","children","ChargingModelRoutingModule","forChild","imports","exports","autocompleteObjectValidator","control","value","ViewDialogComponent","fb","chargerTypeService","snackBar","dialogRef","data","chargingModelService","masterService","router","isEditMode","batteryBackup","rfidCardReader","isDualCardReader","status","communicationModeData","initialize","localStorage","JSON","parse","getItem","params","action","form","group","chargerType","disabled","required","manufacturer","chargerModelType","code","pattern","name","description","communicationProtocol","communicationMode","cardReaderType","noOfConnectors","ONLY_NUMBERS","connectorForm","array","createConnectorFG","getChargetTypes","getManufacturers","getChargerModelTypes","getCommunicationProtocols","getConnectorTypes","getIOTypes","getCurrentTypes","get","setValue","length","assignValues","filteredOptions","connectorType","ioType","currentType","voltage","THREE_DIGIT_DECIMAL","phase","maxAmp","power","frequency","push","i","removeAt","reset","getChargerTypes","subscribe","chargerTypes","toSelect","find","c","id","charger_type_id","filteredOptionsCharType","controls","valueChanges","pipe","_filterCharType","err","manufacturers","manufacturer_id","filteredOptionsManufacturer","_filterManfacturer","chargerModelTypes","charger_model_type_id","filteredOptionsCharModelType","_filterCharModelType","communicationProtocols","communication_protocol_id","filteredOptionsCommunicationProto","_filterCommunicationProtocol","connectorTypes","ioTypes","currentTypes","close","valid","formValues","connectors","forEach","item","connector_type_id","io_type_id","current_type_id","max_amp","created_by","userId","battery_backup","isDual","communication_mode","card_reader_type","no_of_connectors","connector_data","modify_by","update","open","recordUpdateMessage","duration","errorMessage","create","chargerCreateMessage","hasError","temp","Array","split","assignValuesFG","connector","addConnectorFG","model_id","created_date","modify_date","removeConnectorFG","patchValue","event","checked","ref","rfid","active","filterValue","toLowerCase","filter","option","includes","closeActionPanel","clkBatteryBackup","clkRfidCardReader","clkIsDualCardReader","updateStatus","selector","templateUrl","styleUrls","encapsulation","None","animations","invalidAutocompleteObject","CreateComponent","fgroup","filteredOptionsConnectorType","_filterConnectorType","slice","filteredOptionsIoType","_filterIoType","filteredOptionsCurrentType","_filterCurrentType","getActiveChargerTypes","resp","NoRecordFoundMessage","navigate","formInvalid","onSubmit","$event","preventDefault","abc","TABS_DEMO_ROUTES","redirectTo","pathMatch","COMPONENTS","COMPONENTS_DYNAMIC","ChargingModelModule","declarations","entryComponents","ActionDialogComponent","onYesClick","ChargingModelCrudComponent","cdr","_utilityService","tabLinks","tempLinks","activeMenuItems$","menuItemSelecte","menuArray","undefined","title","detectChanges","nav_list","nav_list_with_tab","x","objectData","y","objectChildData","z","childData","isDefaultRoutePermeted","t","label","link","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","ChargingModel","ListComponent","dialog","displayedColumns","head","codeSearch","nameSearch","chargerTypeSearch","manfactureSearch","cModelTypeSearch","batteryBackupSearch","communicationSearch","communicationModeSearch","cardReaderSearch","noConnectorSearch","statusSearch","getChargingModels","filterEntity","filterType","ANYWHERE","target","dataSource","trim","paginator","firstPage","getChargingModelsAll","charginModels","statusString","sort","confirmDialogRef","disableClose","afterClosed","result","deleteMessage","width","panelClass","autoFocus","visibleOption","ev","stopPropagation","charger_type_name","manufacturer_name","communication_protocol_name","exportedData","filteredData","chargerModel","charger_model_type_name","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","doc","chrger","img","Image","imgRight","src","srcSparkEV","createdDate","Date","toLocaleString","setFontSize","setTextColor","autoTable","body","theme","headStyles","fontStyle","fillColor","styles","cellPadding","fontSize","margin","top","didDrawCell","didDrawPage","addImage","text","internal","pageSize","getWidth","align","setGState","GState","opacity","f_Name","addWaterMark","output","save","newpage","getNumberOfPages","String","tableExport","pdfExport"],"mappings":"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","file":"charger-model-charging-model-module-es5.js","sourcesContent":["// import {NgModule} from '@angular/core';\r\n// import { Routes, RouterModule } from '@angular/router';\r\n// import { CreateComponent } from './create/create.component';\r\n// import { EditComponent } from './edit/edit.component';\r\n// import { ListComponent } from './list/list.component';\r\n\r\n// const routes : Routes = [\r\n//     { path : 'create', component : CreateComponent},\r\n//     { path : 'edit/:id', component : EditComponent},\r\n//     { path : 'list', component : ListComponent},\r\n//     { path : '', redirectTo : 'list',pathMatch:'full'}\r\n// ]\r\n\r\n// @NgModule({\r\n//     imports : [RouterModule.forChild(routes)],\r\n//     exports : [RouterModule]\r\n// })\r\n\r\n// export class ChargingModelRoutingModule{}\r\n\r\nimport { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ChargingModelCrudComponent } from './charging-model-crud/charging-model-crud.component';\r\nimport { TABS_DEMO_ROUTES } from './charging-model-crud/routes';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : 'crud',component : ChargingModelCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class ChargingModelRoutingModule{}","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport {  FormControl, FormArray } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { Router } from '@angular/router';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { ChargerTypeService } from 'app/shared/services/charger-type/charger-type.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith,tap} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nexport interface ChargingModel {\r\n  id ?: number;\r\n  client_id ?: number;\r\n  charger_type_id : number;\r\n  client_name ?: string;\r\n  manufacturer_id : number ;\r\n  manufacturer_name ?: string ;\r\n  charger_model_type_id : number;\r\n  charger_model_type_name ?: string;\r\n  battery_backup : string;\r\n  isDual:number;\r\n  code : string;\r\n  name : string;\r\n  description : string;\r\n  communication_protocol_id : number;\r\n  communication_protocol_name ?: string;\r\n  communication_mode : string;\r\n  card_reader_type : string;\r\n  no_of_connectors : number;\r\n  connector_data : ChargingModelConnectorMap[];\r\n  status : string ;\r\n  created_date ?: string ;\r\n  created_by ?: number;\r\n  modify_date ?: string ;\r\n  modify_by ?: number;\r\n}\r\n\r\nexport interface ChargingModelConnectorMap{\r\n  id : number;\r\n  model_id : number;\r\n  connector_type_id : number;\r\n  io_type_id : number;\r\n  current_type_id : number;\r\n  voltage : number;\r\n  phase : number;\r\n  max_amp : number;\r\n  power : number;\r\n  frequency : number;\r\n  status : string ;\r\n  created_date : string ;\r\n  created_by : number;\r\n  modify_date : string ;\r\n  modify_by : number;\r\n}\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-view-dialog',\r\n  templateUrl: './view-dialog.component.html',\r\n  styleUrls: ['./view-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ViewDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  \r\n  chargerTypes :any;\r\n  manufacturers:any;\r\n  chargerModelTypes:any;\r\n  communicationProtocols:any;\r\n  connectorTypes:any;\r\n  ioTypes:any;\r\n  currentTypes:any;\r\n  batteryBackup = false;\r\n  rfidCardReader = false;\r\n  isDualCardReader:boolean = false;\r\n  status = false;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"rfidToggleElement\") rfid: any;\r\n  @ViewChild(\"isDualToggleElement\") isDual: any;\r\n  @ViewChild(\"activeElement\") active:any;\r\n  filteredOptionsCharType: Observable<any[]>;\r\n  filteredOptionsManufacturer: Observable<any[]>;\r\n  filteredOptionsCharModelType : Observable<any[]>;\r\n  filteredOptionsCommunicationProto: Observable<any[]>;\r\n  communicationModeData: string[] = ['LAN', 'SIM', 'WIFI'];\r\n // messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder, private chargerTypeService: ChargerTypeService, \r\n    private snackBar: MatSnackBar,public dialogRef: MatDialogRef<ViewDialogComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, \r\n    private chargingModelService : ChargingModelService, \r\n     private masterService: MasterService,\r\n    private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      chargerType: [{value: '', disabled: true}, [autocompleteObjectValidator(),Validators.required]],\r\n      manufacturer: [{value: '', disabled: true}, [autocompleteObjectValidator(),Validators.required]],\r\n      chargerModelType: [{value: '', disabled: true}, [autocompleteObjectValidator(),Validators.required]],\r\n      batteryBackup: [{value:false,disabled:true},  [Validators.required]],\r\n      isDualCardReader : this.isDualCardReader == true ? 1 : 0,\r\n      code: [{value: '', disabled: true}, [ Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      name: [{value: '', disabled: true}, [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description: [{value: '', disabled: true},[Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      communicationProtocol: [{value: '', disabled: true}, [autocompleteObjectValidator(),Validators.required]],\r\n      communicationMode: [{value: '', disabled: true}, [Validators.required]],\r\n      cardReaderType: [{value: '', disabled: true}, [Validators.required]],\r\n      noOfConnectors: [{value : '',disabled : true}, [Validators.required,Validators.pattern(PATTERNS.ONLY_NUMBERS)]],\r\n      connectorForm : this.fb.array([this.createConnectorFG()]) ,\r\n    });\r\n\r\n    this.getChargetTypes();\r\n    this.getManufacturers();\r\n    this.getChargerModelTypes();\r\n    this.getCommunicationProtocols();\r\n    this.getConnectorTypes();\r\n    this.getIOTypes();\r\n    this.getCurrentTypes();   \r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n   this.filteredOptions();\r\n  }\r\n\r\n  private createConnectorFG(): FormGroup {\r\n    return new FormGroup({\r\n      connectorType: new FormControl(''),\r\n      ioType: new FormControl(''),\r\n      currentType: new FormControl('',),\r\n      voltage: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      phase: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      maxAmp: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      power: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      frequency: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)])\r\n    });\r\n  }\r\n\r\n  public addConnectorFG() {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    connectorForm.push(this.createConnectorFG());\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  public removeConnectorFG(i: number) {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    if (connectorForm.length > 1) {\r\n      connectorForm.removeAt(i)\r\n    } else {\r\n      connectorForm.reset()\r\n    }\r\n\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  getChargetTypes(){\r\n    this.chargerTypeService.getChargerTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerTypes = data;\r\n        \r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerTypes.find(c => c.id == this.params.data.charger_type_id);\r\n          this.form.get('chargerType').setValue(toSelect);\r\n         this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n            //tap(() => this.form.controls.chargerType.setValue(toSelect)),\r\n           //tap(() => this.form.get('chargerType').setValue({name:toSelect.name, id:toSelect.id})),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n         \r\n         );\r\n        }\r\n        \r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getManufacturers(){\r\n    this.masterService.getManufacturers().subscribe(\r\n      (data:any)=>{\r\n        this.manufacturers = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n          this.form.get('manufacturer').setValue(toSelect);\r\n          this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n           // tap(() => this.form.controls.manufacturer.setValue(toSelect)),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n          );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getChargerModelTypes(){\r\n    this.masterService.getChargerModelTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerModelTypes = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerModelTypes.find(c => c.id == this.params.data.charger_model_type_id);\r\n         this.form.get('chargerModelType').setValue(toSelect);\r\n         this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n           //tap(() => this.form.controls.chargerModelType.setValue(toSelect)),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n         );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCommunicationProtocols(){\r\n    this.masterService.getCommunicationProtocols().subscribe(\r\n      (data:any)=>{\r\n        this.communicationProtocols = data;\r\n        if(this.isEditMode){\r\n          \r\n          const toSelect = this.communicationProtocols.find(c => c.id == this.params.data.communication_protocol_id);\r\n          this.form.get('communicationProtocol').setValue(toSelect);\r\n          this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          //tap(() => this.form.controls.communicationProtocol.setValue(toSelect)),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n        );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getConnectorTypes(){\r\n    this.masterService.getConnectorTypes().subscribe(\r\n      (data:any)=>{\r\n        \r\n        this.connectorTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getIOTypes(){\r\n    this.masterService.getIOTypes().subscribe(\r\n      (data:any)=>{\r\n        this.ioTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCurrentTypes(){\r\n    this.masterService.getCurrentTypes().subscribe(\r\n      (data:any)=>{\r\n        this.currentTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onYesClick(){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n    \r\n\r\n      let connectors=[] ;\r\n  \r\n      formValues.connectorForm.forEach(item => {\r\n        connectors.push({\r\n          connector_type_id : item.connectorType ,\r\n          io_type_id : item.ioType,\r\n          current_type_id : item.currentType,\r\n          voltage : item.voltage ,\r\n          phase : item.phase,\r\n          max_amp : item.maxAmp,\r\n          power : item.power,\r\n          frequency : item.frequency,\r\n          status : 'Y',\r\n          created_by : this.localStorage.userId \r\n        })\r\n      });\r\n  \r\n      \r\n      let params : ChargingModel = {\r\n        charger_type_id : formValues.chargerType.id,\r\n        manufacturer_id : formValues.manufacturer.id ,\r\n        charger_model_type_id : formValues.chargerModelType.id ,\r\n        battery_backup  : this.batteryBackup == true ? 'Y' : 'N',\r\n        isDual : this.isDualCardReader == true ? 1 : 0,\r\n        code : formValues.code ,\r\n        name : formValues.name ,\r\n        description : formValues.description ,\r\n        communication_protocol_id : formValues.communicationProtocol.id ,\r\n        communication_mode : formValues.communicationMode ,\r\n        card_reader_type : formValues.cardReaderType ,\r\n        no_of_connectors : formValues.connectorForm.length ,\r\n        connector_data : connectors,\r\n        status : this.status == true ? 'Y' : 'N',\r\n        created_by : this.localStorage.userId \r\n      }\r\n  \r\n  \r\n      if (this.isEditMode){\r\n        params.id = this.params.data.id,\r\n        params.modify_by = this.localStorage.userId;\r\n      } else{\r\n        params.created_by = this.localStorage.userId;\r\n      }\r\n  \r\n      \r\n  \r\n      if (this.isEditMode){\r\n        this.chargingModelService.update(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      }else{\r\n        this.chargingModelService.create(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.chargerCreateMessage, 'Dismiss', { duration: 5000 });\r\n            // this.router.navigate(['/chargingModel/crud/list']);\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n    \r\n      }\r\n    \r\n        this.dialogRef.close(params);\r\n    }\r\n   \r\n    return;\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('code').setValue(params.data.code);\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    var temp = new Array();\r\n    temp = this.params.data.communication_mode.split(\",\");\r\n\r\n    this.form.get('communicationMode').setValue(temp);\r\n    this.form.get('cardReaderType').setValue(params.data.card_reader_type);\r\n    this.form.get('noOfConnectors').setValue(params.data.no_of_connectors);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n    this.batteryBackup = params.data.battery_backup == 'Y' ? true : false;\r\n    this.isDualCardReader = params.data.isDual == 1 ? true : false;\r\n\r\n    this.assignValuesFG(params.data.connector_data);\r\n  }\r\n\r\n  assignValuesFG(data){\r\n\r\n    let connector_data = [];\r\n\r\n    data.forEach(connector => {\r\n      this.addConnectorFG();\r\n      connector_data.push({ id : connector.id ,\r\n        model_id : connector.model_id ,\r\n        connectorType : connector.connector_type_id ,\r\n        ioType : connector.io_type_id ,\r\n        currentType : connector.current_type_id ,\r\n        voltage : connector.voltage ,\r\n        phase : connector.phase ,\r\n        maxAmp : connector.max_amp ,\r\n        power : connector.power ,\r\n        frequency : connector.frequency ,\r\n        status : connector.status ,\r\n        created_date : connector.created_date ,\r\n        created_by : connector.created_by ,\r\n        modify_date : connector.modify_date ,\r\n        modify_by : connector.modify_by })\r\n    });\r\n    \r\n   this.removeConnectorFG(data.length);\r\n\r\n   const connectorForm = this.form.get('connectorForm') as FormArray;\r\n\r\n   connectorForm.patchValue(connector_data);\r\n\r\n\r\n  }\r\n\r\n  clkBatteryBackup(event){\r\n    this.batteryBackup = event.checked;\r\n    this.ref.checked = this.batteryBackup;\r\n  }\r\n  clkRfidCardReader(event){\r\n    this.rfidCardReader = event.checked;\r\n    this.rfid.checked = this.rfidCardReader;\r\n  }\r\n  clkIsDualCardReader(event){\r\n    this.isDualCardReader = event.checked;\r\n    this.isDual.checked = this.isDualCardReader;\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.active.checked = this.status;\r\n  }\r\n  \r\n  filteredOptions(){\r\n    this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n    );\r\n    this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n     \r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n    );\r\n    this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n    );\r\n    this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n      );\r\n  }\r\n  displayCharType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayManfacturer(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCharModelType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCommunicationProto(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }  \r\n  private _filterCharType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterManfacturer(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.manufacturers.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharModelType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerModelTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCommunicationProtocol(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.communicationProtocols.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n\tstyle=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n\r\n\r\n<mat-toolbar class=\"action_toolbar\">Variants</mat-toolbar>\r\n<div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n\t<div id=\"forms\" class=\"page-layout simple fullwidth mat-dialog\" fxLayout=\"column\">\r\n\t\t<form [formGroup]=\"form\" class=\"\" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\" name=\"form\">\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"chargerType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerType').invalid\">Please select charger model</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Manufacturer</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"manufacturer\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"manufacturerAuto\">\r\n\t\t\t\t\t<mat-autocomplete #manufacturerAuto=\"matAutocomplete\" [displayWith]=\"displayManfacturer\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsManufacturer | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('manufacturer').invalid\">Please select manufacturer</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model Type</mat-label>\r\n\t\t\t\t\t<input type=\"text\" readonly matInput formControlName=\"chargerModelType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerModelTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerModelTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharModelType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharModelType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerModelType').invalid\">Please select charger model type</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Code</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"code\" maxlength=\"20\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Name</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"name\" maxlength=\"50\" required\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\">Please enter name</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"description\" maxlength=\"200\"\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Protocol</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"communicationProtocol\" required\r\n\t\t\t\t\t\tautocomplete=\"off\" [matAutocomplete]=\"communicationProtocolAuto\">\r\n\t\t\t\t\t<mat-autocomplete #communicationProtocolAuto=\"matAutocomplete\"\r\n\t\t\t\t\t\t[displayWith]=\"displayCommunicationProto\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCommunicationProto | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationProtocol').invalid\">Please select communication protocol\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Mode</mat-label>\r\n\t\t\t\t\t<mat-select formControlName=\"communicationMode\" multiple>\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let communication of communicationModeData\" [value]=\"communication\">\r\n\t\t\t\t\t\t\t{{communication}}</mat-option>\r\n\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationMode').invalid\">Please enter communication mode</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Card Reader Type</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"cardReaderType\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('cardReaderType').invalid\">Please enter card reader type\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>No Of Connectors</mat-label>\r\n\t\t\t\t\t<input matInput numbersOnly readonly placeholder=\"\" formControlName=\"noOfConnectors\" required\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.required\">Please enter numbers of connectors\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.pattern\">Only numbers are allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<div fxFlex=\"13\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Battery Backup</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle \r\n\t\t\t\t\t\tclass=\"example-margin sm-txt mt-10\" \r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t[checked]=\"batteryBackup\" \r\n\t\t\t\t\t\t[disabled]=\"'true'\" \r\n\t\t\t\t\t\t(change)=\"clkBatteryBackup($event)\" \r\n\t\t\t\t\t\t#toggleElement>\r\n\t\t\t\t\t\t{{batteryBackup ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"12\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">RFID Card Reader</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle \r\n\t\t\t\t\t\tclass=\"example-margin sm-txt mt-10\" \r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t[checked]=\"rfidCardReader\" \r\n\t\t\t\t\t\t[disabled]=\"'true'\"\r\n\t\t\t\t\t\t(change)=\"clkRfidCardReader($event)\" \r\n\t\t\t\t\t\t#rfidToggleElement>\r\n\t\t\t\t\t\t{{rfidCardReader ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"12\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Is Dual</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle \r\n\t\t\t\t\t\tclass=\"example-margin sm-txt mt-10\" \r\n\t\t\t\t\t\tcolor=\"primary\" \r\n\t\t\t\t\t\t[checked]=\"isDualCardReader\"\r\n\t\t\t\t\t\t[disabled]=\"'true'\"\r\n\t\t\t\t\t\t(change)=\"clkIsDualCardReader($event)\" \r\n\t\t\t\t\t\t#isDualToggleElement>\r\n\t\t\t\t\t\t<!-- {{isDualCardReader ? 1 : 0}} -->\r\n\t\t\t\t\t</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"13\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle \r\n\t\t\t\t\t\tclass=\"example-margin\" \r\n\t\t\t\t\t\tcolor=\"primary\" \r\n\t\t\t\t\t\t[checked]=\"status\"\r\n\t\t\t\t\t\t[disabled]=\"'true'\"\r\n\t\t\t\t\t\t(change)=\"updateStatus($event)\" \r\n\t\t\t\t\t\t#activeElement>\r\n\t\t\t\t\t\t{{status ? 'Active' : 'Inactive'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<mat-card style=\"box-shadow: none!important;padding: 0;\">\r\n\t\t\t\t<div formArrayName=\"connectorForm\">\r\n\t\t\t\t\t<div fxLayout=\"column\" *ngFor=\"let cf of form.get('connectorForm')['controls']; let i = index\"\r\n\t\t\t\t\t\t[formGroupName]=\"i\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tConnector {{i+1}}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"connectorType\" [disabled]=\"'true'\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of connectorTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>I/O Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"ioType\" [disabled]=\"'true'\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of ioTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Current Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"currentType\" disabled >\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of currentTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Voltage(V)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput readonly formControlName=\"voltage\" autocomplete=\"off\" disabled >\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('voltage').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Phase</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput readonly placeholder=\"\" formControlName=\"phase\" autocomplete=\"off\" disabled >\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('phase').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Max Amp(A)</mat-label>\r\n\t\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\t\treadonly \r\n\t\t\t\t\t\t\t\t\tmatInput \r\n\t\t\t\t\t\t\t\t\tplaceholder=\"\" \r\n\t\t\t\t\t\t\t\t\tformControlName=\"maxAmp\" \r\n\t\t\t\t\t\t\t\t\tautocomplete=\"off\" \r\n\t\t\t\t\t\t\t\t\t[disabled]=\"'true'\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('maxAmp').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Power(KW)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput readonly placeholder=\"\" formControlName=\"power\" autocomplete=\"off\" [disabled]=\"'true'\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('power').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Frequency(Hz)</mat-label>\r\n\t\t\t\t\t\t\t\t<input readonly matInput placeholder=\"\" formControlName=\"frequency\" autocomplete=\"off\" [disabled]=\"'true'\">\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('frequency').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<!-- <div class=\"add-row\">\r\n              <mat-label class=\"sm-txt\">Add Row</mat-label>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"primary\" aria-label=\"Add\"\r\n                (click)=\"addConnectorFG()\" matTooltip=\"Add\">\r\n              <mat-icon>add_circle</mat-icon>\r\n              </button>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"warn\" aria-label=\"Remove/clear\"\r\n                (click)=\"removeConnectorFG(i)\" matTooltip=\"Remove\">\r\n              <mat-icon>delete</mat-icon>\r\n              </button>\r\n            </div> -->\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</mat-card>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\t\t\t\t<!-- button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\"\r\n      (click)=\"onYesClick()\">{{isEditMode ? 'Save' : 'Save'}}</button> -->\r\n\t\t\t\t<button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t</form>\r\n\t</div>\r\n</div>","import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\r\nimport {\r\n    Validators,\r\n    FormBuilder,\r\n    FormGroup,\r\n    FormControl,\r\n    FormArray,\r\n    ValidatorFn,\r\n    AbstractControl,\r\n} from \"@angular/forms\";\r\nimport { MasterService } from \"app/shared/services/master/master.service\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ChargingModelService } from \"app/shared/services/charging-model/charging-model.service\";\r\nimport { PATTERNS } from \"app/shared/utils/validation-patterns\";\r\nimport { ChargerTypeService } from \"app/shared/services/charger-type/charger-type.service\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, startWith } from \"rxjs/operators\";\r\nimport { MessageConstant } from \"app/shared/utils/message.constant\";\r\nexport interface ChargingModel {\r\n    id?: number;\r\n    client_id?: number;\r\n    charger_type_id: number;\r\n    client_name?: string;\r\n    manufacturer_id: number;\r\n    manufacturer_name?: string;\r\n    charger_model_type_id: number;\r\n    charger_model_type_name?: string;\r\n    battery_backup: string;\r\n    isDual: number;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    communication_protocol_id: number;\r\n    communication_protocol_name?: string;\r\n    communication_mode: string;\r\n    card_reader_type: string;\r\n    no_of_connectors: number;\r\n    connector_data: ChargingModelConnectorMap[];\r\n    status: string;\r\n    created_date?: string;\r\n    created_by?: number;\r\n    modify_date?: string;\r\n    modify_by?: number;\r\n}\r\n\r\nexport interface ChargingModelConnectorMap {\r\n    id: number;\r\n    model_id: number;\r\n    connector_type_id: number;\r\n    io_type_id: number;\r\n    current_type_id: number;\r\n    voltage: number;\r\n    phase: number;\r\n    max_amp: number;\r\n    power: number;\r\n    frequency: number;\r\n    status: string;\r\n    created_date: string;\r\n    created_by: number;\r\n    modify_date: string;\r\n    modify_by: number;\r\n}\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } | null => {\r\n        if (typeof control.value === \"string\") {\r\n            return { invalidAutocompleteObject: { value: control.value } };\r\n        }\r\n        return null; /* valid option selected */\r\n    };\r\n}\r\n@Component({\r\n    selector: \"app-create\",\r\n    templateUrl: \"./create.component.html\",\r\n    styleUrls: [\"./create.component.scss\"],\r\n})\r\nexport class CreateComponent implements OnInit {\r\n    form: FormGroup;\r\n\r\n    chargerTypes: any;\r\n    manufacturers: any;\r\n    chargerModelTypes: any;\r\n    communicationProtocols: any;\r\n    connectorTypes: any;\r\n    ioTypes: any;\r\n    currentTypes: any;\r\n    localStorage: any;\r\n    batteryBackup = false;\r\n    rfidCardReader = false;\r\n    isDualCardReader: boolean = false;\r\n    status = false;\r\n    @ViewChild(\"toggleElement\") ref: any;\r\n    @ViewChild(\"rfidToggleElement\") rfid: any;\r\n    @ViewChild(\"isDualToggleElement\") isDual: any;\r\n    @ViewChild(\"activeElement\") active: any;\r\n    filteredOptionsCharType: Observable<any[]>;\r\n    filteredOptionsManufacturer: Observable<any[]>;\r\n    filteredOptionsCharModelType: Observable<any[]>;\r\n    filteredOptionsCommunicationProto: Observable<any[]>;\r\n    filteredOptionsConnectorType: Observable<any[]>;\r\n    filteredOptionsIoType: Observable<any[]>;\r\n    filteredOptionsCurrentType: Observable<any[]>;\r\n    communicationModeData: string[] = [\"LAN\", \"SIM\", \"WIFI\"];\r\n    //messageConstant = MessageConstant;\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private chargingModelService: ChargingModelService,\r\n        private chargerTypeService: ChargerTypeService,\r\n        private masterService: MasterService,\r\n        private snackBar: MatSnackBar,\r\n        private router: Router\r\n    ) {\r\n        this.batteryBackup = false;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {\r\n        this.localStorage = JSON.parse(localStorage.getItem(\"userDetails\"));\r\n        const fgroup = this.createConnectorFG();\r\n\r\n        this.form = this.fb.group({\r\n            chargerType: [\r\n                \"\",\r\n                [autocompleteObjectValidator(), Validators.required],\r\n            ],\r\n            manufacturer: [\r\n                \"\",\r\n                [autocompleteObjectValidator(), Validators.required],\r\n            ],\r\n            chargerModelType: [\r\n                \"\",\r\n                [autocompleteObjectValidator(), Validators.required],\r\n            ],\r\n            batteryBackup: [{ value: false }, [Validators.required]],\r\n            isDualCardReader: this.isDualCardReader == true ? 1 : 0,\r\n            code: [\"\", [Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n            name: [\r\n                \"\",\r\n                [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)],\r\n            ],\r\n            description: [\"\", [Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n            communicationProtocol: [\r\n                \"\",\r\n                [autocompleteObjectValidator(), Validators.required],\r\n            ],\r\n            communicationMode: [\r\n                \"\",\r\n                [autocompleteObjectValidator(), Validators.required],\r\n            ],\r\n            cardReaderType: [\"\"],\r\n            noOfConnectors: [\r\n                { value: \"\", disabled: true },\r\n                [\r\n                    Validators.required,\r\n                    Validators.pattern(PATTERNS.ONLY_NUMBERS),\r\n                ],\r\n            ],\r\n            connectorForm: this.fb.array([fgroup]),\r\n            status: this.status == true ? \"Y\" : \"N\",\r\n        });\r\n\r\n        this.getChargerTypes();\r\n        this.getManufacturers();\r\n        this.getChargerModelTypes();\r\n        this.getCommunicationProtocols();\r\n        this.getConnectorTypes(fgroup);\r\n        this.getIOTypes(fgroup);\r\n        this.getCurrentTypes(fgroup);\r\n        this.form\r\n            .get(\"noOfConnectors\")\r\n            .setValue(this.form.value.connectorForm.length);\r\n        this.filteredOptions();\r\n    }\r\n\r\n    private createConnectorFG(): FormGroup {\r\n        return new FormGroup({\r\n            connectorType: new FormControl(\"\"),\r\n            ioType: new FormControl(\"\"),\r\n            currentType: new FormControl(\"\"),\r\n            voltage: new FormControl(\"\", [\r\n                Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL),\r\n            ]),\r\n            phase: new FormControl(\"\", [\r\n                Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL),\r\n            ]),\r\n            maxAmp: new FormControl(\"\", [\r\n                Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL),\r\n            ]),\r\n            power: new FormControl(\"\", [\r\n                Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL),\r\n            ]),\r\n            frequency: new FormControl(\"\", [\r\n                Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL),\r\n            ]),\r\n        });\r\n    }\r\n\r\n    public addConnectorFG() {\r\n        const connectorForm = this.form.get(\"connectorForm\") as FormArray;\r\n        const fgroup = this.createConnectorFG();\r\n        connectorForm.push(fgroup);\r\n        this.filteredOptionsConnectorType =\r\n            fgroup.controls.connectorType.valueChanges.pipe(\r\n                startWith(\"\"),\r\n                map((value) =>\r\n                    typeof value === \"string\" ? value : value.name\r\n                ),\r\n                map((name) =>\r\n                    name\r\n                        ? this._filterConnectorType(name)\r\n                        : this.connectorTypes.slice()\r\n                )\r\n            );\r\n        this.filteredOptionsIoType = fgroup.controls.ioType.valueChanges.pipe(\r\n            startWith(\"\"),\r\n            map((value) => (typeof value === \"string\" ? value : value.name)),\r\n            map((name) => (name ? this._filterIoType(name) : this.ioTypes))\r\n        );\r\n        this.filteredOptionsCurrentType =\r\n            fgroup.controls.currentType.valueChanges.pipe(\r\n                startWith(\"\"),\r\n                map((value) =>\r\n                    typeof value === \"string\" ? value : value.name\r\n                ),\r\n                map((name) =>\r\n                    name ? this._filterCurrentType(name) : this.currentTypes\r\n                )\r\n            );\r\n\r\n        this.form\r\n            .get(\"noOfConnectors\")\r\n            .setValue(this.form.value.connectorForm.length);\r\n    }\r\n\r\n    public removeConnectorFG(i: number) {\r\n        const connectorForm = this.form.get(\"connectorForm\") as FormArray;\r\n        if (connectorForm.length > 1) {\r\n            connectorForm.removeAt(i);\r\n        } else {\r\n            connectorForm.reset();\r\n        }\r\n\r\n        this.form\r\n            .get(\"noOfConnectors\")\r\n            .setValue(this.form.value.connectorForm.length);\r\n    }\r\n\r\n    getChargerTypes() {\r\n        //;\r\n        this.chargerTypeService.getActiveChargerTypes().subscribe(\r\n            (resp: any) => {\r\n                //;\r\n                if (resp.status == true) {\r\n                    if (resp.data.length > 0) {\r\n                        this.chargerTypes = resp.data;\r\n                        this.filteredOptionsCharType =\r\n                            this.form.controls.chargerType.valueChanges.pipe(\r\n                                startWith(\"\"),\r\n                                map((value) =>\r\n                                    typeof value === \"string\"\r\n                                        ? value\r\n                                        : value.name\r\n                                ),\r\n                                map((name) =>\r\n                                    name\r\n                                        ? this._filterCharType(name)\r\n                                        : this.chargerTypes\r\n                                )\r\n                            );\r\n                    } else {\r\n                        this.snackBar.open(\r\n                            MessageConstant.NoRecordFoundMessage,\r\n                            \"Dismiss\",\r\n                            { duration: 2000 }\r\n                        );\r\n                    }\r\n                }\r\n            },\r\n            (err) => {\r\n                //;\r\n            }\r\n        );\r\n    }\r\n\r\n    getManufacturers() {\r\n        this.masterService.getManufacturers().subscribe(\r\n            (data: any) => {\r\n                this.manufacturers = data;\r\n                this.filteredOptionsManufacturer =\r\n                    this.form.controls.manufacturer.valueChanges.pipe(\r\n                        startWith(\"\"),\r\n                        map((value) =>\r\n                            typeof value === \"string\" ? value : value.name\r\n                        ),\r\n                        map((name) =>\r\n                            name\r\n                                ? this._filterManfacturer(name)\r\n                                : this.manufacturers\r\n                        )\r\n                    );\r\n            },\r\n            (err) => {}\r\n        );\r\n    }\r\n\r\n    getChargerModelTypes() {\r\n        this.masterService.getChargerModelTypes().subscribe(\r\n            (data: any) => {\r\n                this.chargerModelTypes = data;\r\n                this.filteredOptionsCharModelType =\r\n                    this.form.controls.chargerModelType.valueChanges.pipe(\r\n                        startWith(\"\"),\r\n                        map((value) =>\r\n                            typeof value === \"string\" ? value : value.name\r\n                        ),\r\n                        map((name) =>\r\n                            name\r\n                                ? this._filterCharModelType(name)\r\n                                : this.chargerModelTypes\r\n                        )\r\n                    );\r\n            },\r\n            (err) => {}\r\n        );\r\n    }\r\n\r\n    getCommunicationProtocols() {\r\n        this.masterService.getCommunicationProtocols().subscribe(\r\n            (data: any) => {\r\n                this.communicationProtocols = data;\r\n                this.filteredOptionsCommunicationProto =\r\n                    this.form.controls.communicationProtocol.valueChanges.pipe(\r\n                        startWith(\"\"),\r\n                        map((value) =>\r\n                            typeof value === \"string\" ? value : value.name\r\n                        ),\r\n                        map((name) =>\r\n                            name\r\n                                ? this._filterCommunicationProtocol(name)\r\n                                : this.communicationProtocols\r\n                        )\r\n                    );\r\n            },\r\n            (err) => {}\r\n        );\r\n    }\r\n\r\n    getConnectorTypes(fgroup: FormGroup) {\r\n        this.masterService.getConnectorTypes().subscribe(\r\n            (data: any) => {\r\n                this.connectorTypes = data;\r\n                this.filteredOptionsConnectorType =\r\n                    fgroup.controls.connectorType.valueChanges.pipe(\r\n                        startWith(\"\"),\r\n                        map((value) =>\r\n                            typeof value === \"string\" ? value : value.name\r\n                        ),\r\n                        map((name) =>\r\n                            name\r\n                                ? this._filterConnectorType(name)\r\n                                : this.connectorTypes\r\n                        )\r\n                    );\r\n            },\r\n            (err) => {}\r\n        );\r\n    }\r\n\r\n    getIOTypes(fgroup: FormGroup) {\r\n        this.masterService.getIOTypes().subscribe(\r\n            (data: any) => {\r\n                this.ioTypes = data;\r\n                this.filteredOptionsIoType =\r\n                    fgroup.controls.ioType.valueChanges.pipe(\r\n                        startWith(\"\"),\r\n                        map((value) =>\r\n                            typeof value === \"string\" ? value : value.name\r\n                        ),\r\n                        map((name) =>\r\n                            name ? this._filterIoType(name) : this.ioTypes\r\n                        )\r\n                    );\r\n            },\r\n            (err) => {}\r\n        );\r\n    }\r\n\r\n    getCurrentTypes(fgroup: FormGroup) {\r\n        this.masterService.getCurrentTypes().subscribe(\r\n            (data: any) => {\r\n                this.currentTypes = data;\r\n                this.filteredOptionsCurrentType =\r\n                    fgroup.controls.currentType.valueChanges.pipe(\r\n                        startWith(\"\"),\r\n                        map((value) =>\r\n                            typeof value === \"string\" ? value : value.name\r\n                        ),\r\n                        map((name) =>\r\n                            name\r\n                                ? this._filterCurrentType(name)\r\n                                : this.currentTypes\r\n                        )\r\n                    );\r\n            },\r\n            (err) => {}\r\n        );\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            let formValues = this.form.value;\r\n            let connectors = [];\r\n\r\n            formValues.connectorForm.forEach((item) => {\r\n                connectors.push({\r\n                    connector_type_id: item.connectorType,\r\n                    io_type_id: item.ioType,\r\n                    current_type_id: item.currentType,\r\n                    voltage: item.voltage,\r\n                    phase: item.phase,\r\n                    max_amp: item.maxAmp,\r\n                    power: item.power,\r\n                    frequency: item.frequency,\r\n                    status: this.status == true ? \"Y\" : \"N\",\r\n                    created_by: this.localStorage.userId,\r\n                });\r\n            });\r\n\r\n            let params: ChargingModel = {\r\n                charger_type_id: formValues.chargerType.id,\r\n                manufacturer_id: formValues.manufacturer.id,\r\n                charger_model_type_id: formValues.chargerModelType.id,\r\n                battery_backup: this.batteryBackup == true ? \"Y\" : \"N\",\r\n                isDual: this.isDualCardReader == true ? 1 : 0,\r\n                code: formValues.code,\r\n                name: formValues.name,\r\n                description: formValues.description,\r\n                communication_protocol_id: formValues.communicationProtocol.id,\r\n                communication_mode: formValues.communicationMode,\r\n                card_reader_type: formValues.cardReaderType,\r\n                no_of_connectors: formValues.connectorForm.length,\r\n                connector_data: connectors,\r\n                status: this.status == true ? \"Y\" : \"N\",\r\n                created_by: this.localStorage.userId,\r\n            };\r\n\r\n            this.chargingModelService.create(params).subscribe(\r\n                (resp: any) => {\r\n                    if (resp != null) {\r\n                        this.snackBar.open(\r\n                            MessageConstant.chargerCreateMessage,\r\n                            \"Dismiss\",\r\n                            { duration: 5000 }\r\n                        );\r\n                        this.router.navigate([\r\n                            \"/assetManagement/chargingModel/crud/list\",\r\n                        ]);\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.snackBar.open(\r\n                        MessageConstant.errorMessage,\r\n                        \"Dismiss\",\r\n                        { duration: 5000 }\r\n                    );\r\n                }\r\n            );\r\n        } else {\r\n            this.snackBar.open(MessageConstant.formInvalid, \"Dismiss\", {\r\n                duration: 5000,\r\n            });\r\n        }\r\n    }\r\n\r\n    abc() {\r\n        this.form;\r\n    }\r\n\r\n    clkBatteryBackup(event) {\r\n        this.batteryBackup = event.checked;\r\n        this.ref.checked = this.batteryBackup;\r\n    }\r\n\r\n    clkRfidCardReader(event) {\r\n        this.rfidCardReader = event.checked;\r\n        this.rfid.checked = this.rfidCardReader;\r\n    }\r\n\r\n    clkIsDualCardReader(event) {\r\n        this.isDualCardReader = event.checked;\r\n        this.isDual.checked = this.isDualCardReader;\r\n    }\r\n\r\n    getErrorMessage(form: FormGroup) {\r\n        return form.get(\"email\").hasError(\"required\")\r\n            ? \"You must enter a value\"\r\n            : form.get(\"email\").hasError(\"email\")\r\n            ? \"Not a valid email\"\r\n            : \"\";\r\n    }\r\n\r\n    filteredOptions() {\r\n        this.filteredOptionsCharType =\r\n            this.form.controls.chargerType.valueChanges.pipe(\r\n                startWith(\"\"),\r\n                map((value) =>\r\n                    typeof value === \"string\" ? value : value.name\r\n                ),\r\n                map((name) =>\r\n                    name ? this._filterCharType(name) : this.chargerTypes\r\n                )\r\n            );\r\n        this.filteredOptionsManufacturer =\r\n            this.form.controls.manufacturer.valueChanges.pipe(\r\n                startWith(\"\"),\r\n                map((value) =>\r\n                    typeof value === \"string\" ? value : value.name\r\n                ),\r\n                map((name) =>\r\n                    name ? this._filterManfacturer(name) : this.manufacturers\r\n                )\r\n            );\r\n        this.filteredOptionsCharModelType =\r\n            this.form.controls.chargerModelType.valueChanges.pipe(\r\n                startWith(\"\"),\r\n                map((value) =>\r\n                    typeof value === \"string\" ? value : value.name\r\n                ),\r\n                map((name) =>\r\n                    name\r\n                        ? this._filterCharModelType(name)\r\n                        : this.chargerModelTypes\r\n                )\r\n            );\r\n        this.filteredOptionsCommunicationProto =\r\n            this.form.controls.communicationProtocol.valueChanges.pipe(\r\n                startWith(\"\"),\r\n                map((value) =>\r\n                    typeof value === \"string\" ? value : value.name\r\n                ),\r\n                map((name) =>\r\n                    name\r\n                        ? this._filterCommunicationProtocol(name)\r\n                        : this.communicationProtocols\r\n                )\r\n            );\r\n    }\r\n\r\n    displayCharType(item: any): string {\r\n        return item && item.name ? item.name : \"\";\r\n    }\r\n\r\n    displayManfacturer(item: any): string {\r\n        return item && item.name ? item.name : \"\";\r\n    }\r\n\r\n    displayCharModelType(item: any): string {\r\n        return item && item.name ? item.name : \"\";\r\n    }\r\n\r\n    displayCommunicationProto(item: any): string {\r\n        return item && item.name ? item.name : \"\";\r\n    }\r\n\r\n    displayConnectorType(item: any): string {\r\n        return item && item.name ? item.name : \"\";\r\n    }\r\n\r\n    displayIoTypeAuto(item: any): string {\r\n        return item && item.name ? item.name : \"\";\r\n    }\r\n\r\n    displaycurrentType(item: any): string {\r\n        return item && item.name ? item.name : \"\";\r\n    }\r\n\r\n    private _filterCharType(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.chargerTypes.filter((option) =>\r\n            option.name.toLowerCase().includes(filterValue)\r\n        );\r\n    }\r\n\r\n    private _filterManfacturer(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.manufacturers.filter((option) =>\r\n            option.name.toLowerCase().includes(filterValue)\r\n        );\r\n    }\r\n\r\n    private _filterCharModelType(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.chargerModelTypes.filter((option) =>\r\n            option.name.toLowerCase().includes(filterValue)\r\n        );\r\n    }\r\n\r\n    private _filterCommunicationProtocol(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.communicationProtocols.filter((option) =>\r\n            option.name.toLowerCase().includes(filterValue)\r\n        );\r\n    }\r\n\r\n    private _filterConnectorType(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.connectorTypes.filter((option) =>\r\n            option.name.toLowerCase().includes(filterValue)\r\n        );\r\n    }\r\n\r\n    private _filterIoType(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.ioTypes.filter((option) =>\r\n            option.name.toLowerCase().includes(filterValue)\r\n        );\r\n    }\r\n\r\n    private _filterCurrentType(name: string): any[] {\r\n        const filterValue = name.toLowerCase();\r\n        return this.currentTypes.filter((option) =>\r\n            option.name.toLowerCase().includes(filterValue)\r\n        );\r\n    }\r\n\r\n    updateStatus(event) {\r\n        this.status = event.checked;\r\n        this.active.checked = this.status;\r\n    }\r\n}\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\" >\r\n\t<form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"fxFlex=\"1 0 auto\" name=\"form\" \r\n\t(submit)=\"onSubmit()\" (keydown.enter)=\"$event.preventDefault()\">\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Charger Model</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerType\" autocomplete=\"off\" required  [matAutocomplete]=\"chargerTypeAuto\">\r\n\t\t\t\t<mat-autocomplete #chargerTypeAuto=\"matAutocomplete\"  [displayWith]=\"displayCharType\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-icon matSuffix  class=\"secondary-text\"  matTooltip=\"Please select charger model\">model_training</mat-icon>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerType').invalid\">Please select charger model</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Manufacturer</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"manufacturer\"  autocomplete=\"off\" required [matAutocomplete]=\"manufacturerAuto\">\r\n\t\t\t\t\r\n\t\t\t\t<mat-autocomplete #manufacturerAuto=\"matAutocomplete\"  [displayWith]=\"displayManfacturer\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsManufacturer | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please select manufacturer\">precision_manufacturing</mat-icon>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('manufacturer').invalid\">Please select manufacturer</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Charger Model Type</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerModelType\" autocomplete=\"off\"  required  [matAutocomplete]=\"chargerModelTypeAuto\">\r\n\t\t\t\t\r\n\t\t\t\t<mat-autocomplete #chargerModelTypeAuto=\"matAutocomplete\"  [displayWith]=\"displayCharModelType\">\r\n\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharModelType | async\" [value]=\"option\">\r\n\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please select charger model type\">format_list_bulleted</mat-icon>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerModelType').invalid\">Please select charger model type</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Code</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"code\" maxlength=\"200\"\r\n\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t <mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter code\">qr_code_scanner</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Name</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"name\" maxlength=\"200\"\r\n\t\t\t\t\trequired autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter name\">badge</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\">Please enter name</mat-error>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"description\" maxlength=\"200\"\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter description\">description</mat-icon>\r\n\t\t\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Communication Protocol</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"communicationProtocol\"  required autocomplete=\"off\"  [matAutocomplete]=\"communicationProtocolAuto\">\r\n\t\t\t\r\n\t\t\t\t<mat-autocomplete #communicationProtocolAuto=\"matAutocomplete\"  [displayWith]=\"displayCommunicationProto\">\r\n\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCommunicationProto | async\" [value]=\"option\">\r\n\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-icon matSuffix  class=\"secondary-text\"  matTooltip=\"Please select communication protocol\">import_contacts</mat-icon>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationProtocol').invalid\">Please select communication protocol</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Communication Mode</mat-label>\r\n\t\t\t\t\r\n\t\t\t\t<mat-select formControlName=\"communicationMode\" multiple required=\"true\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let communication of communicationModeData\" [value]=\"communication\">{{communication}}</mat-option>\r\n\t\t\t\t</mat-select>\r\n\t\t\t\t<mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter communication mode\">burst_mode</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('communicationMode').invalid\">Please enter communication mode</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"24\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Card Reader Type</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"cardReaderType\" maxlength=\"20\"\r\n\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t <mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter card reader type\">chrome_reader_mode</mat-icon>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"24\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>No Of Connectors</mat-label>\r\n\t\t\t\t<input matInput numbersOnly placeholder=\"\" formControlName=\"noOfConnectors\"\r\n\t\t\t\t\trequired (change)=\"abc()\" autocomplete=\"off\" >\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter no. of connectors\">help</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.required\">Please enter numbers of connectors\r\n\t\t\t\t</mat-error>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.pattern\">Only numbers are allowed\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<div  fxFlex=\"12\" class=\"pr-4\">\r\n\t\t\t\t<mat-label class=\"sm-txt mr-20\">Battery Backup</mat-label>\r\n\t\t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"batteryBackup\" (change)=\"clkBatteryBackup($event)\" #toggleElement>\r\n\t\t\t\t\t{{batteryBackup ? 'Yes' : 'No'}}\r\n\t\t\t\t</mat-slide-toggle>\r\n\t\t\t</div>\r\n\t\t\t<div fxFlex=\"12\" class=\"pr-4\">\r\n        \t\t<mat-label class=\"sm-txt mr-20\">RFID Card Reader</mat-label>\r\n        \t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"rfidCardReader\" (change)=\"clkRfidCardReader($event)\" #rfidToggleElement>\r\n          \t\t\t{{rfidCardReader ? 'Yes' : 'No'}}\r\n\t\t\t\t</mat-slide-toggle>\r\n\t\t\t</div>\r\n\t\t\t<div fxFlex=\"12\" class=\"pr-4\">\r\n        \t\t<mat-label class=\"sm-txt mr-20\">Is Dual</mat-label>\r\n        \t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"isDualCardReader\" (change)=\"clkIsDualCardReader($event)\" #isDualToggleElement>\r\n          \t\t\t<!-- {{isDualCardReader ? 1 : 0}} -->\r\n\t\t\t\t</mat-slide-toggle>\r\n\t\t\t</div>\r\n      \t\t<div fxFlex=\"12\" >\r\n\t\t\t\t<mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n        \t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"status\" (change)=\"updateStatus($event)\" #activeElement>\r\n          \t\t\t{{status ? 'Active' : 'Inactive'}}\r\n\t\t\t\t</mat-slide-toggle>\r\n\t\t\t</div>\r\n\t\t\t<!-- <div  fxFlex=\"50\" class=\"pr-4\" style=\"margin-left: 8px;\">\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t</div> -->\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<mat-card style=\"box-shadow: none!important;\">\r\n      <div formArrayName=\"connectorForm\">\r\n\t\t\t\t<div   fxLayout=\"column\" *ngFor=\"let cf of form.get('connectorForm')['controls']; let i = index\" [formGroupName]=\"i\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\tConnector {{i+1}}\r\n\t\t\t\t\t</div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<mat-select  formControlName=\"connectorType\" >\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of connectorTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t<mat-icon matSuffix  class=\"secondary-text\"  matTooltip=\"Please enter connector type\">help</mat-icon>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>I/O Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select  formControlName=\"ioType\" >\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of ioTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t<mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter I/O type\">help</mat-icon>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Current Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select  formControlName=\"currentType\" >\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of currentTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter current type\">help</mat-icon>\r\n              </mat-form-field >\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Voltage(V)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput  formControlName=\"voltage\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter voltage \">help</mat-icon>\r\n\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('voltage').errors?.pattern\">Only numbers are allowed (e.g. 00.000)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t</div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t<mat-label>Phase</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"phase\"\r\n\t\t\t\t\t\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t\t\t <mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter phase\">help</mat-icon>\r\n\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('phase').errors?.pattern\">Only numbers are allowed (e.g. 00.000)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Max Amp(A)</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"maxAmp\"\r\n\t\t\t\t\t\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t\t\t <mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter max Amp.\">help</mat-icon>\r\n\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('maxAmp').errors?.pattern\">Only numbers are allowed (e.g. 00.000)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Power(KW)</mat-label>\r\n\t\t\t\t\t\t  <input matInput placeholder=\"\" formControlName=\"power\"\t autocomplete=\"off\">\r\n\t\t\t\t\t\t  <mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter power\">help</mat-icon>\r\n\t\t\t\t\t  \t<mat-error *ngIf=\"cf.get('power').errors?.pattern\">Only numbers are allowed (e.g. 00.000)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Frequency(Hz)</mat-label>\r\n\t\t\t\t\t    \t<input matInput placeholder=\"\" formControlName=\"frequency\"  autocomplete=\"off\">\r\n\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter frequency\">help</mat-icon>\r\n\t\t\t\t\t\t    <mat-error *ngIf=\"cf.get('frequency').errors?.pattern\">Only numbers are allowed (e.g. 00.000)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"add-row\">\r\n\t\t\t\t\t\t<mat-label class=\"sm-txt\">Add Row</mat-label>\r\n\t\t\t\t\t\t<button class=\"float-left\" type=\"button\" mat-icon-button color=\"primary\" aria-label=\"Add\"\r\n\t\t\t\t\t\t\t(click)=\"addConnectorFG()\" matTooltip=\"Add\">\r\n\t\t\t\t\t\t<mat-icon>add_circle</mat-icon>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button class=\"float-left\" type=\"button\" mat-icon-button color=\"warn\" aria-label=\"Remove/clear\"\r\n\t\t\t\t\t\t\t(click)=\"removeConnectorFG(i)\" matTooltip=\"Remove\">\r\n\t\t\t\t\t\t<mat-icon>delete</mat-icon>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n        </div>\r\n      </div>\r\n\t\t</mat-card>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\t\t\t<button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n\t\t\t<button mat-raised-button color=\"warn\" type=\"button\" class=\"mr-8\"routerLink=\"/assetManagement/chargingModel/crud/list\" >Cancel</button>\r\n\t\t</div>\r\n   </form>\r\n</div>\r\n\r\n                   \r\n\t\t\t\t\t","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent ,canActivate:[AuthGuard]},\r\n  { path : 'list', component : ListComponent, canActivate:[AuthGuard]},\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","// import { NgModule } from '@angular/core'; \r\n// import { SharedModule } from '@shared/shared.module';\r\n// import { CreateComponent } from './create/create.component';\r\n// import { ListComponent } from './list/list.component';\r\n\r\n// const COMPONENTS =[CreateComponent,ListComponent];\r\n// const COMPONENTS_DYNAMIC =[];\r\n\r\n// @NgModule({\r\n//     imports:[SharedModule, ChargingModelRoutingModule],\r\n//     declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n//     entryComponents : [COMPONENTS_DYNAMIC]\r\n// })\r\n\r\n// export class ChargingModelModule{}\r\n\r\nimport { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { ChargingModelRoutingModule } from './charging-model-routing.module';\r\nimport { ChargingModelCrudComponent } from './charging-model-crud/charging-model-crud.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nconst COMPONENTS =[ ChargingModelCrudComponent, CreateComponent, ListComponent];\r\nconst COMPONENTS_DYNAMIC =[ViewDialogComponent,ActionDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, ChargingModelRoutingModule,FuseSharedModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class ChargingModelModule{}","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport { FormControl, FormArray } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { Router } from '@angular/router';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { ChargerTypeService } from 'app/shared/services/charger-type/charger-type.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith, tap } from 'rxjs/operators';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nexport interface ChargingModel {\r\n  id?: number;\r\n  client_id?: number;\r\n  charger_type_id: number;\r\n  client_name?: string;\r\n  manufacturer_id: number;\r\n  manufacturer_name?: string;\r\n  charger_model_type_id: number;\r\n  charger_model_type_name?: string;\r\n  battery_backup: string;\r\n  isDual: number;\r\n  code: string;\r\n  name: string;\r\n  description: string;\r\n  communication_protocol_id: number;\r\n  communication_protocol_name?: string;\r\n  communication_mode: string;\r\n  card_reader_type: string;\r\n  no_of_connectors: number;\r\n  connector_data: ChargingModelConnectorMap[];\r\n  status: string;\r\n  created_date?: string;\r\n  created_by?: number;\r\n  modify_date?: string;\r\n  modify_by?: number;\r\n}\r\n\r\nexport interface ChargingModelConnectorMap {\r\n  id: number;\r\n  model_id: number;\r\n  connector_type_id: number;\r\n  io_type_id: number;\r\n  current_type_id: number;\r\n  voltage: number;\r\n  phase: number;\r\n  max_amp: number;\r\n  power: number;\r\n  frequency: number;\r\n  status: string;\r\n  created_date: string;\r\n  created_by: number;\r\n  modify_date: string;\r\n  modify_by: number;\r\n}\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-action-dialog',\r\n  templateUrl: './action-dialog.component.html',\r\n  styleUrls: ['./action-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage: any;\r\n\r\n  chargerTypes: any;\r\n  manufacturers: any;\r\n  chargerModelTypes: any;\r\n  communicationProtocols: any;\r\n  connectorTypes: any;\r\n  ioTypes: any;\r\n  currentTypes: any;\r\n  batteryBackup = false;\r\n  rfidCardReader = false;\r\n  isDualCardReader: boolean = false;\r\n  status = false;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"rfidToggleElement\") rfid: any;\r\n  @ViewChild(\"isDualToggleElement\") isDual: any;\r\n  @ViewChild(\"activeElement\") active: any;\r\n  filteredOptionsCharType: Observable<any[]>;\r\n  filteredOptionsManufacturer: Observable<any[]>;\r\n  filteredOptionsCharModelType: Observable<any[]>;\r\n  filteredOptionsCommunicationProto: Observable<any[]>;\r\n  communicationModeData: string[] = ['LAN', 'SIM', 'WIFI'];\r\n  // messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder, private chargerTypeService: ChargerTypeService,\r\n    private snackBar: MatSnackBar, public dialogRef: MatDialogRef<ActionDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData,\r\n    private chargingModelService: ChargingModelService,\r\n    private masterService: MasterService,\r\n    private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n\r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      chargerType: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      manufacturer: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      chargerModelType: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      batteryBackup: [{ value: false }, [Validators.required]],\r\n      isDualCardReader: this.isDualCardReader == true ? 1 : 0,\r\n      code: ['', [Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description: ['', [Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      communicationProtocol: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      communicationMode: ['', [Validators.required]],\r\n      cardReaderType: [''],\r\n      noOfConnectors: [{ value: '', disabled: true }, [Validators.required, Validators.pattern(PATTERNS.ONLY_NUMBERS)]],\r\n      connectorForm: this.fb.array([this.createConnectorFG()]),\r\n    });\r\n\r\n    this.getChargetTypes();\r\n    this.getManufacturers();\r\n    this.getChargerModelTypes();\r\n    this.getCommunicationProtocols();\r\n    this.getConnectorTypes();\r\n    this.getIOTypes();\r\n    this.getCurrentTypes();\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n\r\n    if (this.isEditMode) {\r\n      this.assignValues(this.params);\r\n    }\r\n    this.filteredOptions();\r\n  }\r\n\r\n  private createConnectorFG(): FormGroup {\r\n    return new FormGroup({\r\n      connectorType: new FormControl(''),\r\n      ioType: new FormControl(''),\r\n      currentType: new FormControl('',),\r\n      voltage: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      phase: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      maxAmp: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      power: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      frequency: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)])\r\n    });\r\n  }\r\n\r\n  public addConnectorFG() {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    connectorForm.push(this.createConnectorFG());\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  public removeConnectorFG(i: number) {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    if (connectorForm.length > 1) {\r\n      connectorForm.removeAt(i)\r\n    } else {\r\n      connectorForm.reset()\r\n    }\r\n\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  getChargetTypes() {\r\n    this.chargerTypeService.getActiveChargerTypes().subscribe(\r\n      (resp: any) => {\r\n        if (resp.status == true) {\r\n          if (resp.data.length > 0) {\r\n            this.chargerTypes = resp.data;\r\n\r\n            if (this.isEditMode) {\r\n              const toSelect = this.chargerTypes.find(c => c.id == this.params.data.charger_type_id);\r\n              this.form.get('chargerType').setValue(toSelect);\r\n              this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n                .pipe(\r\n                  startWith(''),\r\n                  //tap(() => this.form.controls.chargerType.setValue(toSelect)),\r\n                  //tap(() => this.form.get('chargerType').setValue({name:toSelect.name, id:toSelect.id})),\r\n                  map(value => typeof value === 'string' ? value : value.name),\r\n                  map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n\r\n                );\r\n            }\r\n          } else {\r\n            this.snackBar.open(MessageConstant.NoRecordFoundMessage, 'Dismiss', { duration: 2000 });\r\n          }\r\n        }\r\n\r\n\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n\r\n  getManufacturers() {\r\n    this.masterService.getManufacturers().subscribe(\r\n      (data: any) => {\r\n        this.manufacturers = data;\r\n        if (this.isEditMode) {\r\n          const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n          this.form.get('manufacturer').setValue(toSelect);\r\n          this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              // tap(() => this.form.controls.manufacturer.setValue(toSelect)),\r\n              map(value => typeof value === 'string' ? value : value.name),\r\n              map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n            );\r\n        }\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n  getChargerModelTypes() {\r\n    this.masterService.getChargerModelTypes().subscribe(\r\n      (data: any) => {\r\n        this.chargerModelTypes = data;\r\n        if (this.isEditMode) {\r\n          const toSelect = this.chargerModelTypes.find(c => c.id == this.params.data.charger_model_type_id);\r\n          this.form.get('chargerModelType').setValue(toSelect);\r\n          this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              //tap(() => this.form.controls.chargerModelType.setValue(toSelect)),\r\n              map(value => typeof value === 'string' ? value : value.name),\r\n              map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n            );\r\n        }\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n  getCommunicationProtocols() {\r\n    this.masterService.getCommunicationProtocols().subscribe(\r\n      (data: any) => {\r\n        this.communicationProtocols = data;\r\n        if (this.isEditMode) {\r\n\r\n          const toSelect = this.communicationProtocols.find(c => c.id == this.params.data.communication_protocol_id);\r\n          this.form.get('communicationProtocol').setValue(toSelect);\r\n          this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n            .pipe(\r\n              startWith(''),\r\n              //tap(() => this.form.controls.communicationProtocol.setValue(toSelect)),\r\n              map(value => typeof value === 'string' ? value : value.name),\r\n              map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n            );\r\n        }\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n\r\n  getConnectorTypes() {\r\n    this.masterService.getConnectorTypes().subscribe(\r\n      (data: any) => {\r\n\r\n        this.connectorTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n  getIOTypes() {\r\n    this.masterService.getIOTypes().subscribe(\r\n      (data: any) => {\r\n        this.ioTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n  getCurrentTypes() {\r\n    this.masterService.getCurrentTypes().subscribe(\r\n      (data: any) => {\r\n        this.currentTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      }, (err) => {\r\n      }\r\n    )\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onYesClick() {\r\n    if (this.form.valid) {\r\n      let formValues = this.form.value;\r\n      let connectors = [];\r\n\r\n      formValues.connectorForm.forEach(item => {\r\n        connectors.push({\r\n          connector_type_id: item.connectorType,\r\n          io_type_id: item.ioType,\r\n          current_type_id: item.currentType,\r\n          voltage: item.voltage,\r\n          phase: item.phase,\r\n          max_amp: item.maxAmp,\r\n          power: item.power,\r\n          frequency: item.frequency,\r\n          status: 'Y',\r\n          created_by: this.localStorage.userId\r\n        })\r\n      });\r\n\r\n      let params: ChargingModel = {\r\n        charger_type_id: formValues.chargerType.id,\r\n        manufacturer_id: formValues.manufacturer.id,\r\n        charger_model_type_id: formValues.chargerModelType.id,\r\n        battery_backup: this.batteryBackup == true ? 'Y' : 'N',\r\n        isDual: this.isDualCardReader == true ? 1 : 0,\r\n        code: formValues.code,\r\n        name: formValues.name,\r\n        description: formValues.description,\r\n        communication_protocol_id: formValues.communicationProtocol.id,\r\n        communication_mode: formValues.communicationMode,\r\n        card_reader_type: formValues.cardReaderType,\r\n        no_of_connectors: formValues.connectorForm.length,\r\n        connector_data: connectors,\r\n        status: this.status == true ? 'Y' : 'N',\r\n        created_by: this.localStorage.userId\r\n      }\r\n\r\n      if (this.isEditMode) {\r\n        params.id = this.params.data.id,\r\n          params.modify_by = this.localStorage.userId;\r\n      } else {\r\n        params.created_by = this.localStorage.userId;\r\n      }\r\n\r\n      if (this.isEditMode) {\r\n        this.chargingModelService.update(params).subscribe(\r\n          (data: any) => {\r\n\r\n            this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n\r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      } else {\r\n        this.chargingModelService.create(params).subscribe(\r\n          (data: any) => {\r\n\r\n            this.snackBar.open(MessageConstant.chargerCreateMessage, 'Dismiss', { duration: 5000 });\r\n            // this.router.navigate(['/chargingModel/crud/list']);\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n\r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n\r\n      }\r\n\r\n      this.dialogRef.close(params);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n        ? 'Not a valid email'\r\n        : '';\r\n  }\r\n\r\n  assignValues(params) {\r\n    this.form.get('code').setValue(params.data.code);\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    var temp = new Array();\r\n    temp = this.params.data.communication_mode.split(\",\");\r\n\r\n    this.form.get('communicationMode').setValue(temp);\r\n    this.form.get('cardReaderType').setValue(params.data.card_reader_type);\r\n    this.form.get('noOfConnectors').setValue(params.data.no_of_connectors);\r\n\r\n    this.status = params.data.status == 'Y' ? true : false;\r\n    this.batteryBackup = params.data.battery_backup == 'Y' ? true : false;\r\n    this.isDualCardReader = params.data.isDual == 1 ? true : false;\r\n    this.assignValuesFG(params.data.connector_data);\r\n  }\r\n\r\n  assignValuesFG(data) {\r\n\r\n    let connector_data = [];\r\n\r\n    data.forEach(connector => {\r\n      this.addConnectorFG();\r\n      connector_data.push({\r\n        id: connector.id,\r\n        model_id: connector.model_id,\r\n        connectorType: connector.connector_type_id,\r\n        ioType: connector.io_type_id,\r\n        currentType: connector.current_type_id,\r\n        voltage: connector.voltage,\r\n        phase: connector.phase,\r\n        maxAmp: connector.max_amp,\r\n        power: connector.power,\r\n        frequency: connector.frequency,\r\n        status: connector.status,\r\n        created_date: connector.created_date,\r\n        created_by: connector.created_by,\r\n        modify_date: connector.modify_date,\r\n        modify_by: connector.modify_by\r\n      })\r\n    });\r\n\r\n    this.removeConnectorFG(data.length);\r\n\r\n    const connectorForm = this.form.get('connectorForm') as FormArray;\r\n\r\n    connectorForm.patchValue(connector_data);\r\n\r\n\r\n  }\r\n\r\n  clkBatteryBackup(event) {\r\n    this.batteryBackup = event.checked;\r\n    this.ref.checked = this.batteryBackup;\r\n  }\r\n  clkRfidCardReader(event) {\r\n    this.rfidCardReader = event.checked;\r\n    this.rfid.checked = this.rfidCardReader;\r\n  }\r\n  clkIsDualCardReader(event) {\r\n    this.isDualCardReader = event.checked;\r\n    this.isDual.checked = this.isDualCardReader;\r\n  }\r\n  updateStatus(event) {\r\n    this.status = event.checked;\r\n    this.active.checked = this.status;\r\n  }\r\n\r\n  filteredOptions() {\r\n    this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n      );\r\n    this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n      );\r\n    this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n      );\r\n    this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n      );\r\n  }\r\n  displayCharType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayManfacturer(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCharModelType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCommunicationProto(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCharType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterManfacturer(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.manufacturers.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharModelType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerModelTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCommunicationProtocol(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.communicationProtocols.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n\tstyle=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n\r\n<mat-toolbar class=\"action_toolbar\"> Variants</mat-toolbar>\r\n<div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n\t<div id=\"forms\" class=\"page-layout simple fullwidth mat-dialog\" fxLayout=\"column\">\r\n\t\t<form [formGroup]=\"form\" class=\"\" fxLayout=\"column\" fxLayoutAlign=\"center\" fxFlex=\"1 0 auto\" name=\"form\">\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"\r\n\t\t\t\t\t\t\tmatTooltip=\"Please select charger model\">model_training</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerType').invalid\">Please select charger model</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Manufacturer</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"manufacturer\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"manufacturerAuto\">\r\n\t\t\t\t\t<mat-autocomplete #manufacturerAuto=\"matAutocomplete\" [displayWith]=\"displayManfacturer\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsManufacturer | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select manufacturer\">\r\n\t\t\t\t\t\t\tprecision_manufacturing</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('manufacturer').invalid\">Please select manufacturer</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Charger Model Type</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerModelType\" autocomplete=\"off\" required\r\n\t\t\t\t\t\t[matAutocomplete]=\"chargerModelTypeAuto\">\r\n\t\t\t\t\t<mat-autocomplete #chargerModelTypeAuto=\"matAutocomplete\" [displayWith]=\"displayCharModelType\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharModelType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select charger model type\">\r\n\t\t\t\t\t\t\tformat_list_bulleted</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('chargerModelType').invalid\">Please select charger model type</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Code</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"code\" maxlength=\"200\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter code\">qr_code_scanner</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Name</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"name\" maxlength=\"200\" required autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter name\">badge</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\">Please enter name</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"description\" maxlength=\"200\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter description\">description\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special character are not allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Protocol</mat-label>\r\n\t\t\t\t\t<input type=\"text\" matInput formControlName=\"communicationProtocol\" required autocomplete=\"off\"\r\n\t\t\t\t\t\t[matAutocomplete]=\"communicationProtocolAuto\">\r\n\t\t\t\t\t<mat-autocomplete #communicationProtocolAuto=\"matAutocomplete\"\r\n\t\t\t\t\t\t[displayWith]=\"displayCommunicationProto\">\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCommunicationProto | async\" [value]=\"option\">\r\n\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select communication protocol\">\r\n\t\t\t\t\t\t\timport_contacts</mat-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationProtocol').invalid\">Please select communication protocol\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Communication Mode</mat-label>\r\n\t\t\t\t\t<mat-select formControlName=\"communicationMode\" multiple>\r\n\t\t\t\t\t\t<mat-option *ngFor=\"let communication of communicationModeData\" [value]=\"communication\">\r\n\t\t\t\t\t\t\t{{communication}}</mat-option>\r\n\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter communication mode\">burst_mode\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('communicationMode').invalid\">Please enter communication mode</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t</div>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>Card Reader Type</mat-label>\r\n\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"cardReaderType\" autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter card reader type\">\r\n\t\t\t\t\t\tchrome_reader_mode</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('cardReaderType').invalid\">Please enter card reader type\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label>No Of Connectors</mat-label>\r\n\t\t\t\t\t<input matInput numbersOnly placeholder=\"\" formControlName=\"noOfConnectors\" required\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter no. of connectors\">help\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.required\">Please enter numbers of connectors\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.pattern\">Only numbers are allowed\r\n\t\t\t\t\t</mat-error>\r\n\t\t\t\t</mat-form-field>\r\n\t\t\t\t<div fxFlex=\"13\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Battery Backup</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"batteryBackup\"\r\n\t\t\t\t\t\t(change)=\"clkBatteryBackup($event)\" #toggleElement>\r\n\t\t\t\t\t\t{{batteryBackup ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"12\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">RFID Card Reader</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"rfidCardReader\"\r\n\t\t\t\t\t\t(change)=\"clkRfidCardReader($event)\" #rfidToggleElement>\r\n\t\t\t\t\t\t{{rfidCardReader ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"12\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Is Dual</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" [checked]=\"isDualCardReader\"\r\n\t\t\t\t\t\t(change)=\"clkIsDualCardReader($event)\" #isDualToggleElement>\r\n\t\t\t\t\t\t<!-- {{isDualCardReader ? 1 : 0}} -->\r\n\t\t\t\t\t</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"13\" class=\"pr-4\">\r\n\t\t\t\t\t<mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n\t\t\t\t\t\t(change)=\"updateStatus($event)\" #activeElement>\r\n\t\t\t\t\t\t{{status ? 'Active' : 'Inactive'}}</mat-slide-toggle>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<mat-card style=\"box-shadow: none!important;padding: 0;\">\r\n\t\t\t\t<div formArrayName=\"connectorForm\">\r\n\t\t\t\t\t<div fxLayout=\"column\" *ngFor=\"let cf of form.get('connectorForm')['controls']; let i = index\"\r\n\t\t\t\t\t\t[formGroupName]=\"i\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\tConnector {{i+1}}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"connectorType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of connectorTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter connector type\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>I/O Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"ioType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of ioTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter I/O type\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Current Type</mat-label>\r\n\t\t\t\t\t\t\t\t<mat-select formControlName=\"currentType\">\r\n\t\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of currentTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter current type\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Voltage(V)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput formControlName=\"voltage\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter voltage \">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('voltage').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Phase</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"phase\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter phase\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('phase').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Max Amp(A)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"maxAmp\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter max Amp.\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('maxAmp').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Power(KW)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"power\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter power\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('power').errors?.pattern\">Only numbers are allowed (e.g. 00.00)\r\n\t\t\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t\t<mat-label>Frequency(Hz)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"frequency\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter frequency\">help\r\n\t\t\t\t\t\t\t\t</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('frequency').errors?.pattern\">Only numbers are allowed (e.g.\r\n\t\t\t\t\t\t\t\t\t00.00)</mat-error>\r\n\t\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t\t<div class=\"add-row\">\r\n\t\t\t\t\t\t\t\t<mat-label class=\"sm-txt\">Add Row</mat-label>\r\n\t\t\t\t\t\t\t\t<button class=\"float-left\" type=\"button\" mat-icon-button color=\"primary\"\r\n\t\t\t\t\t\t\t\t\taria-label=\"Add\" (click)=\"addConnectorFG()\" matTooltip=\"Add\">\r\n\t\t\t\t\t\t\t\t\t<mat-icon>add_circle</mat-icon>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t<button class=\"float-left\" type=\"button\" mat-icon-button color=\"warn\"\r\n\t\t\t\t\t\t\t\t\taria-label=\"Remove/clear\" (click)=\"removeConnectorFG(i)\" matTooltip=\"Remove\">\r\n\t\t\t\t\t\t\t\t\t<mat-icon>delete</mat-icon>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</mat-card>\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\t\t\t\t<button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"onYesClick()\">{{isEditMode\r\n\t\t\t\t\t? 'Save' : 'Save'}}</button>\r\n\t\t\t\t<button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t</form>\r\n\t</div>\r\n</div>","import { ChangeDetectorRef, Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-charging-model-crud',\r\n  templateUrl: './charging-model-crud.component.html',\r\n  styleUrls: ['./charging-model-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class ChargingModelCrudComponent implements OnInit {\r\n  // Nav bar demo\r\n  tabLinks = [\r\n    // { label: 'Charger Variants', link: 'list' },\r\n    // { label: 'Add New', link: 'create' }\r\n  ];\r\n  menuArray: any;\r\n  localStorage: any;\r\n  objectData: any;\r\n  objectChildData: any;\r\n  tempLinks = [];\r\n  childData: any;\r\n  constructor(private router: Router, private cdr: ChangeDetectorRef, private _utilityService: UtilityService) {\r\n\r\n  }\r\n  ngAfterViewInit() {\r\n    this._utilityService.activeMenuItems$.subscribe(menuItemSelecte => {\r\n      this.menuArray = menuItemSelecte;\r\n      if (this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined) {\r\n        this.menuArray = JSON.parse(localStorage.getItem('activeMenuItems'));\r\n      }\r\n      this.cdr.detectChanges();\r\n    })\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    let nav_list = this.localStorage.nav_list_with_tab;\r\n    nav_list.filter((x) => {\r\n      if (x.id === \"assetManagement\") {\r\n        this.objectData = x;\r\n        if (this.objectData.children != undefined && this.objectData.children != null) {\r\n          this.objectData.children.filter((y) => {\r\n            if (y.id === \"chargingModel\") {\r\n              this.objectChildData = y;\r\n              if (this.objectChildData.children != undefined && this.objectChildData.children != null) {\r\n                this.objectChildData.children.filter((z) => {\r\n                  this.childData = z;\r\n                  if (z.id === \"crud\") {\r\n                    let isDefaultRoutePermeted = false;\r\n                    if (this.childData.children != undefined && this.childData.children != null) {\r\n                      this.childData.children.filter((t) => {\r\n                        if (t.id === \"chargerVariants\") {\r\n                          isDefaultRoutePermeted = true;\r\n                          this.tempLinks.push({ label: 'Charger Variants', link: 'list' });\r\n                        }\r\n                        if (t.id === \"addNew\") {\r\n                          this.tempLinks.push({ label: 'Add New', link: 'create' });\r\n                        }\r\n                      });\r\n                    }\r\n\r\n                    this.tabLinks = this.tempLinks;\r\n                    if (!isDefaultRoutePermeted) {\r\n                      this.router.navigate(['/assetManagement/chargingModel/crud/' + this.tempLinks[0].link]);\r\n                    }\r\n                  }\r\n                });\r\n              }\r\n\r\n            }\r\n\r\n          });\r\n        }\r\n\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent { }\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","\r\nimport {Component, OnInit, ViewChild,ChangeDetectorRef} from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog,MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport {FuseConfirmDialogComponent} from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport{ViewDialogComponent} from'../view-dialog/view-dialog.component';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nexport class ChargingModel {\r\n  id : number;\r\n  client_id : number;\r\n  client_name : string;\r\n  manufacturer_id : number ;\r\n  manufacturer_name : string ;\r\n  charger_model_type_id : number;\r\n  charger_model_type_name : string;\r\n  battery_backup : string;\r\n  code : string;\r\n  name : string;\r\n  charger_type_name:string;\r\n  description : string;\r\n  communication_protocol_id : number;\r\n  communication_protocol_name : string;\r\n  communication_mode : string;\r\n  card_reader_type : string;\r\n  no_of_connectors : number;\r\n  status : string ;\r\n  created_date : string ;\r\n  created_by : number;\r\n  modify_date : string ;\r\n  modify_by : number;\r\n  connector_data : string;\r\n  statusString:string;\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ListComponent implements OnInit {\r\n  filterEntity: ChargingModel;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['code','name', 'charger_type_name','manufacturer_name','status','action'];\r\n  head = [['Code','Name','Charger Type', 'Manufacturer','Status']]\r\n  dataSource: MatTableDataSource<ChargingModel>;\r\n\r\n  charginModels : ChargingModel[];\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  dialogRef: any;\r\n  codeSearch = false;\r\n  nameSearch = false;\r\n  chargerTypeSearch = false;\r\n  manfactureSearch = false;\r\n  cModelTypeSearch = false;\r\n  batteryBackupSearch = false;\r\n  communicationSearch = false;\r\n  communicationModeSearch = false;\r\n  cardReaderSearch = false;\r\n  noConnectorSearch = false;\r\n  statusSearch = false;\r\n  exportedData: any[];\r\n  localStorage : any;\r\n  //messageConstant = MessageConstant;\r\n  constructor(private chargingModelService : ChargingModelService ,public dialog : MatDialog,\r\n    private snackBar : MatSnackBar,private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    \r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    this.getChargingModels();\r\n    this.filterEntity = new ChargingModel();\r\n    \r\n           this.filterType = MatTableFilter.ANYWHERE;\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getChargingModels(){\r\n    this.chargingModelService.getChargingModelsAll().subscribe(\r\n      (data:any)=>{\r\n        //;\r\n        if(data != null){\r\n          this.charginModels = data;\r\n          \r\n          for(var i=0; i < this.charginModels.length;i++){\r\n            if(this.charginModels[i].status == 'N'){\r\n              this.charginModels[i].statusString = 'Inactive';\r\n            }else{\r\n              this.charginModels[i].statusString = 'Active';\r\n            }\r\n            \r\n           \r\n          }\r\n          this.dataSource = new MatTableDataSource(this.charginModels);\r\n  \r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n          this.cdr.detectChanges();\r\n        }else{\r\n          return;\r\n        }\r\n       \r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id){\r\n    this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n      disableClose: true\r\n  });\r\n\r\n  //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n\r\n  this.confirmDialogRef.afterClosed().subscribe(result => {\r\n      if ( result )\r\n      {\r\n          this.chargingModelService.delete(id).subscribe(\r\n      (data:any)=>{\r\n        ;\r\n        this.getChargingModels();\r\n        this.snackBar.open(MessageConstant.deleteMessage,'Dismiss',{duration:2000});\r\n        this.cdr.detectChanges();\r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n      }\r\n      this.confirmDialogRef = null;\r\n  });\r\n   \r\n  }\r\n\r\n  viewDialog(action,data) : void{\r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n      width: '1400px',\r\n      data: params,\r\n      panelClass: 'app-action-dialog',\r\n      autoFocus: false,\r\n      disableClose: true    \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getChargingModels();\r\n    });\r\n  }\r\n  \r\n  openDialog(action,data): void {\r\n    // this.snackBar.open('Unable to proceed, In prgress','Dismiss');\r\n    // return false;\r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '1400px',\r\n      data: params,\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.getChargingModels();\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  changeVisibility(visibleOption,ev){\r\n    // visibleOption = !visibleOption;\r\n    //nameSearch = false;\r\n      //descSearch = false;\r\n      ev.stopPropagation();\r\n      if(visibleOption == 'codeSearch'){\r\n        this.codeSearch = !this.codeSearch;\r\n        this.filterEntity.code = \"\";\r\n      }\r\n    if(visibleOption == 'nameSearch'){\r\n      this.nameSearch = !this.nameSearch;\r\n      this.filterEntity.name = \"\";\r\n    }\r\n    if(visibleOption == 'chargerTypeSearch'){\r\n      this.chargerTypeSearch = !this.chargerTypeSearch;\r\n      this.filterEntity.charger_type_name = \"\";\r\n    }\r\n    if(visibleOption == 'manfactureSearch'){\r\n      this.manfactureSearch = !this.manfactureSearch;\r\n      this.filterEntity.manufacturer_name = \"\";\r\n    }\r\n    if(visibleOption == 'cModelTypeSearch'){\r\n      this.cModelTypeSearch = !this.cModelTypeSearch;\r\n      this.filterEntity.charger_type_name = \"\";\r\n    }\r\n    if(visibleOption == 'batteryBackupSearch'){\r\n      this.batteryBackupSearch = !this.batteryBackupSearch;\r\n      this.filterEntity.battery_backup = \"\";\r\n    }\r\n    if(visibleOption == 'communicationSearch'){\r\n      this.communicationSearch = !this.communicationSearch;\r\n      this.filterEntity.communication_protocol_name = \"\";\r\n    }\r\n    if(visibleOption == 'communicationModeSearch'){\r\n      this.communicationModeSearch = !this.communicationModeSearch;\r\n      this.filterEntity.communication_mode = \"\";\r\n    }\r\n    if(visibleOption == 'cardReaderSearch'){\r\n      this.cardReaderSearch = !this.cardReaderSearch;\r\n      this.filterEntity.card_reader_type = \"\";\r\n    }\r\n    if(visibleOption == 'noConnectorSearch'){\r\n      this.noConnectorSearch = !this.noConnectorSearch;\r\n      this.filterEntity.no_of_connectors= null;\r\n    } \r\n    if(visibleOption == 'statusSearch'){\r\n      this.statusSearch = !this.statusSearch;\r\n      this.filterEntity.statusString = \"\";\r\n    }\r\n   }\r\n   tableExport()\r\n   {\r\n     // const tab = document.getElementById('mapTable');\r\n     // const ws: XLSX.WorkSheet=XLSX.utils.table_to_sheet(tab);//converts a DOM TABLE element to a worksheet\r\n     // const wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n     // XLSX.utils.book_append_sheet(wb, ws, 'Mapped Charger');\r\n   \r\n     // /* save to file */\r\n     // XLSX.writeFile(wb, 'Mapped Charger.xlsx');\r\n     //this.preloader.open();\r\n     this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n       var chargerModel = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = {'Code':chargerModel.code,'Variant Name':chargerModel.name,'Charger Type':chargerModel.charger_type_name,\r\n                  'Manufacturer': chargerModel.manufacturer_name,'Charger Model Type ':chargerModel.charger_model_type_name,\r\n                  'Battery Backup':chargerModel.battery_backup,'Communication Protocol':chargerModel.communication_protocol_name,\r\n                  'Communication Mode':chargerModel.communication_mode,'Card Reader Type':chargerModel.card_reader_type,\r\n                  'No Of Connectors':chargerModel.no_of_connectors,'Status':chargerModel.statusString};\r\n      this.exportedData.push(data);\r\n    }\r\n\r\n\r\n     const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n       const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n       XLSX.utils.book_append_sheet(workBook, workSheet, 'SheetName');\r\n       XLSX.writeFile(workBook, 'Varients.xlsx');\r\n     //XLSX.writeFileAsync('OCPP Logs.xlsx',workBook, this.cb)\r\n      //this.preloader.close();\r\n     \r\n   \r\n   }\r\n   pdfExport(){\r\n    \r\n    var doc = new jsPDF({ // set needed dimensions for any elemen\r\n      \r\n    });\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var chrger = this.dataSource.filteredData[i];\r\n     //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n     //statusString: `statusString${i}`});\r\n     var data =[chrger.code,chrger.code,chrger.name,chrger.charger_type_name,chrger.manufacturer_name,chrger.statusString,chrger.statusString] ;\r\n     \r\n     this.exportedData.push(data);\r\n   }\r\n   var img = new Image();\r\n   var imgRight = new Image();\r\n    var src = 'assets/images/logos/logo_sparkev_main.png';\r\n    var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n   imgRight.src =srcSparkEV;\r\n   var createdDate = new Date().toLocaleString(('en-GB'));\r\n   img.src = src;\r\n   doc.setFontSize(11);\r\n   doc.setTextColor(100);\r\n   doc.setFontSize(18);\r\n   \r\n    (doc as any).autoTable({\r\n      head: this.head,\r\n      body: this.exportedData,\r\n      theme: 'grid',\r\n      headStyles: { fontStyle: 'majalla',fillColor:[11, 148, 68]},\r\n      styles: {\r\n        cellPadding: 1,\r\n        fontSize: 8,\r\n        \r\n      },\r\n     \r\n      margin: { top: 22 },\r\n      didDrawCell: data => {\r\n      },\r\n      didDrawPage:data=>{\r\n        doc.addImage(img , 15, 7, 15, 6);\r\n        doc.addImage(imgRight, 170, 7, 25, 6);\r\n        \r\n        doc.text('Variants Report' ,doc.internal.pageSize.getWidth() / 2, 11, { align: 'center'});\r\n        \r\n        doc.setTextColor(211,211,211);\r\n        doc.setFontSize(60);\r\n        doc.setGState( doc.GState({opacity: 0.6}));\r\n        doc.text('Confidential/Not for Public use',25,285,null,60, );\r\n        doc.setGState( doc.GState({opacity: 1}));\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(9);\r\n        doc.text('Date:'+ createdDate ,15, 18);\r\n        \r\n        doc.text('Generated By:'+ this.localStorage.f_Name ,195, 18,{ align: 'right'});\r\n        doc = this.addWaterMark(doc);\r\n      }\r\n    })\r\n  \r\n    // below line for Open PDF document in new tab\r\n    doc.output('dataurlnewwindow')\r\n    \r\n    // below line for Download PDF document  \r\n    doc.save('Variants report.pdf');\r\n   \r\n  }\r\n  addWaterMark(doc){\r\n    var newpage = doc.getNumberOfPages();\r\n    const i = doc.internal.getNumberOfPages();\r\n    doc.setTextColor(100);\r\n        doc.setFontSize(10);\r\n     //Print Page 1 of 4 for example\r\n     \r\n     doc.text('Page ' +  String(i) + ' of ' + String(newpage),210-20,297-10,null,null,\"right\")\r\n    \r\n    \r\n  \r\n    return doc;\r\n  \r\n  }\r\n}\r\n\r\n","<!--mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"\" #input autocomplete=\"password\">\r\n</mat-form-field-->\r\n<div style=\"text-align: left ;\r\nmargin-left: 10px;\r\nmargin-bottom:10px;margin-top: 10px;\"\r\n>\r\n<button mat-mini-fab  color=\"primary\" (click)=\"tableExport()\"  matTooltip=\"Excel Download\">\r\n    <mat-icon>sim_card_download</mat-icon> \r\n  </button>&nbsp;&nbsp;\r\n  <button mat-mini-fab  color=\"primary\" (click)=\"pdfExport()\"  matTooltip=\"PDF Download\">\r\n    <mat-icon>picture_as_pdf</mat-icon> \r\n  </button>\r\n    <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n</div>\r\n<div fxLayout=\"row wrap\"  class=\"page-layout simple fullwidth\"  style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\" >\r\n       \r\n        <div class=\"\">\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\"  [exampleEntity]=\"filterEntity\"\r\n            [filterType]=\"filterType\"  matSort class=\"mat-elevation-z8\">\r\n                <ng-container matColumnDef=\"code\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!codeSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Code &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('codeSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"codeSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Code\" [(ngModel)]=\"filterEntity.code\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('codeSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.code}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!nameSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Variant Name &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">search</mat-icon> </span>\r\n\t\t\t\t\t\t<mat-form-field *ngIf=\"nameSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Variant Name\" [(ngModel)]=\"filterEntity.name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"charger_type_name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!chargerTypeSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Charger Type &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('chargerTypeSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"chargerTypeSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Charger Type\" [(ngModel)]=\"filterEntity.charger_type_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('chargerTypeSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.charger_type_name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"manufacturer_name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!manfactureSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Manufacturer &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('manfactureSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field  *ngIf=\"manfactureSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Manufacturer\" [(ngModel)]=\"filterEntity.manufacturer_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('manfactureSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.manufacturer_name}} </td>\r\n                </ng-container>\r\n                \r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header >\r\n                        <span *ngIf=\"!statusSearch\"  class=\"custom_font_size\" style=\"display: flex;\">Status &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">search</mat-icon> </span> \r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\"  class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"\r\n                        [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef  >\r\n                        <span class=\"custom_font_size\">Action</span> \r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        \r\n                        <mat-icon color=\"primary\" matTooltip=\"View\"\r\n                        (click)=\"viewDialog('VIEW',element)\"\r\n                        style=\"cursor:pointer\">visibility</mat-icon>&nbsp;&nbsp;\r\n                        \r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" \r\n                        (click)=\"openDialog('EDIT',element)\" \r\n                        style=\"cursor:pointer\">edit</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon  color=\"warn\"  matTooltip=\"Remove\"  \r\n                        (click)=\"delete(element.id)\" \r\n                        style=\"cursor:pointer\">delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n                \r\n                <!-- <tr mat-header-row  *matHeaderRowDef=\"['lable_code','lable_name', 'lable_charger_type','lable_manufacturer','lable_status','lable_Active']\"></tr> -->\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n               \r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->"]}