{"version":3,"sources":["webpack:///src/app/main/asset/alarm-configuration/create/create.component.ts","webpack:///src/app/main/asset/alarm-configuration/create/create.component.html","webpack:///src/app/main/asset/alarm-configuration/alarm-configuration-crud/routes.ts","webpack:///src/app/main/asset/alarm-configuration/view-dialog/view-dialog.component.ts","webpack:///src/app/main/asset/alarm-configuration/view-dialog/view-dialog.component.html","webpack:///src/app/main/asset/alarm-configuration/alarm-configuration.module.ts","webpack:///src/app/main/asset/alarm-configuration/alarm-configuration-routing.module.ts","webpack:///src/app/main/asset/alarm-configuration/alarm-configuration-crud/alarm-configuration-crud.component.ts","webpack:///src/app/main/asset/alarm-configuration/alarm-configuration-crud/alarm-configuration-crud.component.html","webpack:///src/app/main/asset/alarm-configuration/list/list.component.ts","webpack:///src/app/main/asset/alarm-configuration/list/list.component.html","webpack:///src/app/main/asset/alarm-configuration/action-dialog/action-dialog.component.ts","webpack:///src/app/main/asset/alarm-configuration/action-dialog/action-dialog.component.html"],"names":["ELEMENT_DATA","alarm","sms","email","creativity","model","client","mobile","autocompleteObjectValidator","control","value","CreateComponent","fb","chargerTypeService","masterService","snackBar","router","clientService","displayedColumns","dataSource","status","initialize","localStorage","JSON","parse","getItem","form","group","required","pattern","getChargingModel","getClient","getActiveClientsCW","userId","subscribe","data","clients","filteredOptionsClient","controls","valueChanges","pipe","name","_filterClients","err","getChargerModelTypes","chargerModelTypes","filteredOptionsModel","chargerModelType","_filterModel","get","hasError","item","filterValue","toLowerCase","filter","option","includes","selector","templateUrl","styleUrls","ref","rfid","active","TABS_DEMO_ROUTES","path","component","redirectTo","pathMatch","ViewDialogComponent","dialogRef","chargingModelService","isEditMode","batteryBackup","rfidCardReader","communicationModeData","params","action","chargerType","manufacturer","code","description","communicationProtocol","communicationMode","cardReaderType","noOfConnectors","disabled","ONLY_NUMBERS","connectorForm","array","createConnectorFG","getChargetTypes","getManufacturers","getCommunicationProtocols","getConnectorTypes","getIOTypes","getCurrentTypes","setValue","length","assignValues","filteredOptions","connectorType","ioType","currentType","voltage","THREE_DIGIT_DECIMAL","phase","maxAmp","power","frequency","push","i","removeAt","reset","getChargerTypes","chargerTypes","toSelect","find","c","id","charger_type_id","filteredOptionsCharType","_filterCharType","manufacturers","manufacturer_id","filteredOptionsManufacturer","_filterManfacturer","charger_model_type_id","filteredOptionsCharModelType","_filterCharModelType","communicationProtocols","communication_protocol_id","filteredOptionsCommunicationProto","_filterCommunicationProtocol","connectorTypes","ioTypes","currentTypes","close","valid","formValues","connectors","forEach","connector_type_id","io_type_id","current_type_id","max_amp","created_by","battery_backup","communication_mode","card_reader_type","no_of_connectors","connector_data","modify_by","update","open","recordUpdateMessage","duration","errorMessage","create","chargerCreateMessage","temp","Array","split","assignValuesFG","connector","addConnectorFG","model_id","created_date","modify_date","removeConnectorFG","patchValue","event","checked","closeActionPanel","clkBatteryBackup","clkRfidCardReader","updateStatus","encapsulation","None","animations","COMPONENTS","COMPONENTS_DYNAMIC","AlarmConfigurationModule","imports","declarations","entryComponents","routes","children","AlarmConfigurationRoutingModule","forChild","exports","AlarmConfigurationCrudComponent","tabLinks","label","link","menuArray","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","ChargingModel","ListComponent","dialog","cdr","codeSearch","nameSearch","chargerTypeSearch","manfactureSearch","cModelTypeSearch","batteryBackupSearch","communicationSearch","communicationModeSearch","cardReaderSearch","noConnectorSearch","statusSearch","getChargingModels","filterEntity","filterType","ANYWHERE","target","trim","paginator","firstPage","getChargingModelsAll","charginModels","statusString","sort","detectChanges","confirmDialogRef","disableClose","afterClosed","result","deleteMessage","width","panelClass","autoFocus","visibleOption","ev","stopPropagation","charger_type_name","manufacturer_name","communication_protocol_name","exportedData","filteredData","chargerModel","charger_model_type_name","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","tableExport","ActionDialogComponent","getActiveChargerTypes","resp","NoRecordFoundMessage","onYesClick"],"mappings":"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","file":"alarm-configuration-alarm-configuration-module-es5.js","sourcesContent":["import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup, FormControl, FormArray,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\n//import { MasterService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { ChargerTypeService } from 'app/shared/services/charger-type/charger-type.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\nexport interface AlarmModel {\r\n  model:any;\r\n  client:any;\r\n  mobile : number;\r\n  email : any;\r\n  alarm:any;\r\n  sms: any;\r\n  creativity:any;\r\n\r\n}\r\nconst ELEMENT_DATA : AlarmModel[] =[\r\n  { alarm: 'Alarm1', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm2', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm3', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm4', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm5', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm6', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm7', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm8', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n  { alarm: 'Alarm9', sms: 1.0079, email: 'H', creativity: 'kjhhb',model:'model',client:'c1',mobile:54555},\r\n\r\n];\r\n\r\n\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss']\r\n})\r\nexport class CreateComponent implements OnInit {\r\n  \r\n  displayedColumns: string[] = ['alarm','sms', 'email','creativity'];\r\n   dataSource = new MatTableDataSource<AlarmModel>(ELEMENT_DATA);\r\n\r\n  form: FormGroup;\r\n  chargerModelTypes:any;\r\n  clients:any;\r\n  mobile:any;\r\n  email:any;\r\n  localStorage : any;\r\n  status = false;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"rfidToggleElement\") rfid: any;\r\n  @ViewChild(\"activeElement\") active:any;\r\n  filteredOptionsModel: Observable<any[]>;\r\n  filteredOptionsClient: Observable<any[]>;\r\n  \r\n  batteryBackup: boolean;\r\n  //messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder, \r\n              private chargerTypeService :ChargerTypeService, \r\n              private masterService: MasterService,\r\n              private snackBar: MatSnackBar,private router : Router,\r\n              private clientService:ClientService) {\r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    \r\n    this.form = this.fb.group({\r\n      model: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      client: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      mobile: ['', [ Validators.pattern(/[0-9]/)]],\r\n      email: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n    });\r\n    this.getChargingModel();\r\n    this.getClient();\r\n    //this.getManufacturers();\r\n    //this.getChargerModelTypes();\r\n    //this.getCommunicationProtocols(); \r\n \r\n  \r\n   \r\n  }\r\n\r\n \r\n  /*onSubmit(){\r\n    //;\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n      \r\n      let params : AlarmModel = {\r\n        model : formValues.model,\r\n        client : formValues.client ,\r\n        mobile : formValues.mobile ,\r\n        email : formValues.email ,\r\n      }\r\n  \r\n      this.chargingModelService.create(params).subscribe(\r\n        (data:any )=>{ \r\n          this.snackBar.open(MessageConstant.chargerCreateMessage, 'Dismiss', { duration: 5000 });\r\n          this.router.navigate(['/assetManagement/alarmConfiguation/crud/list']);\r\n  \r\n        },\r\n        (err)=>{\r\n          ////\r\n          this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n        }\r\n      )\r\n    }\r\n    else{\r\n      return;\r\n    }\r\n  \r\n  }*/\r\n\r\n  abc(){\r\n    \r\n    this.form;\r\n  }\r\n  getClient(){\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    this.clientService.getActiveClientsCW(this.localStorage.userId).subscribe(\r\n      (data:any)=>{\r\n        this.clients = data;\r\n        this.filteredOptionsClient = this.form.controls.client.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterClients(name) : this.clients)\r\n        );\r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n  }\r\n  getChargingModel(){\r\n    this.masterService.getChargerModelTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerModelTypes = data;\r\n        this.filteredOptionsModel = this.form.controls.chargerModelType.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterModel(name) : this.chargerModelTypes)\r\n        );\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  \r\n\r\n\r\n   displayModel(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayClient(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n\r\n  private _filterModel(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerModelTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterClients(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.clients.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n}\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\r\n\t<form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n\t\tfxFlex=\"1 0 auto\" name=\"form\" >\r\n\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Model</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"model\" autocomplete=\"off\" required\r\n\t\t\t\t\t[matAutocomplete]=\"modelAuto\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #modelAuto=\"matAutocomplete\" [displayWith]=\"displayModel\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsModel | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select model\">model_training</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('model').invalid\">Please select Model</mat-error>\r\n\t\t\t</mat-form-field>\r\n\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Client</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"client\" autocomplete=\"off\" required\r\n\t\t\t\t\t[matAutocomplete]=\"clientAuto\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #clientAuto=\"matAutocomplete\" [displayWith]=\"displayClient\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsClient | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('client').invalid\">Please select Client</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Mobile</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"mobile\" maxlength=\"10\" autocomplete=\"off\">\r\n\t\t\t\t<!-- <mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special Character are not allowed</mat-error> -->\r\n\t\t\t</mat-form-field>\r\n\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Email</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"email\" maxlength=\"50\" required autocomplete=\"off\">\r\n\t\t\t\t<mat-error *ngIf=\"form.get('email').hasError('required')\">Please enter Email</mat-error>\r\n\t\t\t\t<!-- <mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special Character are not allowed</mat-error> -->\r\n\t\t\t</mat-form-field>\r\n\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n\t\t\t<div class=\"content\" style=\"min-width: auto;\">\r\n\t\t\r\n\t\t\t\t<div class=\"mat-elevation-z8\">\r\n\t\t\t\t\t<table mat-table  [dataSource]=\"dataSource\" \r\n\t\t\t\t\t\tmatSort class=\"mat-elevation-z8\">\r\n\t\t\t\t\t\t<ng-container matColumnDef=\"alarm\">\r\n\t\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef >Alarm</th>\r\n\t\t\t\t\t\t\t<td mat-cell *matCellDef=\"let row\"> {{row.alarm}} </td>\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t<ng-container matColumnDef=\"sms\">\r\n\t\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef >SMS</th>\r\n\t\t\t\t\t\t\t<td mat-cell *matCellDef=\"let row\"><mat-checkbox  ></mat-checkbox> </td>\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t<ng-container matColumnDef=\"email\">\r\n\t\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef >Email</th>\r\n\t\t\t\t\t\t\t<td mat-cell *matCellDef=\"let row\"><mat-checkbox  ></mat-checkbox>  </td>\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t<ng-container matColumnDef=\"creativity\">\r\n\t\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef>creativity</th>\r\n\t\t\t\t\t\t\t<td mat-cell *matCellDef=\"let row\"><mat-checkbox  ></mat-checkbox></td>\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t<tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n\t\t\t\t\t\t<tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n\t\t\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\t\t\t<button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n\t\t\t<button mat-raised-button color=\"warn\" class=\"mr-8\"\r\n\t\t\t\trouterLink=\"/assetManagement/alarmConfiguation/crud/list\">Cancel</button>\r\n\t\t</div>\r\n\t</form>\r\n</div>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent},\r\n  { path : 'list', component : ListComponent},\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport {  FormControl, FormArray } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { Router } from '@angular/router';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { ChargerTypeService } from 'app/shared/services/charger-type/charger-type.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith,tap} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nexport interface ChargingModel {\r\n  id ?: number;\r\n  client_id ?: number;\r\n  charger_type_id : number;\r\n  client_name ?: string;\r\n  manufacturer_id : number ;\r\n  manufacturer_name ?: string ;\r\n  charger_model_type_id : number;\r\n  charger_model_type_name ?: string;\r\n  battery_backup : string;\r\n  code : string;\r\n  name : string;\r\n  description : string;\r\n  communication_protocol_id : number;\r\n  communication_protocol_name ?: string;\r\n  communication_mode : string;\r\n  card_reader_type : string;\r\n  no_of_connectors : number;\r\n  connector_data : ChargingModelConnectorMap[];\r\n  status : string ;\r\n  created_date ?: string ;\r\n  created_by ?: number;\r\n  modify_date ?: string ;\r\n  modify_by ?: number;\r\n}\r\n\r\nexport interface ChargingModelConnectorMap{\r\n  id : number;\r\n  model_id : number;\r\n  connector_type_id : number;\r\n  io_type_id : number;\r\n  current_type_id : number;\r\n  voltage : number;\r\n  phase : number;\r\n  max_amp : number;\r\n  power : number;\r\n  frequency : number;\r\n  status : string ;\r\n  created_date : string ;\r\n  created_by : number;\r\n  modify_date : string ;\r\n  modify_by : number;\r\n}\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-view-dialog',\r\n  templateUrl: './view-dialog.component.html',\r\n  styleUrls: ['./view-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ViewDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  \r\n  chargerTypes :any;\r\n  manufacturers:any;\r\n  chargerModelTypes:any;\r\n  communicationProtocols:any;\r\n  connectorTypes:any;\r\n  ioTypes:any;\r\n  currentTypes:any;\r\n  batteryBackup = false;\r\n  rfidCardReader = false;\r\n  status = false;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"rfidToggleElement\") rfid: any;\r\n  @ViewChild(\"activeElement\") active:any;\r\n  filteredOptionsCharType: Observable<any[]>;\r\n  filteredOptionsManufacturer: Observable<any[]>;\r\n  filteredOptionsCharModelType : Observable<any[]>;\r\n  filteredOptionsCommunicationProto: Observable<any[]>;\r\n  communicationModeData: string[] = ['LAN', 'SIM', 'WIFI'];\r\n // messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder, private chargerTypeService: ChargerTypeService, \r\n    private snackBar: MatSnackBar,public dialogRef: MatDialogRef<ViewDialogComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, \r\n    private chargingModelService : ChargingModelService, \r\n     private masterService: MasterService,\r\n    private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      chargerType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      manufacturer: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      chargerModelType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      batteryBackup: [{value:false},  [Validators.required]],\r\n      code: ['', [ Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description: ['',[Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      communicationProtocol: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      communicationMode: ['', [Validators.required]],\r\n      cardReaderType: ['', [Validators.required]],\r\n      noOfConnectors: [{value : '',disabled : true}, [Validators.required,Validators.pattern(PATTERNS.ONLY_NUMBERS)]],\r\n      connectorForm : this.fb.array([this.createConnectorFG()]) ,\r\n    });\r\n\r\n    this.getChargetTypes();\r\n    this.getManufacturers();\r\n    this.getChargerModelTypes();\r\n    this.getCommunicationProtocols();\r\n    this.getConnectorTypes();\r\n    this.getIOTypes();\r\n    this.getCurrentTypes();   \r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n   this.filteredOptions();\r\n  }\r\n\r\n  private createConnectorFG(): FormGroup {\r\n    return new FormGroup({\r\n      connectorType: new FormControl(''),\r\n      ioType: new FormControl(''),\r\n      currentType: new FormControl('',),\r\n      voltage: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      phase: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      maxAmp: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      power: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      frequency: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)])\r\n    });\r\n  }\r\n\r\n  public addConnectorFG() {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    connectorForm.push(this.createConnectorFG());\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  public removeConnectorFG(i: number) {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    if (connectorForm.length > 1) {\r\n      connectorForm.removeAt(i)\r\n    } else {\r\n      connectorForm.reset()\r\n    }\r\n\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  getChargetTypes(){\r\n    this.chargerTypeService.getChargerTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerTypes = data;\r\n        \r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerTypes.find(c => c.id == this.params.data.charger_type_id);\r\n          this.form.get('chargerType').setValue(toSelect);\r\n         this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n            //tap(() => this.form.controls.chargerType.setValue(toSelect)),\r\n           //tap(() => this.form.get('chargerType').setValue({name:toSelect.name, id:toSelect.id})),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n         \r\n         );\r\n        }\r\n        \r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getManufacturers(){\r\n    this.masterService.getManufacturers().subscribe(\r\n      (data:any)=>{\r\n        this.manufacturers = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n          this.form.get('manufacturer').setValue(toSelect);\r\n          this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n           // tap(() => this.form.controls.manufacturer.setValue(toSelect)),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n          );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getChargerModelTypes(){\r\n    this.masterService.getChargerModelTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerModelTypes = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerModelTypes.find(c => c.id == this.params.data.charger_model_type_id);\r\n         this.form.get('chargerModelType').setValue(toSelect);\r\n         this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n           //tap(() => this.form.controls.chargerModelType.setValue(toSelect)),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n         );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCommunicationProtocols(){\r\n    this.masterService.getCommunicationProtocols().subscribe(\r\n      (data:any)=>{\r\n        this.communicationProtocols = data;\r\n        if(this.isEditMode){\r\n          \r\n          const toSelect = this.communicationProtocols.find(c => c.id == this.params.data.communication_protocol_id);\r\n          this.form.get('communicationProtocol').setValue(toSelect);\r\n          this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          //tap(() => this.form.controls.communicationProtocol.setValue(toSelect)),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n        );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getConnectorTypes(){\r\n    this.masterService.getConnectorTypes().subscribe(\r\n      (data:any)=>{\r\n        \r\n        this.connectorTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getIOTypes(){\r\n    this.masterService.getIOTypes().subscribe(\r\n      (data:any)=>{\r\n        this.ioTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCurrentTypes(){\r\n    this.masterService.getCurrentTypes().subscribe(\r\n      (data:any)=>{\r\n        this.currentTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n  onYesClick(){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n    \r\n\r\n      let connectors=[] ;\r\n  \r\n      formValues.connectorForm.forEach(item => {\r\n        connectors.push({\r\n          connector_type_id : item.connectorType ,\r\n          io_type_id : item.ioType,\r\n          current_type_id : item.currentType,\r\n          voltage : item.voltage ,\r\n          phase : item.phase,\r\n          max_amp : item.maxAmp,\r\n          power : item.power,\r\n          frequency : item.frequency,\r\n          status : 'Y',\r\n          created_by : this.localStorage.userId \r\n        })\r\n      });\r\n  \r\n      \r\n      let params : ChargingModel = {\r\n        charger_type_id : formValues.chargerType.id,\r\n        manufacturer_id : formValues.manufacturer.id ,\r\n        charger_model_type_id : formValues.chargerModelType.id ,\r\n        battery_backup  : this.batteryBackup == true ? 'Y' : 'N',\r\n        code : formValues.code ,\r\n        name : formValues.name ,\r\n        description : formValues.description ,\r\n        communication_protocol_id : formValues.communicationProtocol.id ,\r\n        communication_mode : formValues.communicationMode ,\r\n        card_reader_type : formValues.cardReaderType ,\r\n        no_of_connectors : formValues.connectorForm.length ,\r\n        connector_data : connectors,\r\n        status : this.status == true ? 'Y' : 'N',\r\n        created_by : this.localStorage.userId \r\n      }\r\n  \r\n  \r\n      if (this.isEditMode){\r\n        params.id = this.params.data.id,\r\n        params.modify_by = this.localStorage.userId;\r\n      } else{\r\n        params.created_by = this.localStorage.userId;\r\n      }\r\n  \r\n      \r\n  \r\n      if (this.isEditMode){\r\n        this.chargingModelService.update(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      }else{\r\n        this.chargingModelService.create(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.chargerCreateMessage, 'Dismiss', { duration: 5000 });\r\n            // this.router.navigate(['/chargingModel/crud/list']);\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n    \r\n      }\r\n    \r\n        this.dialogRef.close(params);\r\n    }\r\n   \r\n    return;\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('code').setValue(params.data.code);\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    var temp = new Array();\r\n    temp = this.params.data.communication_mode.split(\",\");\r\n\r\n    this.form.get('communicationMode').setValue(temp);\r\n    this.form.get('cardReaderType').setValue(params.data.card_reader_type);\r\n    this.form.get('noOfConnectors').setValue(params.data.no_of_connectors);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n    this.batteryBackup = params.data.battery_backup == 'Y' ? true : false;\r\n\r\n    this.assignValuesFG(params.data.connector_data);\r\n  }\r\n\r\n  assignValuesFG(data){\r\n\r\n    let connector_data = [];\r\n\r\n    data.forEach(connector => {\r\n      this.addConnectorFG();\r\n      connector_data.push({ id : connector.id ,\r\n        model_id : connector.model_id ,\r\n        connectorType : connector.connector_type_id ,\r\n        ioType : connector.io_type_id ,\r\n        currentType : connector.current_type_id ,\r\n        voltage : connector.voltage ,\r\n        phase : connector.phase ,\r\n        maxAmp : connector.max_amp ,\r\n        power : connector.power ,\r\n        frequency : connector.frequency ,\r\n        status : connector.status ,\r\n        created_date : connector.created_date ,\r\n        created_by : connector.created_by ,\r\n        modify_date : connector.modify_date ,\r\n        modify_by : connector.modify_by })\r\n    });\r\n    \r\n   this.removeConnectorFG(data.length);\r\n\r\n   const connectorForm = this.form.get('connectorForm') as FormArray;\r\n\r\n   connectorForm.patchValue(connector_data);\r\n\r\n\r\n  }\r\n\r\n  clkBatteryBackup(event){\r\n    this.batteryBackup = event.checked;\r\n    this.ref.checked = this.batteryBackup;\r\n  }\r\n  clkRfidCardReader(event){\r\n    this.rfidCardReader = event.checked;\r\n    this.rfid.checked = this.rfidCardReader;\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.active.checked = this.status;\r\n  }\r\n  \r\n  filteredOptions(){\r\n    this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n    );\r\n    this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n     \r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n    );\r\n    this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n    );\r\n    this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n      );\r\n  }\r\n  displayCharType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayManfacturer(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCharModelType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCommunicationProto(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }  \r\n  private _filterCharType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterManfacturer(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.manufacturers.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharModelType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerModelTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCommunicationProtocol(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.communicationProtocols.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n\r\n<mat-toolbar class=\"action_toolbar\">Variants</mat-toolbar>\r\n\t<div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n<div id=\"forms\" class=\"page-layout simple fullwidth mat-dialog\" fxLayout=\"column\" >\r\n  <form [formGroup]=\"form\" class=\"\" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n     fxFlex=\"1 0 auto\" name=\"form\" >\r\n     <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Charger Model</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"chargerType\" autocomplete=\"off\" required  [matAutocomplete]=\"chargerTypeAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #chargerTypeAuto=\"matAutocomplete\"  [displayWith]=\"displayCharType\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('chargerType').invalid\">Please select charger model</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Manufacturer</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput  readonly formControlName=\"manufacturer\"  autocomplete=\"off\" required [matAutocomplete]=\"manufacturerAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #manufacturerAuto=\"matAutocomplete\"  [displayWith]=\"displayManfacturer\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsManufacturer | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('manufacturer').invalid\">Please select manufacturer</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Charger Model Type</mat-label>\r\n\t\t\t\t<input type=\"text\" readonly  matInput formControlName=\"chargerModelType\" autocomplete=\"off\"  required  [matAutocomplete]=\"chargerModelTypeAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #chargerModelTypeAuto=\"matAutocomplete\"  [displayWith]=\"displayCharModelType\">\r\n\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharModelType | async\" [value]=\"option\">\r\n\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('chargerModelType').invalid\">Please select charger model type</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Code</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"code\" maxlength=\"20\"\r\n\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special Character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Name</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"name\" maxlength=\"50\"\r\n\t\t\t\t\trequired autocomplete=\"off\">\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\">Please enter name</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special Character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\"  readonly formControlName=\"description\" maxlength=\"200\"\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special Character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Communication Protocol</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput readonly formControlName=\"communicationProtocol\"  required autocomplete=\"off\"  [matAutocomplete]=\"communicationProtocolAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #communicationProtocolAuto=\"matAutocomplete\"  [displayWith]=\"displayCommunicationProto\">\r\n\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCommunicationProto | async\" [value]=\"option\">\r\n\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('communicationProtocol').invalid\">Please select communication protocol</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Communication Mode</mat-label>\r\n\t\t\t\t<mat-select formControlName=\"communicationMode\" disabled  multiple>\r\n\t\t\t\t\t<mat-option *ngFor=\"let communication of communicationModeData\" [value]=\"communication\">{{communication}}</mat-option>\r\n\t\t\t\t</mat-select>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('communicationMode').invalid\">Please enter communication mode</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Card Reader Type</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" readonly formControlName=\"cardReaderType\"\r\n\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t<mat-error *ngIf=\"form.get('cardReaderType').invalid\">Please enter card reader type\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>No. Of Connectors</mat-label>\r\n\t\t\t\t<input matInput numbersOnly readonly placeholder=\"\" formControlName=\"noOfConnectors\"\r\n\t\t\t\t\trequired  autocomplete=\"off\" >\r\n\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.required\">Please enter no. of connectors\r\n\t\t\t\t</mat-error>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.pattern\">Only numbers are allowed\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<div  fxFlex=\"15\" class=\"pr-4\">\r\n\t\t\t\t<mat-label class=\"sm-txt mr-20\">Battery Backup</mat-label>\r\n\t\t\t\t<mat-slide-toggle disabled class=\"example-margin sm-txt mt-10\" color=\"primary\" \r\n\t\t\t\t[checked]=\"batteryBackup\" (change)=\"clkBatteryBackup($event)\" #toggleElement>\r\n\t\t\t\t{{batteryBackup ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t</div>\r\n\t\t\t<div fxFlex=\"17\" class=\"pr-4\">\r\n        \t\t<mat-label class=\"sm-txt mr-20\">RFID card reader</mat-label>\r\n        \t\t\t<mat-slide-toggle disabled class=\"example-margin sm-txt mt-10\" color=\"primary\" \r\n         \t\t\t [checked]=\"rfidCardReader\" (change)=\"clkRfidCardReader($event)\" #rfidToggleElement>\r\n          \t\t\t\t{{rfidCardReader ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t</div>\r\n      <div fxFlex=\"18\" class=\"pr-4\">\r\n\t\t\t\t<mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n        <mat-slide-toggle disabled class=\"example-margin\" color=\"primary\"\r\n        [checked]=\"status\" (change)=\"updateStatus($event)\" #activeElement>\r\n          {{status ? 'Active' : 'Inactive'}}</mat-slide-toggle>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<mat-card style=\"box-shadow: none!important;\">\r\n      <div formArrayName=\"connectorForm\">\r\n\t\t\t\t<div   fxLayout=\"column\" *ngFor=\"let cf of form.get('connectorForm')['controls']; let i = index\" [formGroupName]=\"i\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\tConnector {{i+1}}\r\n\t\t\t\t\t</div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select disabled  formControlName=\"connectorType\" >\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of connectorTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>I/O Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select disabled formControlName=\"ioType\" >\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of ioTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Current Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select  disabled formControlName=\"currentType\" >\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of currentTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n              </mat-form-field >\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Voltage(V)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput readonly formControlName=\"voltage\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('voltage').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n            <mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n              <mat-label>Phase</mat-label>\r\n                    <input matInput readonly placeholder=\"\" formControlName=\"phase\"\r\n                       autocomplete=\"off\">\r\n                    <mat-error *ngIf=\"cf.get('phase').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n              </mat-form-field>\r\n\t\t\t\t\t</div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t<mat-label>Max. Amp.(A)</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input  readonly matInput placeholder=\"\" formControlName=\"maxAmp\"\r\n\t\t\t\t\t\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('maxAmp').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t  \t<mat-label>Power(KW)</mat-label>\r\n\t\t\t\t\t\t  <input matInput readonly placeholder=\"\" formControlName=\"power\"\t autocomplete=\"off\">\r\n\t\t\t\t\t  \t<mat-error *ngIf=\"cf.get('power').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t  <mat-label>Frequency(Hz)</mat-label>\r\n\t\t\t\t\t    \t<input readonly\r\n\t\t\t\t\t\t\t matInput placeholder=\"\" formControlName=\"frequency\"  autocomplete=\"off\">\r\n\t\t\t\t\t\t    <mat-error *ngIf=\"cf.get('frequency').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n            <!-- <div class=\"add-row\">\r\n              <mat-label class=\"sm-txt\">Add Row</mat-label>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"primary\" aria-label=\"Add\"\r\n                (click)=\"addConnectorFG()\" matTooltip=\"Add\">\r\n              <mat-icon>add_circle</mat-icon>\r\n              </button>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"warn\" aria-label=\"Remove/clear\"\r\n                (click)=\"removeConnectorFG(i)\" matTooltip=\"Remove\">\r\n              <mat-icon>delete</mat-icon>\r\n              </button>\r\n            </div> -->\r\n\t\t</div>\r\n\t\t\t\t\r\n        </div>\r\n      </div>\r\n\t\t</mat-card>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n      <!-- button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\"\r\n      (click)=\"onYesClick()\">{{isEditMode ? 'Save' : 'Save'}}</button> -->\r\n      <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\"\r\n      (click)=\"close()\" >Cancel</button>\t\r\n    </div>\r\n       \r\n\r\n     </form>\r\n</div>\r\n</div>","import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { AlarmConfigurationRoutingModule } from './alarm-configuration-routing.module';\r\nimport { AlarmConfigurationCrudComponent } from './alarm-configuration-crud/alarm-configuration-crud.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nconst COMPONENTS =[ AlarmConfigurationCrudComponent, CreateComponent, ListComponent];\r\nconst COMPONENTS_DYNAMIC =[ViewDialogComponent,ActionDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, AlarmConfigurationRoutingModule,FuseSharedModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class AlarmConfigurationModule{}","import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AlarmConfigurationCrudComponent } from './alarm-configuration-crud//alarm-configuration-crud.component';\r\nimport { TABS_DEMO_ROUTES } from './alarm-configuration-crud/routes';\r\n\r\nconst routes : Routes = [\r\n    {\r\n        path : 'crud',component : AlarmConfigurationCrudComponent, children : TABS_DEMO_ROUTES\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class AlarmConfigurationRoutingModule{}","import {Component,OnInit,ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-alarm-configuration-crud',\r\n  templateUrl: './alarm-configuration-crud.component.html',\r\n  styleUrls: ['./alarm-configuration-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class AlarmConfigurationCrudComponent implements OnInit {\r\n   // Nav bar demo\r\n   tabLinks = [\r\n    { label: 'Alarm Configuration', link: 'list' },\r\n    { label: 'Add New', link: 'create' }\r\n  ];\r\n\r\n  menuArray:any;\r\n  ngOnInit(){\r\n    this.menuArray  = JSON.parse( localStorage.getItem('activeMenuItems'));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent {}\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent {}\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent {}\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","\r\nimport {Component, OnInit, ViewChild,ChangeDetectorRef} from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog,MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport {FuseConfirmDialogComponent} from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport{ViewDialogComponent} from'../view-dialog/view-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nexport class ChargingModel {\r\n  id : number;\r\n  client_id : number;\r\n  client_name : string;\r\n  manufacturer_id : number ;\r\n  manufacturer_name : string ;\r\n  charger_model_type_id : number;\r\n  charger_model_type_name : string;\r\n  battery_backup : string;\r\n  code : string;\r\n  name : string;\r\n  charger_type_name:string;\r\n  description : string;\r\n  communication_protocol_id : number;\r\n  communication_protocol_name : string;\r\n  communication_mode : string;\r\n  card_reader_type : string;\r\n  no_of_connectors : number;\r\n  status : string ;\r\n  created_date : string ;\r\n  created_by : number;\r\n  modify_date : string ;\r\n  modify_by : number;\r\n  connector_data : string;\r\n  statusString:string;\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ListComponent implements OnInit {\r\n  filterEntity: ChargingModel;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['code','name', 'charger_type_name','manufacturer_name','status','action'];\r\n\r\n  dataSource: MatTableDataSource<ChargingModel>;\r\n\r\n  charginModels : ChargingModel[];\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  dialogRef: any;\r\n  codeSearch = false;\r\n  nameSearch = false;\r\n  chargerTypeSearch = false;\r\n  manfactureSearch = false;\r\n  cModelTypeSearch = false;\r\n  batteryBackupSearch = false;\r\n  communicationSearch = false;\r\n  communicationModeSearch = false;\r\n  cardReaderSearch = false;\r\n  noConnectorSearch = false;\r\n  statusSearch = false;\r\n  exportedData: any[];\r\n  //messageConstant = MessageConstant;\r\n  constructor(private chargingModelService : ChargingModelService ,public dialog : MatDialog,\r\n    private snackBar : MatSnackBar,private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    \r\n    \r\n    this.getChargingModels();\r\n    this.filterEntity = new ChargingModel();\r\n           this.filterType = MatTableFilter.ANYWHERE;\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getChargingModels(){\r\n    this.chargingModelService.getChargingModelsAll().subscribe(\r\n      (data:any)=>{\r\n        //;\r\n        if(data != null){\r\n          this.charginModels = data;\r\n          \r\n          for(var i=0; i < this.charginModels.length;i++){\r\n            if(this.charginModels[i].status == 'N'){\r\n              this.charginModels[i].statusString = 'Inactive';\r\n            }else{\r\n              this.charginModels[i].statusString = 'Active';\r\n            }\r\n            \r\n           \r\n          }\r\n          this.dataSource = new MatTableDataSource(this.charginModels);\r\n  \r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n          this.cdr.detectChanges();\r\n        }else{\r\n          return;\r\n        }\r\n       \r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id){\r\n    this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n      disableClose: true\r\n  });\r\n\r\n  //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n\r\n  this.confirmDialogRef.afterClosed().subscribe(result => {\r\n      if ( result )\r\n      {\r\n          this.chargingModelService.delete(id).subscribe(\r\n      (data:any)=>{\r\n        ;\r\n        this.getChargingModels();\r\n        this.snackBar.open(MessageConstant.deleteMessage,'Dismiss',{duration:2000});\r\n        this.cdr.detectChanges();\r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n      }\r\n      this.confirmDialogRef = null;\r\n  });\r\n   \r\n  }\r\n\r\n  viewDialog(action,data) : void{\r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n      width: '1400px',\r\n      data: params,\r\n      panelClass: 'app-action-dialog',\r\n      autoFocus: false,\r\n      disableClose: true    \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getChargingModels();\r\n    });\r\n  }\r\n  openDialog(action,data): void {\r\n    // this.snackBar.open('Unable to proceed, In prgress','Dismiss');\r\n    // return false;\r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '1400px',\r\n      data: params,\r\n      autoFocus: false,\r\n      disableClose: true,\r\n      panelClass: 'app-action-dialog',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.getChargingModels();\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  changeVisibility(visibleOption,ev){\r\n    // visibleOption = !visibleOption;\r\n    //nameSearch = false;\r\n      //descSearch = false;\r\n      ev.stopPropagation();\r\n      if(visibleOption == 'codeSearch'){\r\n        this.codeSearch = !this.codeSearch;\r\n        this.filterEntity.code = \"\";\r\n      }\r\n    if(visibleOption == 'nameSearch'){\r\n      this.nameSearch = !this.nameSearch;\r\n      this.filterEntity.name = \"\";\r\n    }\r\n    if(visibleOption == 'chargerTypeSearch'){\r\n      this.chargerTypeSearch = !this.chargerTypeSearch;\r\n      this.filterEntity.charger_type_name = \"\";\r\n    }\r\n    if(visibleOption == 'manfactureSearch'){\r\n      this.manfactureSearch = !this.manfactureSearch;\r\n      this.filterEntity.manufacturer_name = \"\";\r\n    }\r\n    if(visibleOption == 'cModelTypeSearch'){\r\n      this.cModelTypeSearch = !this.cModelTypeSearch;\r\n      this.filterEntity.charger_type_name = \"\";\r\n    }\r\n    if(visibleOption == 'batteryBackupSearch'){\r\n      this.batteryBackupSearch = !this.batteryBackupSearch;\r\n      this.filterEntity.battery_backup = \"\";\r\n    }\r\n    if(visibleOption == 'communicationSearch'){\r\n      this.communicationSearch = !this.communicationSearch;\r\n      this.filterEntity.communication_protocol_name = \"\";\r\n    }\r\n    if(visibleOption == 'communicationModeSearch'){\r\n      this.communicationModeSearch = !this.communicationModeSearch;\r\n      this.filterEntity.communication_mode = \"\";\r\n    }\r\n    if(visibleOption == 'cardReaderSearch'){\r\n      this.cardReaderSearch = !this.cardReaderSearch;\r\n      this.filterEntity.card_reader_type = \"\";\r\n    }\r\n    if(visibleOption == 'noConnectorSearch'){\r\n      this.noConnectorSearch = !this.noConnectorSearch;\r\n      this.filterEntity.no_of_connectors= null;\r\n    } \r\n    if(visibleOption == 'statusSearch'){\r\n      this.statusSearch = !this.statusSearch;\r\n      this.filterEntity.statusString = \"\";\r\n    }\r\n   }\r\n   tableExport()\r\n   {\r\n     // const tab = document.getElementById('mapTable');\r\n     // const ws: XLSX.WorkSheet=XLSX.utils.table_to_sheet(tab);//converts a DOM TABLE element to a worksheet\r\n     // const wb: XLSX.WorkBook = XLSX.utils.book_new();\r\n     // XLSX.utils.book_append_sheet(wb, ws, 'Mapped Charger');\r\n   \r\n     // /* save to file */\r\n     // XLSX.writeFile(wb, 'Mapped Charger.xlsx');\r\n     //this.preloader.open();\r\n     this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n       var chargerModel = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = {'Code':chargerModel.code,'Name':chargerModel.name,'Charger Type':chargerModel.charger_type_name,\r\n                  'Manufacturer': chargerModel.manufacturer_name,'Charger Model Type ':chargerModel.charger_model_type_name,\r\n                  'Battery Backup':chargerModel.battery_backup,'Communication Protocol':chargerModel.communication_protocol_name,\r\n                  'Communication Mode':chargerModel.communication_mode,'Card Reader Type':chargerModel.card_reader_type,\r\n                  'No Of Connectors':chargerModel.no_of_connectors,'Status':chargerModel.statusString};\r\n      this.exportedData.push(data);\r\n    }\r\n\r\n\r\n     const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n       const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n       XLSX.utils.book_append_sheet(workBook, workSheet, 'SheetName');\r\n       XLSX.writeFile(workBook, 'Varients.xlsx');\r\n     //XLSX.writeFileAsync('OCPP Logs.xlsx',workBook, this.cb)\r\n      //this.preloader.close();\r\n     \r\n   \r\n   }\r\n}\r\n\r\n","<!--mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"\" #input autocomplete=\"password\">\r\n</mat-form-field-->\r\n<div style=\"text-align: left ;\r\nmargin-left: 10px;\r\nmargin-bottom:10px;margin-top: 10px;\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"tableExport()\">\r\n        <mat-icon>downloading</mat-icon> &nbsp;&nbsp;Export Excel\r\n    </button>\r\n    <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n</div>\r\n<div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\">\r\n\r\n        <div class=\"\">\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\" [exampleEntity]=\"filterEntity\"\r\n                [filterType]=\"filterType\" matSort class=\"mat-elevation-z8\">\r\n                <ng-container matColumnDef=\"code\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!codeSearch\" class=\"custom_font_size\" style=\"display: flex;\">Code &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('codeSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"codeSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Code\" [(ngModel)]=\"filterEntity.code\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('codeSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.code}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!nameSearch\" class=\"custom_font_size\" style=\"display: flex;\">Name &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">search</mat-icon>\r\n                        </span>\r\n                        <mat-form-field *ngIf=\"nameSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('nameSearch',$event)\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"charger_type_name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!chargerTypeSearch\" class=\"custom_font_size\" style=\"display: flex;\">Charger Type\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('chargerTypeSearch',$event)\">\r\n                                search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"chargerTypeSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Charger Type\" [(ngModel)]=\"filterEntity.charger_type_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('chargerTypeSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.charger_type_name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"manufacturer_name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!manfactureSearch\" class=\"custom_font_size\" style=\"display: flex;\">Manufacturer\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('manfactureSearch',$event)\">\r\n                                search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"manfactureSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Manufacturer\" [(ngModel)]=\"filterEntity.manufacturer_name\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('manfactureSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.manufacturer_name}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!statusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Status\r\n                            &nbsp;&nbsp; <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">search\r\n                            </mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch',$event)\">highlight_off\r\n                            </mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <span class=\"custom_font_size\">Action</span>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n\r\n                        <mat-icon color=\"primary\" matTooltip=\"View\" (click)=\"viewDialog('VIEW',element)\"\r\n                            style=\"cursor:pointer\">visibility</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" (click)=\"openDialog('EDIT',element)\"\r\n                            style=\"cursor:pointer\">edit</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"delete(element.id)\" style=\"cursor:pointer\">\r\n                            delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n\r\n                <!-- <tr mat-header-row  *matHeaderRowDef=\"['lable_code','lable_name', 'lable_charger_type','lable_manufacturer','lable_status','lable_Active']\"></tr> -->\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n\r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[ 10, 30,50, 100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, ValidatorFn,AbstractControl} from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport {  FormControl, FormArray } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { Router } from '@angular/router';\r\nimport { ChargingModelService } from 'app/shared/services/charging-model/charging-model.service';\r\nimport { PATTERNS } from 'app/shared/utils/validation-patterns';\r\nimport { ChargerTypeService } from 'app/shared/services/charger-type/charger-type.service';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith,tap} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nexport interface ChargingModel {\r\n  id ?: number;\r\n  client_id ?: number;\r\n  charger_type_id : number;\r\n  client_name ?: string;\r\n  manufacturer_id : number ;\r\n  manufacturer_name ?: string ;\r\n  charger_model_type_id : number;\r\n  charger_model_type_name ?: string;\r\n  battery_backup : string;\r\n  code : string;\r\n  name : string;\r\n  description : string;\r\n  communication_protocol_id : number;\r\n  communication_protocol_name ?: string;\r\n  communication_mode : string;\r\n  card_reader_type : string;\r\n  no_of_connectors : number;\r\n  connector_data : ChargingModelConnectorMap[];\r\n  status : string ;\r\n  created_date ?: string ;\r\n  created_by ?: number;\r\n  modify_date ?: string ;\r\n  modify_by ?: number;\r\n}\r\n\r\nexport interface ChargingModelConnectorMap{\r\n  id : number;\r\n  model_id : number;\r\n  connector_type_id : number;\r\n  io_type_id : number;\r\n  current_type_id : number;\r\n  voltage : number;\r\n  phase : number;\r\n  max_amp : number;\r\n  power : number;\r\n  frequency : number;\r\n  status : string ;\r\n  created_date : string ;\r\n  created_by : number;\r\n  modify_date : string ;\r\n  modify_by : number;\r\n}\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n@Component({\r\n  selector: 'app-action-dialog',\r\n  templateUrl: './action-dialog.component.html',\r\n  styleUrls: ['./action-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n})\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  \r\n  chargerTypes :any;\r\n  manufacturers:any;\r\n  chargerModelTypes:any;\r\n  communicationProtocols:any;\r\n  connectorTypes:any;\r\n  ioTypes:any;\r\n  currentTypes:any;\r\n  batteryBackup = false;\r\n  rfidCardReader = false;\r\n  status = false;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"rfidToggleElement\") rfid: any;\r\n  @ViewChild(\"activeElement\") active:any;\r\n  filteredOptionsCharType: Observable<any[]>;\r\n  filteredOptionsManufacturer: Observable<any[]>;\r\n  filteredOptionsCharModelType : Observable<any[]>;\r\n  filteredOptionsCommunicationProto: Observable<any[]>;\r\n  communicationModeData: string[] = ['LAN', 'SIM', 'WIFI'];\r\n // messageConstant = MessageConstant;\r\n  constructor(private fb: FormBuilder, private chargerTypeService: ChargerTypeService, \r\n    private snackBar: MatSnackBar,public dialogRef: MatDialogRef<ActionDialogComponent>, \r\n    @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, \r\n    private chargingModelService : ChargingModelService, \r\n     private masterService: MasterService,\r\n    private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n      chargerType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      manufacturer: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      chargerModelType: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      batteryBackup: [{value:false},  [Validators.required]],\r\n      code: ['', [ Validators.pattern(/^[a-zA-Z0-9]*$/)]],\r\n      name: ['', [Validators.required, Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      description: ['',[Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n      communicationProtocol: ['', [autocompleteObjectValidator(),Validators.required]],\r\n      communicationMode: ['', [Validators.required]],\r\n      cardReaderType: [''],\r\n      noOfConnectors: [{value : '',disabled : true}, [Validators.required,Validators.pattern(PATTERNS.ONLY_NUMBERS)]],\r\n      connectorForm : this.fb.array([this.createConnectorFG()]) ,\r\n    });\r\n\r\n    this.getChargetTypes();\r\n    this.getManufacturers();\r\n    this.getChargerModelTypes();\r\n    this.getCommunicationProtocols();\r\n    this.getConnectorTypes();\r\n    this.getIOTypes();\r\n    this.getCurrentTypes();   \r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n   this.filteredOptions();\r\n  }\r\n\r\n  private createConnectorFG(): FormGroup {\r\n    return new FormGroup({\r\n      connectorType: new FormControl(''),\r\n      ioType: new FormControl(''),\r\n      currentType: new FormControl('',),\r\n      voltage: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      phase: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      maxAmp: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      power: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)]),\r\n      frequency: new FormControl('', [Validators.pattern(PATTERNS.THREE_DIGIT_DECIMAL)])\r\n    });\r\n  }\r\n\r\n  public addConnectorFG() {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    connectorForm.push(this.createConnectorFG());\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  public removeConnectorFG(i: number) {\r\n    const connectorForm = this.form.get('connectorForm') as FormArray\r\n    if (connectorForm.length > 1) {\r\n      connectorForm.removeAt(i)\r\n    } else {\r\n      connectorForm.reset()\r\n    }\r\n\r\n    this.form.get('noOfConnectors').setValue(this.form.value.connectorForm.length);\r\n\r\n  }\r\n\r\n  getChargetTypes(){\r\n    this.chargerTypeService.getActiveChargerTypes().subscribe(\r\n      (resp:any)=>{\r\n        if(resp.status == true){\r\n          if(resp.data.length > 0){\r\n            this.chargerTypes = resp.data;\r\n        \r\n            if(this.isEditMode){\r\n              const toSelect = this.chargerTypes.find(c => c.id == this.params.data.charger_type_id);\r\n              this.form.get('chargerType').setValue(toSelect);\r\n             this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n             .pipe(\r\n               startWith(''),\r\n                //tap(() => this.form.controls.chargerType.setValue(toSelect)),\r\n               //tap(() => this.form.get('chargerType').setValue({name:toSelect.name, id:toSelect.id})),\r\n               map(value => typeof value === 'string' ? value : value.name),\r\n               map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n             \r\n             );\r\n            }\r\n          }else{\r\n            this.snackBar.open(MessageConstant.NoRecordFoundMessage,'Dismiss',{duration:2000});\r\n          }\r\n        }\r\n        \r\n        \r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getManufacturers(){\r\n    this.masterService.getManufacturers().subscribe(\r\n      (data:any)=>{\r\n        this.manufacturers = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n          this.form.get('manufacturer').setValue(toSelect);\r\n          this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n           // tap(() => this.form.controls.manufacturer.setValue(toSelect)),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n          );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getChargerModelTypes(){\r\n    this.masterService.getChargerModelTypes().subscribe(\r\n      (data:any)=>{\r\n        this.chargerModelTypes = data;\r\n        if(this.isEditMode){\r\n          const toSelect = this.chargerModelTypes.find(c => c.id == this.params.data.charger_model_type_id);\r\n         this.form.get('chargerModelType').setValue(toSelect);\r\n         this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n           //tap(() => this.form.controls.chargerModelType.setValue(toSelect)),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n         );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCommunicationProtocols(){\r\n    this.masterService.getCommunicationProtocols().subscribe(\r\n      (data:any)=>{\r\n        this.communicationProtocols = data;\r\n        if(this.isEditMode){\r\n          \r\n          const toSelect = this.communicationProtocols.find(c => c.id == this.params.data.communication_protocol_id);\r\n          this.form.get('communicationProtocol').setValue(toSelect);\r\n          this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          //tap(() => this.form.controls.communicationProtocol.setValue(toSelect)),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n        );\r\n        }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  getConnectorTypes(){\r\n    this.masterService.getConnectorTypes().subscribe(\r\n      (data:any)=>{\r\n        \r\n        this.connectorTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getIOTypes(){\r\n    this.masterService.getIOTypes().subscribe(\r\n      (data:any)=>{\r\n        this.ioTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getCurrentTypes(){\r\n    this.masterService.getCurrentTypes().subscribe(\r\n      (data:any)=>{\r\n        this.currentTypes = data;\r\n        // if(this.isEditMode){\r\n        //   \r\n        //   const toSelect = this.manufacturers.find(c => c.id == this.params.data.manufacturer_id);\r\n        //   this.form.get('manufacturer').setValue(toSelect.id);\r\n        // }\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n  onYesClick(){\r\n    if(this.form.valid){\r\n      let formValues = this.form.value;\r\n    \r\n\r\n      let connectors=[] ;\r\n  \r\n      formValues.connectorForm.forEach(item => {\r\n        connectors.push({\r\n          connector_type_id : item.connectorType ,\r\n          io_type_id : item.ioType,\r\n          current_type_id : item.currentType,\r\n          voltage : item.voltage ,\r\n          phase : item.phase,\r\n          max_amp : item.maxAmp,\r\n          power : item.power,\r\n          frequency : item.frequency,\r\n          status : 'Y',\r\n          created_by : this.localStorage.userId \r\n        })\r\n      });\r\n  \r\n      \r\n      let params : ChargingModel = {\r\n        charger_type_id : formValues.chargerType.id,\r\n        manufacturer_id : formValues.manufacturer.id ,\r\n        charger_model_type_id : formValues.chargerModelType.id ,\r\n        battery_backup  : this.batteryBackup == true ? 'Y' : 'N',\r\n        code : formValues.code ,\r\n        name : formValues.name ,\r\n        description : formValues.description ,\r\n        communication_protocol_id : formValues.communicationProtocol.id ,\r\n        communication_mode : formValues.communicationMode ,\r\n        card_reader_type : formValues.cardReaderType ,\r\n        no_of_connectors : formValues.connectorForm.length ,\r\n        connector_data : connectors,\r\n        status : this.status == true ? 'Y' : 'N',\r\n        created_by : this.localStorage.userId \r\n      }\r\n  \r\n  \r\n      if (this.isEditMode){\r\n        params.id = this.params.data.id,\r\n        params.modify_by = this.localStorage.userId;\r\n      } else{\r\n        params.created_by = this.localStorage.userId;\r\n      }\r\n  \r\n      \r\n  \r\n      if (this.isEditMode){\r\n        this.chargingModelService.update(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.recordUpdateMessage, 'Dismiss', { duration: 5000 });\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      }else{\r\n        this.chargingModelService.create(params).subscribe(\r\n          (data: any ) => {\r\n            \r\n            this.snackBar.open(MessageConstant.chargerCreateMessage, 'Dismiss', { duration: 5000 });\r\n            // this.router.navigate(['/chargingModel/crud/list']);\r\n            this.dialogRef.close();\r\n          },\r\n          (err) => {\r\n            \r\n            this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n    \r\n      }\r\n    \r\n        this.dialogRef.close(params);\r\n    }\r\n   \r\n    return;\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n\r\n    this.form.get('code').setValue(params.data.code);\r\n    this.form.get('name').setValue(params.data.name);\r\n    this.form.get('description').setValue(params.data.description);\r\n    var temp = new Array();\r\n    temp = this.params.data.communication_mode.split(\",\");\r\n\r\n    this.form.get('communicationMode').setValue(temp);\r\n    this.form.get('cardReaderType').setValue(params.data.card_reader_type);\r\n    this.form.get('noOfConnectors').setValue(params.data.no_of_connectors);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n    this.batteryBackup = params.data.battery_backup == 'Y' ? true : false;\r\n\r\n    this.assignValuesFG(params.data.connector_data);\r\n  }\r\n\r\n  assignValuesFG(data){\r\n\r\n    let connector_data = [];\r\n\r\n    data.forEach(connector => {\r\n      this.addConnectorFG();\r\n      connector_data.push({ id : connector.id ,\r\n        model_id : connector.model_id ,\r\n        connectorType : connector.connector_type_id ,\r\n        ioType : connector.io_type_id ,\r\n        currentType : connector.current_type_id ,\r\n        voltage : connector.voltage ,\r\n        phase : connector.phase ,\r\n        maxAmp : connector.max_amp ,\r\n        power : connector.power ,\r\n        frequency : connector.frequency ,\r\n        status : connector.status ,\r\n        created_date : connector.created_date ,\r\n        created_by : connector.created_by ,\r\n        modify_date : connector.modify_date ,\r\n        modify_by : connector.modify_by })\r\n    });\r\n    \r\n   this.removeConnectorFG(data.length);\r\n\r\n   const connectorForm = this.form.get('connectorForm') as FormArray;\r\n\r\n   connectorForm.patchValue(connector_data);\r\n\r\n\r\n  }\r\n\r\n  clkBatteryBackup(event){\r\n    this.batteryBackup = event.checked;\r\n    this.ref.checked = this.batteryBackup;\r\n  }\r\n  clkRfidCardReader(event){\r\n    this.rfidCardReader = event.checked;\r\n    this.rfid.checked = this.rfidCardReader;\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.active.checked = this.status;\r\n  }\r\n  \r\n  filteredOptions(){\r\n    this.filteredOptionsCharType = this.form.controls.chargerType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharType(name) : this.chargerTypes)\r\n    );\r\n    this.filteredOptionsManufacturer = this.form.controls.manufacturer.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n     \r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterManfacturer(name) : this.manufacturers)\r\n    );\r\n    this.filteredOptionsCharModelType = this.form.controls.chargerModelType.valueChanges\r\n    .pipe(\r\n      startWith(''),\r\n      map(value => typeof value === 'string' ? value : value.name),\r\n      map(name => name ? this._filterCharModelType(name) : this.chargerModelTypes)\r\n    );\r\n    this.filteredOptionsCommunicationProto = this.form.controls.communicationProtocol.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(value => typeof value === 'string' ? value : value.name),\r\n        map(name => name ? this._filterCommunicationProtocol(name) : this.communicationProtocols)\r\n      );\r\n  }\r\n  displayCharType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayManfacturer(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCharModelType(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  displayCommunicationProto(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }  \r\n  private _filterCharType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterManfacturer(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.manufacturers.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCharModelType(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.chargerModelTypes.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  private _filterCommunicationProtocol(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.communicationProtocols.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Vehicle On-Board\"></page-header> -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n\r\n<mat-toolbar class=\"action_toolbar\"> Models</mat-toolbar>\r\n\t<div style=\"padding:24px;max-height: 32vw;overflow: auto;\">\r\n<div id=\"forms\" class=\"page-layout simple fullwidth mat-dialog\" fxLayout=\"column\" >\r\n  <form [formGroup]=\"form\" class=\"\" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n     fxFlex=\"1 0 auto\" name=\"form\" >\r\n     <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Charger Model</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerType\" autocomplete=\"off\" required  [matAutocomplete]=\"chargerTypeAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #chargerTypeAuto=\"matAutocomplete\"  [displayWith]=\"displayCharType\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharType | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-icon matSuffix  class=\"secondary-text\"  matTooltip=\"Please select charger model\">model_training</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('chargerType').invalid\">Please select charger model</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Manufacturer</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"manufacturer\"  autocomplete=\"off\" required [matAutocomplete]=\"manufacturerAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #manufacturerAuto=\"matAutocomplete\"  [displayWith]=\"displayManfacturer\">\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsManufacturer | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please select manufacturer\">precision_manufacturing</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('manufacturer').invalid\">Please select manufacturer</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Charger Model Type</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"chargerModelType\" autocomplete=\"off\"  required  [matAutocomplete]=\"chargerModelTypeAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #chargerModelTypeAuto=\"matAutocomplete\"  [displayWith]=\"displayCharModelType\">\r\n\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCharModelType | async\" [value]=\"option\">\r\n\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please select charger model type\">format_list_bulleted</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('chargerModelType').invalid\">Please select charger model type</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Code</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"code\" maxlength=\"20\"\r\n\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t <mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter code\">qr_code_scanner</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('code').hasError('pattern')\">Special Character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Name</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"name\" maxlength=\"50\"\r\n\t\t\t\t\trequired autocomplete=\"off\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter name\">badge</mat-icon>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('required')\">Please enter name</mat-error>\r\n\t\t\t\t\t<mat-error *ngIf=\"form.get('name').hasError('pattern')\">Special Character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Description</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"description\" maxlength=\"200\"\r\n\t\t\t\t\t\tautocomplete=\"off\">\r\n\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter description\">description</mat-icon>\r\n\t\t\t\t\t\t<mat-error *ngIf=\"form.get('description').hasError('pattern')\">Special Character are not allowed</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Communication Protocol</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"communicationProtocol\"  required autocomplete=\"off\"  [matAutocomplete]=\"communicationProtocolAuto\">\r\n\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t<mat-autocomplete #communicationProtocolAuto=\"matAutocomplete\"  [displayWith]=\"displayCommunicationProto\">\r\n\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsCommunicationProto | async\" [value]=\"option\">\r\n\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<mat-icon matSuffix  class=\"secondary-text\"  matTooltip=\"Please select communication protocol\">import_contacts</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('communicationProtocol').invalid\">Please select communication protocol</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Communication Mode</mat-label>\r\n\t\t\t\t<mat-select formControlName=\"communicationMode\" multiple>\r\n\t\t\t\t\t<mat-option *ngFor=\"let communication of communicationModeData\" [value]=\"communication\">{{communication}}</mat-option>\r\n\t\t\t\t</mat-select>\r\n\t\t\t\t<mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter communication mode\">burst_mode</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('communicationMode').invalid\">Please enter communication mode</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Card Reader Type</mat-label>\r\n\t\t\t\t<input matInput placeholder=\"\" formControlName=\"cardReaderType\"\r\n\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t <mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter card reader type\">chrome_reader_mode</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('cardReaderType').invalid\">Please enter card reader type\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"25\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>No. Of Connectors</mat-label>\r\n\t\t\t\t<input matInput numbersOnly placeholder=\"\" formControlName=\"noOfConnectors\"\r\n\t\t\t\t\trequired  autocomplete=\"off\" >\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter no. of connectors\">help</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.required\">Please enter no. of connectors\r\n\t\t\t\t</mat-error>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('noOfConnectors').errors?.pattern\">Only numbers are allowed\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<div  fxFlex=\"15\" class=\"pr-4\">\r\n\t\t\t\t<mat-label class=\"sm-txt mr-20\">Battery Backup</mat-label>\r\n\t\t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" \r\n\t\t\t\t[checked]=\"batteryBackup\" (change)=\"clkBatteryBackup($event)\" #toggleElement>\r\n\t\t\t\t{{batteryBackup ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t</div>\r\n\t\t\t<div fxFlex=\"17\" class=\"pr-4\">\r\n        \t\t<mat-label class=\"sm-txt mr-20\">RFID card reader</mat-label>\r\n        \t\t\t<mat-slide-toggle class=\"example-margin sm-txt mt-10\" color=\"primary\" \r\n         \t\t\t [checked]=\"rfidCardReader\" (change)=\"clkRfidCardReader($event)\" #rfidToggleElement>\r\n          \t\t\t\t{{rfidCardReader ? 'Yes' : 'No'}}</mat-slide-toggle>\r\n\t\t\t</div>\r\n      <div fxFlex=\"18\" class=\"pr-4\">\r\n\t\t\t\t<mat-label class=\"sm-txt mr-20\">Status</mat-label>\r\n        <mat-slide-toggle class=\"example-margin\" color=\"primary\"\r\n        [checked]=\"status\" (change)=\"updateStatus($event)\" #activeElement>\r\n          {{status ? 'Active' : 'Inactive'}}</mat-slide-toggle>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<mat-card style=\"box-shadow: none!important;\">\r\n      <div formArrayName=\"connectorForm\">\r\n\t\t\t\t<div   fxLayout=\"column\" *ngFor=\"let cf of form.get('connectorForm')['controls']; let i = index\" [formGroupName]=\"i\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\tConnector {{i+1}}\r\n\t\t\t\t\t</div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Connector Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select  formControlName=\"connectorType\" >\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of connectorTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t<mat-icon matSuffix  class=\"secondary-text\"  matTooltip=\"Please enter connector type\">help</mat-icon>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>I/O Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select  formControlName=\"ioType\" >\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of ioTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t<mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter I/O type\">help</mat-icon>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Current Type</mat-label>\r\n\t\t\t\t\t\t\t<mat-select  formControlName=\"currentType\" >\r\n\t\t\t\t\t\t\t\t<mat-option *ngFor=\"let option of currentTypes\" [value]=\"option.id\">\r\n\t\t\t\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t\t\t\t</mat-option>\r\n\t\t\t\t\t\t\t\t</mat-select>\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter current type\">help</mat-icon>\r\n              </mat-form-field >\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Voltage(V)</mat-label>\r\n\t\t\t\t\t\t\t\t<input matInput  formControlName=\"voltage\" autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter voltage \">help</mat-icon>\r\n\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('voltage').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n            <mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n              <mat-label>Phase</mat-label>\r\n                    <input matInput placeholder=\"\" formControlName=\"phase\"\r\n                       autocomplete=\"off\">\r\n\t\t\t\t\t   <mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter phase\">help</mat-icon>\r\n                    <mat-error *ngIf=\"cf.get('phase').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n              </mat-form-field>\r\n\t\t\t\t\t</div>\r\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\"  fxFlex=\"1 0 auto\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Max. Amp.(A)</mat-label>\r\n\t\t\t\t\t\t\t\t\t<input matInput placeholder=\"\" formControlName=\"maxAmp\"\r\n\t\t\t\t\t\t\t\t\t\t autocomplete=\"off\">\r\n\t\t\t\t\t\t\t\t\t\t <mat-icon  matSuffix class=\"secondary-text\"  matTooltip=\"Please enter max Amp.\">help</mat-icon>\r\n\t\t\t\t\t\t\t\t\t<mat-error *ngIf=\"cf.get('maxAmp').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Power(KW)</mat-label>\r\n\t\t\t\t\t\t  <input matInput placeholder=\"\" formControlName=\"power\"\t autocomplete=\"off\">\r\n\t\t\t\t\t\t  <mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter power\">help</mat-icon>\r\n\t\t\t\t\t  \t<mat-error *ngIf=\"cf.get('power').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t\t\t<mat-form-field  appearance=\"outline\" fxFlex=\"20\" class=\"pr-4\">\r\n\t\t\t\t\t\t\t<mat-label>Frequency(Hz)</mat-label>\r\n\t\t\t\t\t    \t<input matInput placeholder=\"\" formControlName=\"frequency\"  autocomplete=\"off\">\r\n\t\t\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\"  matTooltip=\"Please enter frequency\">help</mat-icon>\r\n\t\t\t\t\t\t    <mat-error *ngIf=\"cf.get('frequency').errors?.pattern\">Only numbers are allowed (e.g. 00.00)</mat-error>\r\n\t\t\t\t\t\t</mat-form-field>\r\n            <div class=\"add-row\">\r\n              <mat-label class=\"sm-txt\">Add Row</mat-label>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"primary\" aria-label=\"Add\"\r\n                (click)=\"addConnectorFG()\" matTooltip=\"Add\">\r\n              <mat-icon>add_circle</mat-icon>\r\n              </button>\r\n              <button class=\"float-left\" type=\"button\" mat-icon-button color=\"warn\" aria-label=\"Remove/clear\"\r\n                (click)=\"removeConnectorFG(i)\" matTooltip=\"Remove\">\r\n              <mat-icon>delete</mat-icon>\r\n              </button>\r\n            </div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\r\n        </div>\r\n      </div>\r\n\t\t</mat-card>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n      <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\"\r\n      (click)=\"onYesClick()\">{{isEditMode ? 'Save' : 'Save'}}</button>\r\n      <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\"\r\n      (click)=\"close()\" >Cancel</button>\t\r\n    </div>\r\n       \r\n\r\n     </form>\r\n</div>\r\n</div>"]}