{"version":3,"sources":["webpack:///src/app/main/user-management/user-role-activity/user-role-activity.module.ts","webpack:///src/app/main/user-management/user-role-activity/user-role-activity-routing.module.ts","webpack:///src/app/main/user-management/user-role-activity/user-role-activity.component.ts","webpack:///src/app/main/user-management/user-role-activity/user-role-activity.component.html"],"names":["COMPONENTS","COMPONENTS_DYNAMIC","UserRoleActivityModule","imports","declarations","entryComponents","routes","path","component","canActivate","UserRoleActivityRoutingModule","forChild","exports","autocompleteObjectValidator","control","value","TodoItemNodeTest","isSelected","ActionNode","TodoItemFlatNode","ActionMenuNode","ChecklistDatabase","_menuConfigService","changeDetectorRef","dataChange","localStorage","JSON","parse","getItem","initialize","getRoleMenuList","project_id","client_id","role_id","getMenusByClientIdWithAlreadyMappedToRole","subscribe","resp","status","menuConfigLit","menuChildList","index","data","length","menuCfg","parent_id","push","parentMenu","getParentMenu","children","undefined","detectChanges","buildFileTree","next","err","menuConfigList","menuConfig","menu_id","menudata","level","todoItemList","node","item","title","id","map_id","rm_map_id","parent","name","UserRoleActivityComponent","snackBar","menuConfigService","fb","clientService","_database","roleService","_utilityService","actionMenu","menuNode","flatNodeMap","Map","menuAction","completed","subMenu","nestedNodeMap","selectedParent","newItemName","checklistSelection","selectChange","collaspedChange","selectedMenus","getLevel","isExpandable","expandable","getChildren","hasChild","_","_nodeData","hasNoContent","transformer","existingNode","get","flatNode","set","nodeSelectionToggle","allComplete","treeFlattener","treeControl","dataSource","getMenuListClientWise","activeMenuItems$","menuItemSelecte","menuArray","expandAll","roleMenuForm","group","client","required","role","getClients","getRolesList","toggle","descendants","getDescendants","select","deselect","markForCheck","k","checkParentIsSelected","result","i","filter","t","isAlreadyPush","formValues","selected","params","menus","map","v","created_by","userId","setRoleMenuMapping","open","roleMenuMappedSucess","duration","getActiveClientsCW","clients","toSelect","find","c","setValue","selectedClientID","filteredOptionsClient","controls","valueChanges","pipe","_filterClientModels","filterValue","toLowerCase","option","includes","roles","getActiveRolesByClientId","filteredOptionsRole","_filterRoleModels","clear","descAllSelected","every","child","some","descendantsAllSelected","forEach","checkAllParentsSelection","getParentNode","checkRootNodeSelection","nodeSelected","currentLevel","startIndex","dataNodes","indexOf","currentNode","parentNode","insertItem","expand","itemValue","nestedNode","updateItem","event","checked","ref","selectAll","unSelectAll","collaspedRef","collapseAll","onClientChange","onRoleChange","updateSelectChange","updatecollaspedChange","openSubmit","selector","templateUrl","styleUrls","providers","encapsulation","None","animations","tree"],"mappings":"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","file":"user-role-activity-user-role-activity-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { UserRoleActivityRoutingModule } from './user-role-activity-routing.module';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { UserRoleActivityComponent } from './user-role-activity.component';\r\nconst COMPONENTS =[UserRoleActivityComponent];\r\nconst COMPONENTS_DYNAMIC =[];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, UserRoleActivityRoutingModule,FuseSharedModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class UserRoleActivityModule{}","import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n//import { TABS_DEMO_ROUTES } from './role-crud/routes';\r\n//import { RoleCrudComponent } from './role-crud/role-crud.component';\r\nimport { UserRoleActivityComponent } from './user-role-activity.component';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    // {\r\n    //     path : 'crud',component : RoleCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    // },\r\n    {\r\n        path : 'userRole-activityMapping',component : UserRoleActivityComponent,canActivate: [AuthGuard]\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class UserRoleActivityRoutingModule{}","import { Component, OnInit ,Injectable, ChangeDetectorRef, ViewChild} from '@angular/core';\r\nimport {SelectionModel} from '@angular/cdk/collections';\r\nimport { Validators, FormBuilder, FormGroup,FormControl,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { RfidService } from 'app/shared/services/rfid/rfid.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { ClientService } from 'app/shared/services/client/client.service';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport { MenuConfigService } from 'app/shared/services/menu-config/menu-config.service'; \r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { RoleService } from 'app/shared/services/user/role.service';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n} \r\nexport class TodoItemNodeTest {\r\n  children: TodoItemNodeTest[];\r\n  item: string;\r\n  actionNode:ActionNode[];\r\n  id:number;\r\n  title:string;\r\n  menu_id:string;\r\n  isSelected:boolean = false;\r\n  parent_id:string;\r\n  rm_map_id:string;\r\n}\r\nexport class ActionNode{\r\n  add:boolean;\r\n  delete:boolean;\r\n  download : boolean;\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  item: string;\r\n  level: number;\r\n  expandable: boolean;\r\n  actionAll : ActionMenuNode[];\r\n  children: TodoItemFlatNode[];\r\n  actionNode:ActionNode[];\r\n  id:number;\r\n  title:string;\r\n  menu_id:string;\r\n  map_id:string;\r\n  parent_id:string;\r\n  rm_map_id:string;\r\n  isSelected:boolean = false;\r\n}\r\nexport class ActionMenuNode{\r\n  add:boolean;\r\n  delete:boolean;\r\n  download : boolean;\r\n  selectAll:boolean;\r\n}\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n  dataChange = new BehaviorSubject<TodoItemFlatNode[]>([]);\r\n  localStorage : any;\r\n  get data(): TodoItemFlatNode[] { return this.dataChange.value; }\r\n  \r\n  constructor(private _menuConfigService:MenuConfigService,private changeDetectorRef:ChangeDetectorRef) {\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    \r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n    this.getRoleMenuList(this.localStorage.project_id,this.localStorage.client_id,this.localStorage.role_id);\r\n    \r\n    \r\n  }\r\n  getRoleMenuList(project_id,client_id,role_id){\r\n    this._menuConfigService.getMenusByClientIdWithAlreadyMappedToRole(project_id,client_id,role_id).subscribe(\r\n      (resp:any)=>{\r\n        if(resp.status == true){\r\n          let menuConfigLit = [];\r\n          let menuChildList = [];\r\n          for (let index = 0; index < resp.data.length; index++) {\r\n            let menuCfg = resp.data[index];\r\n            if(menuCfg.parent_id == null){\r\n                menuConfigLit.push(menuCfg);\r\n            }else{\r\n                let parentMenu = this.getParentMenu(menuConfigLit, menuCfg.parent_id);\r\n                menuChildList = parentMenu.children;\r\n                if(undefined == menuChildList) {\r\n                  menuChildList = [];\r\n                  parentMenu.children = menuChildList;\r\n                }\r\n                menuChildList.push(menuCfg);\r\n            }\r\n        }\r\n        this.changeDetectorRef.detectChanges();\r\n          const data = this.buildFileTree(menuConfigLit, 0);\r\n          this.dataChange.next(data);\r\n         \r\n          \r\n        }else{\r\n          \r\n        }\r\n        \r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n  getParentMenu(menuConfigList, parent_id) {\r\n    let parentMenu;\r\n    for (let index = 0; index < menuConfigList.length; index++) {\r\n        let menuConfig = menuConfigList[index];\r\n        if(menuConfig.menu_id == parent_id) {\r\n          parentMenu = menuConfig;\r\n          break;\r\n        }else{\r\n            let menuChildList = menuConfig.children;\r\n            if(undefined != menuChildList){\r\n              parentMenu = this.getParentMenu(menuChildList, parent_id);\r\n              if(parentMenu != undefined){\r\n                break;\r\n              }\r\n            }\r\n        }\r\n    }\r\n    return parentMenu;\r\n}\r\n  buildFileTree(menudata, level: number): TodoItemFlatNode[] {\r\n    let todoItemList = [];\r\n    for (let index = 0; index < menudata.length; index++) {\r\n      let menuCfg = menudata[index];\r\n        const node = new TodoItemFlatNode();\r\n        node.item = menuCfg.title;\r\n        node.id = menuCfg.id;\r\n        node.title = menuCfg.title;\r\n        node.menu_id = menuCfg.menu_id;\r\n        node.map_id = menuCfg.map_id;  \r\n       node.parent_id = menuCfg.parent_id;\r\n       node.rm_map_id = menuCfg.rm_map_id;\r\n       this.changeDetectorRef.detectChanges();\r\n        if(menuCfg.children != undefined)\r\n          node.children = this.buildFileTree(menuCfg.children, level + 1);\r\n        todoItemList.push(node);\r\n\r\n    }\r\n    return todoItemList;\r\n  }\r\n  \r\n  insertItem(parent: TodoItemFlatNode, name: string) {\r\n    if (parent.children) {\r\n      parent.children.push({item: name} as TodoItemFlatNode);\r\n      this.dataChange.next(this.data);\r\n    }\r\n  }\r\n\r\n  updateItem(node: TodoItemFlatNode, name: string) {\r\n    node.item = name;\r\n    this.dataChange.next(this.data);\r\n  }\r\n}\r\n\r\nexport interface MenuAction {\r\n  name: string;\r\n  completed: boolean;\r\n  subMenu?: MenuAction[];\r\n}\r\n@Component({\r\n  selector: 'app-user-role-activity',\r\n  templateUrl: './user-role-activity.component.html',\r\n  styleUrls: ['./user-role-activity.component.scss'],\r\n  providers: [ChecklistDatabase,DatePipe],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n})\r\nexport class UserRoleActivityComponent implements OnInit {\r\n  clients:any;  \r\n  filteredOptionsClient: Observable<any[]>;\r\n  roles:any;\r\n  filteredOptionsRole:Observable<any[]>;\r\n  roleMenuForm: FormGroup;\r\n  actionMenu =false;\r\n  menuNode = false;\r\n  localStorage : any;\r\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemFlatNode>();\r\n  menuAction: MenuAction = {\r\n    name: 'select All',\r\n    completed: false,\r\n    subMenu: [\r\n      {name: 'Add/Update', completed: false},\r\n      {name: 'Delete', completed: false},\r\n      {name: 'Download', completed: false}\r\n    ]\r\n  };\r\n  selectedClientID : any;\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<TodoItemFlatNode, TodoItemFlatNode>();\r\n  TREE_DATA:any;\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n\r\n  /** The new item's name */\r\n  newItemName = '';\r\n\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n  treeFlattener: MatTreeFlattener<TodoItemFlatNode, TodoItemFlatNode>;\r\n\r\n  dataSource: MatTreeFlatDataSource<TodoItemFlatNode, TodoItemFlatNode>;\r\n\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n  @ViewChild('tree') tree;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  @ViewChild(\"toggleCollasped\") collaspedRef: any; \r\n  selectChange = false;\r\n  collaspedChange = false;\r\n  selectedMenus = [];\r\n  menuArray:any;\r\n  constructor(private snackBar: MatSnackBar,private menuConfigService:MenuConfigService,private changeDetectorRef: ChangeDetectorRef,private fb: FormBuilder, private clientService : ClientService,private _database: ChecklistDatabase,\r\n              private roleService:RoleService,private _utilityService:UtilityService) {\r\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\r\n      this.isExpandable, this.getChildren);\r\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n   this.getMenuListClientWise();\r\n  \r\n     \r\n  }\r\n\r\n  ngOnInit() {\r\n    \r\n    this.initialize();\r\n  }\r\n \r\n\r\nngAfterViewInit() {\r\n  this._utilityService.activeMenuItems$.subscribe(menuItemSelecte=> {\r\n    this.menuArray = menuItemSelecte;\r\n    if(this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined){\r\n      this.menuArray  = JSON.parse( localStorage.getItem('activeMenuItems'));\r\n    }\r\n    this.changeDetectorRef.detectChanges();\r\n  })\r\n  this.treeControl.expandAll();\r\n}\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    this.roleMenuForm = this.fb.group({\r\n      client:['', [autocompleteObjectValidator(),Validators.required]],\r\n      role:['', [autocompleteObjectValidator(),Validators.required]],\r\n    });\r\n    this.getClients();\r\n   this.getRolesList(this.localStorage.client_id);\r\n  }\r\n  getMenuListClientWise(){\r\n    this._database.dataChange.subscribe(data => {\r\n      this.dataSource.data = data;\r\n      this.treeControl.expandAll()\r\n      \r\n    });\r\n  }\r\n  \r\n   \r\n   nodeSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants, node)\r\n      : this.checklistSelection.deselect(...descendants, node);\r\n      this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  checkParentIsSelected(data){\r\n    for(var k=0;k<data.length;k++){\r\n      let node =data[k];\r\n       if(node.children != undefined){\r\n         const children =  node.children;\r\n         this.checkParentIsSelected(children);\r\n         let result = false;\r\n      \r\n        for(var i =0; i < children.length;i++){\r\n               const isSelected = this.selectedMenus.filter(t => { return children[i].menu_id == t.menu_id });\r\n               if(isSelected != null && isSelected.length > 0){\r\n                 result = true;\r\n                 break;\r\n               }\r\n        }\r\n         \r\n         if(result == true){\r\n          const isAlreadyPush = this.selectedMenus.filter(t => { return node.menu_id == t.menu_id });\r\n           if(isAlreadyPush == null || isAlreadyPush.length == 0){\r\n            this.selectedMenus.push(node);\r\n           }   \r\n         }\r\n          \r\n       }\r\n     \r\n }\r\n  }\r\n\r\n  openSubmit(){\r\n    let formValues = this.roleMenuForm.value;\r\n    ////\r\n    this.selectedMenus = [];\r\n    this.selectedMenus = [...this.checklistSelection.selected];\r\n     \r\n    this.checkParentIsSelected(this.dataSource.data);\r\n    \r\n    //;\r\n    let params = {\r\n      role_id :formValues.role.id, \r\n       menus :this.selectedMenus.map(v => ({ menu_id: v.menu_id})),\r\n      status:\"Y\",\r\n      created_by : this.localStorage.userId \r\n    }\r\n\r\n    \r\n   this.menuConfigService.setRoleMenuMapping(params).subscribe(\r\n     (resp:any )=>{\r\n      // \r\n      if(resp.status = true){\r\n        this.snackBar.open(MessageConstant.roleMenuMappedSucess, 'Dismiss', { duration: 5000 });\r\n        this._database.getRoleMenuList(this.localStorage.project_id,formValues.client.id,formValues.role.id)\r\n      }else{\r\n        this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n      }\r\n       \r\n       \r\n\r\n     },\r\n     (err)=>{\r\n      // \r\n       this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n     }\r\n   )\r\n\r\n      \r\n      \r\n   \r\n\r\n  }\r\n  getClients(){\r\n    \r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n    this.clientService.getActiveClientsCW(this.localStorage.userId).subscribe(\r\n      (data:any)=>{\r\n        this.clients = data;\r\n\r\n         const toSelect = this.clients.find(c => c.id == this.localStorage.client_id);\r\n         this.roleMenuForm.get('client').setValue(toSelect);\r\n          this.selectedClientID = toSelect.id;\r\n        this.filteredOptionsClient = this.roleMenuForm.controls.client.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterClientModels(name) : this.clients)\r\n        );\r\n\r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n  }\r\n  displayClient(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n\r\n  private _filterClientModels(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.clients.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  onClientChange(value){\r\n    //this.dataSource.data =[];\r\n    //this._database.dataChange.next(null);\r\n    //this.checklistSelection.clear();\r\n    //this.descendantsAllSelected( this.checklistSelection.);\r\n    //this._database.getRoleMenuList(this.localStorage.project_id,value.id);\r\n    this.getRolesList(value.id);\r\n    this.roleMenuForm.get('role').setValue('');\r\n    this.selectedClientID = value.id;\r\n    //this.getMenuListClientWise();\r\n  }\r\n\r\n  getRolesList(client_id){\r\n    this.roles = [];\r\n    this.roleService.getActiveRolesByClientId(this.localStorage.project_id,client_id).subscribe(\r\n      (resp:any)=>{\r\n        if(resp.status = true){\r\n          this.roles = resp.data;\r\n            \r\n          const toSelect = this.roles.find(c => c.id == this.localStorage.role_id);\r\n          if(toSelect != null){\r\n            if(toSelect.id = this.localStorage.role_id){\r\n              this.roleMenuForm.get('role').setValue(toSelect);\r\n            }\r\n            \r\n          }\r\n          \r\n         \r\n         this.filteredOptionsRole = this.roleMenuForm.controls.role.valueChanges\r\n         .pipe(\r\n           startWith(''),\r\n           map(value => typeof value === 'string' ? value : value.name),\r\n           map(name => name ? this._filterRoleModels(name) : this.roles)\r\n         );\r\n         //this._database.getRoleMenuList(this.localStorage.project_id,client_id,toSelect.id); \r\n        }\r\n        \r\n\r\n      },(err)=>{\r\n        \r\n      }\r\n    )\r\n  }\r\n  displayRole(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n\r\n  private _filterRoleModels(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.roles.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  onRoleChange(value){\r\n \r\n    this.checklistSelection.clear();\r\n  this._database.getRoleMenuList(this.localStorage.project_id,this.selectedClientID,value.id);\r\n  }\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n  menu_id = (node:TodoItemFlatNode)=>node.menu_id;\r\n  parent_id = (node:TodoItemFlatNode)=>node.parent_id;\r\n  getChildren = (node: TodoItemFlatNode): TodoItemFlatNode[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\r\n\r\n  /**\r\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n   */\r\n  transformer = (node: TodoItemFlatNode, level: number) => {\r\n    const existingNode = this.nestedNodeMap.get(node);\r\n    const flatNode = existingNode && existingNode.item === node.item\r\n        ? existingNode\r\n        : new TodoItemFlatNode();\r\n    flatNode.item = node.item;\r\n    flatNode.level = level;\r\n    flatNode.menu_id = node.menu_id;\r\n    flatNode.parent_id = node.parent_id;\r\n    flatNode.expandable = !!node.children?.length;\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    if(node.rm_map_id != null){\r\n      this.nodeSelectionToggle(flatNode);\r\n    }\r\n    return flatNode;\r\n  }\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  // descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n  //   const descendants = this.treeControl.getDescendants(node);\r\n    \r\n  //   if (!descendants.length) {\r\n  //     return this.checklistSelection.isSelected(node);\r\n  //   }\r\n  //   const selected = this.checklistSelection.isSelected(node);\r\n  //   const allSelected = descendants.every(child => this.checklistSelection.isSelected(child));\r\n  //   if (!selected && allSelected) {\r\n  //     this.checklistSelection.select(node);\r\n     \r\n  //   }\r\n  //   return allSelected;\r\n  // }\r\n\r\n \r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\r\n      this.changeDetectorRef.markForCheck();\r\n      return this.checklistSelection.isSelected(child);\r\n    });\r\n    return descAllSelected;\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n    this.actionMenu=true;\r\n    this.menuNode = true;\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n    \r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n    this.actionMenu=true;\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected = descendants.length > 0 && descendants.every(child => {\r\n      return this.checklistSelection.isSelected(child);\r\n    });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewItem(node: TodoItemFlatNode) {\r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this._database.insertItem(parentNode!, '');\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this._database.updateItem(nestedNode!, itemValue);\r\n  }\r\n  allComplete: boolean = false;\r\n\r\n  updateAllComplete() {\r\n    this.allComplete = this.menuAction.subMenu != null && this.menuAction.subMenu.every(t => t.completed);\r\n  }\r\n\r\n  someComplete(node:any): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n   // if (node.this.menuAction.subMenu == null) {\r\n     // return false;\r\n   // }\r\n    //return node.this.menuAction.subMenu.filter(t => t.completed).length > 0 && !this.allComplete;\r\n  }\r\n\r\n  setAll(completed: boolean) {\r\n    this.allComplete = completed;\r\n    if (this.menuAction.subMenu  == null) {\r\n      return;\r\n    }\r\n    this.menuAction.subMenu .forEach(t => t.completed = completed);\r\n  }\r\n  updateSelectChange(event){\r\n    this.selectChange = event.checked;\r\n    this.ref.checked = this.selectChange;\r\n    if(this.selectChange == true){\r\n      this.checklistSelection.clear();\r\n      this.selectAll();\r\n     \r\n     // this.treeControl.collapseAll();\r\n    }else{\r\n      this.unSelectAll();\r\n      this.checklistSelection.clear();\r\n      //this.checklistSelection.selected\r\n      //this.treeControl.expandAll();\r\n    }\r\n  }\r\n  updatecollaspedChange(event){\r\n    this.collaspedChange = event.checked;\r\n    this.collaspedRef.checked = this.collaspedChange;\r\n    if(this.collaspedChange == true){\r\n      this.treeControl.collapseAll();\r\n    }else{\r\n      this.treeControl.expandAll();\r\n    }\r\n  }\r\n  selectAll(){\r\n    for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\r\n      if(!this.checklistSelection.isSelected(this.treeControl.dataNodes[i]))\r\n        this.checklistSelection.toggle(this.treeControl.dataNodes[i]);\r\n      this.treeControl.expand(this.treeControl.dataNodes[i])\r\n    }\r\n  }\r\n  unSelectAll(){\r\n    for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\r\n      if(!this.checklistSelection.isSelected(this.treeControl.dataNodes[i]))\r\n        this.checklistSelection.toggle(this.treeControl.dataNodes[i]);\r\n      this.treeControl.expand(this.treeControl.dataNodes[i])\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n","<div style=\"display: block;width: 100%;\">\r\n\t<div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n  \r\n\t  <!-- CENTER -->\r\n\t  <div class=\"center\" fusePerfectScrollbar>\r\n  \r\n\t\t  <!-- HEADER -->\r\n\t\t  <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n  \r\n\t\t\t  <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n  \r\n\t\t\t\t  <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n\t\t\t\t\t\t[@animate]=\"{value:'*',params:{x:'50px'}}\">User Role Activity\r\n\t\t\t\t  </span>\r\n  \r\n\t\t\t\t  <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n\t\t\t\t\t\t  (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n\t\t\t\t\t  <mat-icon>menu</mat-icon>\r\n\t\t\t\t  </button-->\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\t<form [formGroup]=\"roleMenuForm\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n\t\tfxFlex=\"1 0 auto\" name=\"roleMenuForm\" >\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Client</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"client\" autocomplete=\"off\" [matAutocomplete]=\"clientAuto\"\r\n\t\t\t\t\trequired>\r\n\t\t\t\t<mat-autocomplete #clientAuto=\"matAutocomplete\" [displayWith]=\"displayClient\"\r\n\t\t\t\t(optionSelected)='onClientChange($event.option.value)' > \r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsClient | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter client name\">account_circle\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t</div>\r\n\t\t\t\t<mat-error *ngIf=\"roleMenuForm.get('client').invalid\">Please select client </mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"30\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Role</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"role\" autocomplete=\"off\" [matAutocomplete]=\"roleAuto\"\r\n\t\t\t\t\trequired>\r\n\t\t\t\t<mat-autocomplete #roleAuto=\"matAutocomplete\" [displayWith]=\"displayRole\"\r\n\t\t\t\t(optionSelected)='onRoleChange($event.option.value)' > \r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionsRole | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t<div matSuffix style=\"display: flex;\">\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please enter role name\">account_circle\r\n\t\t\t\t\t</mat-icon>\r\n\t\t\t\t</div>\r\n\t\t\t\t<mat-error *ngIf=\"roleMenuForm.get('client').invalid\">Please select role </mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<div fxFlex=\"20\">\r\n\t\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"margin-bottom: 18px;\" >\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin\" color=\"primary\" [checked]=\"selectChange\"(change)=\"updateSelectChange($event)\" #toggleElement>\r\n\t\t\t\t\t{{selectChange ? 'Select All' : 'Un Select All'}}</mat-slide-toggle> &nbsp;&nbsp;\r\n\t\t\t\t\t<mat-slide-toggle class=\"example-margin\" color=\"primary\" [checked]=\"collaspedChange\"(change)=\"updatecollaspedChange($event)\" #toggleCollasped>\r\n\t\t\t\t\t\t{{collaspedChange ? 'Collasped' : 'Un Collasped'}}</mat-slide-toggle>\r\n\t\t\t\t\t<!-- <button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n\t\t\t\t\t<button mat-raised-button color=\"warn\" class=\"mr-8\" routerLink=\"/chargingStation/crud/list\">Cancel</button> -->\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div fxFlex=\"20\" style=\"margin-bottom: 18px;\">\r\n\t\t\t\t<button mat-raised-button color=\"primary\" class=\"mr-8\" style=\"float: right;\"  (click)=\"openSubmit()\">Save</button>\r\n\t\t\t</div>\r\n    </div>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n      <div fxFlex=\"100\" fxFlex.lt-sm=\"100\" style=\"margin-top:20px ;\">\r\n        <mat-toolbar  style=\"background-color: #00acc1 !important;color:white\" class=\"connector-toolbar\">\r\n          <!-- sidebar toggle button -->\r\n          <h6 class=\"m-0 pl-16 font-normal fz-1\"> \r\n            <button mat-icon-button [style.alignSelf]=\"'center'\"  class=\"mr-16\">\r\n              <mat-icon>list</mat-icon>\r\n            </button> &nbsp;Menu List\r\n          </h6>\r\n        </mat-toolbar>\r\n      </div>\r\n\t</div>\r\n\t<div fxLayout=\"row wrap\"  style=\"padding-top:20px;\">\r\n\t\t<div fxFlex=\"100\" fxFlex.lt-sm=\"100\" >\r\n\t\t  <mat-tree #tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n\t\t\t<mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n\t\t\t  <button mat-icon-button disabled></button>\r\n\t\t\t  <mat-checkbox class=\"checklist-leaf-node\"\r\n\t\t\t\t\t\t\t[checked]=\"checklistSelection.isSelected(node)\"\r\n\t\t\t\t\t\t\t(change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n\t\t\t\t\t\t\t<!-- <div *ngIf=\"checklistSelection.isSelected(node)\" style=\"text-align: end;display: flex; margin-left: auto;\">    \r\n\t\t\t\t\t\t\t  <div fxLayout=\"row wrap\" style=\"padding-right: 10px;\">\r\n\t\t\t\t\t\t\t\t<div fxFlex=\"100\" fxFlex.lt-sm=\"100\" >\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<mat-checkbox class=\"checklist-leaf-node\" id=\"selectAdd\">Add/Update</mat-checkbox>&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t\t\t<mat-checkbox class=\"checklist-leaf-node\" id=\"selectDelete\">Delete</mat-checkbox>&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t\t\t<mat-checkbox class=\"checklist-leaf-node\" id=\"selectDownload\">Download</mat-checkbox>\r\n\t\t\t\t\t\t\t\t  </div> \r\n\t\t\t\t\t\t\t\t  </div>\r\n\t\t\t\t\t\t\t  </div>           -->\r\n\t\t\t</mat-tree-node>\r\n\t\t  \r\n\t\t\t<mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n\t\t\t  <button mat-icon-button disabled></button>\r\n\t\t\t</mat-tree-node>\r\n\t\t  \r\n\t\t\t<mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n\t\t\t  \r\n\t\t\t  <button mat-icon-button matTreeNodeToggle\r\n\t\t\t\t\t  [attr.aria-label]=\"'Toggle ' + node.item\">\r\n\t\t\t\t<mat-icon class=\"mat-icon-rtl-mirror\">\r\n\t\t\t\t  {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n\t\t\t\t</mat-icon>\r\n\t\t\t  </button>\r\n\t\t\t  <mat-checkbox [checked]=\"descendantsAllSelected(node)\"\r\n\t\t\t\t\t\t\t[indeterminate]=\"descendantsPartiallySelected(node)\"\r\n\t\t\t\t\t\t\t(change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n\t\t\t\t\t\t  <!-- <div *ngIf=\"descendantsAllSelected(node)\" style=\"text-align: end;display: flex; margin-left: auto;\">    \r\n\t\t\t\t\t\t\t<div class=\"cb-wrapper\" [ngClass]=\"{'cb-vertival': !tmp }\">\r\n\t\t\t\t\t\t\t  <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"allComplete\"  [indeterminate]=\"someComplete(node)\" (change)=\"setAll($event.checked)\" > {{menuAction.name}}</mat-checkbox>&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t  <div *ngFor=\"let subMenu of menuAction.subMenu\">\r\n\t\t\t\t\t\t\t\t<mat-checkbox [(ngModel)]=\"subMenu.completed\" [ngModelOptions]=\"{standalone: true}\" (ngModelChange)=\"updateAllComplete()\">\r\n\t\t\t\t\t\t\t\t  {{subMenu.name}}\r\n\t\t\t\t\t\t\t\t</mat-checkbox>&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t  </div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t  </div>                   -->\r\n\t\t\t  <!--button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button-->\r\n\t\t\t</mat-tree-node>\r\n\t\t\t\r\n\t\t  </mat-tree>\r\n\t\t  </div>\r\n\t\t \r\n\t\t</div>\r\n\t\t<!-- <div fxLayout=\"row\" fxLayoutAlign=\"start start\" style=\"padding-top:10px\">\r\n\t\t\t<button mat-raised-button color=\"primary\" class=\"mr-8\"  (click)=\"openSubmit()\">Save</button>\r\n\t\t</div> -->\r\n  </form>\r\n</div> \r\n"]}