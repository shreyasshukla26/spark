{"version":3,"sources":["webpack:///src/app/main/manage-geographics/manage-state-pin/manage-state-pin-routing.module.ts","webpack:///src/app/main/manage-geographics/manage-state-pin/create/create.component.ts","webpack:///src/app/main/manage-geographics/manage-state-pin/create/create.component.html","webpack:///src/app/main/manage-geographics/manage-state-pin/manage-state-pin-crud/manage-state-pin-crud.component.ts","webpack:///src/app/main/manage-geographics/manage-state-pin/manage-state-pin-crud/manage-state-pin-crud.component.html","webpack:///src/app/main/manage-geographics/manage-state-pin/action-dialog/action-dialog.component.ts","webpack:///src/app/main/manage-geographics/manage-state-pin/action-dialog/action-dialog.component.html","webpack:///src/app/main/manage-geographics/manage-state-pin/manage-state-pin-crud/routes.ts","webpack:///src/app/main/manage-geographics/manage-state-pin/view-dialog/view-dialog.component.ts","webpack:///src/app/main/manage-geographics/manage-state-pin/view-dialog/view-dialog.component.html","webpack:///src/app/main/manage-geographics/manage-state-pin/list/list.component.ts","webpack:///src/app/main/manage-geographics/manage-state-pin/list/list.component.html","webpack:///src/app/main/manage-geographics/manage-state-pin/manage-state-pin.module.ts"],"names":["routes","path","component","canActivate","children","ManageStatePinRoutingModule","forChild","imports","exports","autocompleteObjectValidator","control","value","PinData","PIN","remarks","CreateComponent","fb","snackBar","cdr","router","stateService","countryService","addOnBlur","separatorKeysCodes","pins","preSelectedPins","status","mappedColumns","unmappedColumns","returnDataStatus","response_mapped","response_unmapped","initialize","getCountry","localStorage","JSON","parse","getItem","form","group","state","required","country","formDirective","invalid","length","open","pinError","duration","formValues","params","PIN_data","map","v","state_id","id","created_by","userId","createStatePINMapping","subscribe","resp","data","PIN_mapped","PIN_not_mapped","resetForm","reset","markAsPristine","detectChanges","mappedDataSource","paginator","mappedPaginator","unmappedDataSource","unmappedPaginator","statePinMapped","err_code","errorMsg","message","index","lastIndexOf","splitted","substring","nameDuplicateCity","err","get","hasError","event","checked","ref","item","name","filterValue","toLowerCase","states","filter","option","includes","countrty_id","getStateByCountry","stateData","filteredOptionState","controls","valueChanges","pipe","_filterState","getStatesByCountry","setValue","getAllCountry","countries","filteredOptionCountry","_filterCountry","input","trim","toSelect","find","c","undefined","push","pin","indexOf","splice","allActivePINByStateId","onSubmit","$event","preventDefault","onCountryChange","onStateChange","add","updateStatus","selector","templateUrl","styleUrls","encapsulation","None","animations","providers","ManageStatePinCrudComponent","_utilityService","tabLinks","tempLinks","nav_list","nav_list_with_tab","x","objectData","y","objectChildData","isDefaultRoutePermeted","z","label","link","navigate","activeMenuItems$","menuItemSelecte","menuArray","title","SunnyTabContentComponent","template","RainyTabContentComponent","FoggyTabContentComponent","ActionDialogComponent","cityService","datePipe","dialogRef","isEditMode","action","assignValues","close","modify_by","updateStatePinMapping","cityData","sta_id","state_name","country_id","closeActionPanel","onYesClick","TABS_DEMO_ROUTES","redirectTo","pathMatch","ViewDialogComponent","setDefaultPin","ManageStatePin","ListComponent","dialog","displayedColumns","head","pinSearch","stateSearch","statusSearch","getStatePIN","filterEntity","filterType","ANYWHERE","target","dataSource","firstPage","getAllStatePINMapping","statePinData","manageStatePin","i","statusString","sort","confirmDialogRef","disableClose","afterClosed","result","deleteStatePINMapping","autoFocus","panelClass","width","visibleOption","exportedData","filteredData","statePinModal","workSheet","json_to_sheet","workBook","book_new","book_append_sheet","doc","img","Image","imgRight","src","srcSparkEV","createdDate","Date","toLocaleString","setFontSize","setTextColor","autoTable","body","theme","headStyles","fontStyle","fillColor","styles","cellPadding","fontSize","margin","top","didDrawCell","didDrawPage","addImage","text","internal","pageSize","getWidth","align","setGState","GState","opacity","f_Name","addWaterMark","output","save","newpage","getNumberOfPages","String","tableExport","pdfExport","COMPONENTS","COMPONENTS_DYNAMIC","ManageStatePinModule","declarations","entryComponents"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,UAAMA,MAAM,GAAY,CACpB;AACIC,YAAI,EAAG,EADX;AACcC,iBAAS,EAAG,kHAD1B;AACsDC,mBAAW,EAAE,CAAC,4EAAD,CADnE;AACgFC,gBAAQ,EAAG;AAD3F,OADoB,CAAxB;;UAYaC,2B;;;;;cAAAA;;;;2BAAAA,2B;AAA2B,S;AAAA,kBAJ1B,CAAC,6DAAaC,QAAb,CAAsBN,MAAtB,CAAD,CAI0B,EAHzB,4DAGyB;;;;4HAA3BK,2B,EAA2B;AAAA;AAAA,oBAHzB,4DAGyB;AAAA,S;AAHb,O;;;;;wEAGdA,2B,EAA2B;gBALvC,sDAKuC;iBAL9B;AACNE,mBAAO,EAAG,CAAC,6DAAaD,QAAb,CAAsBN,MAAtB,CAAD,CADJ;AAENQ,mBAAO,EAAG,CAAC,4DAAD;AAFJ,W;AAK8B,U;;;;;;;;;;;;;;;;;;ACjBxiE;;AAChE;;AAAA;;;;;;AAIF;;AAA+C;;AAC/C;;;;;;AAQC;;AACC;;AACD;;;;;;AAF+D;;AAC9D;;AAAA;;;;;;AAIF;;AAA6C;;AAC7C;;;;;;AAMG;;AACE;;AACF;;;;;;AADE;;AAAA;;;;;;;;AAUJ;;AAAmC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACjC;;AACD;;AAAwB;;AAAM;;AAC/B;;;;;;AAFE;;AAAA;;;;;;AA8CF;;AAAmD;;AAAI;;;;;;AACvD;;AAA6C;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAG7C;;AAAmD;;AAAQ;;;;;;AAC3D;;AAA6C;;AAAqB;;;;;;AAArB;;AAAA;;;;;;AAE/C;;;;;;AACA;;;;;;AAsBE;;AAAmD;;AAAK;;;;;;AACxD;;AAA6C;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAG7C;;AAAmD;;AAAQ;;;;;;AAC3D;;AAA6C;;AAAqB;;;;;;AAArB;;AAAA;;;;;;AAE/C;;;;;;AACA;;;;;;;;;;;;AAxDF;;AAEA;;AACE;;AACD;;AACE;;AAA8B;;AAAc;;AAAQ;;AACpD;;AAAK;AAAA;;AAAA;;AAAA;AAAA;;AAAL;;AAOF;;AACA;;AACE;;AAED;;AACE;;AACA;;AACF;;AACA;;AACE;;AACA;;AACF;;AACA;;AACA;;AAEC;;AACA;;AACF;;AACC;;AACA;;AACD;;AACE;;AAA8B;;AAAkB;;AAAQ;;AACxD;;AAAK;AAAA;;AAAA;;AAAA;AAAA;;AAAL;;AAMF;;AAEA;;AACE;;AAGD;;AACE;;AACA;;AACF;;AACA;;AACE;;AACA;;AACF;;AACA;;AACA;;AAEC;;AACA;;AACF;;AACC;;AACF;;AACC;;;;;;;;;;AAhD0B;;AAAA,2GAA+B,UAA/B,EAA+B,IAA/B;;AAUO;;AAAA;;AACa;;AAAA;;AAGZ;;AAAA,kFAAc,iBAAd,EAAc,sEAAd;;AAeN;;AAAA,6GAAiC,UAAjC,EAAiC,IAAjC;;AAWK;;AAAA;;AACa;;AAAA;;AAGV;;AAAA,kFAAc,iBAAd,EAAc,sEAAd;;;;ADnHtC,eAASC,2BAAT,GAAoC;AAClC,eAAO,UAACC,OAAD,EAA6D;AAClE,cAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,mBAAO;AAAE,2CAA6B;AAAEA,qBAAK,EAAED,OAAO,CAACC;AAAjB;AAA/B,aAAP;AACD;;AACD,iBAAO,IAAP;AAAa;AACd,SALD;AAMD;;UAIYC,O,GAAb;AAAA;;AACE;AACA,aAAAC,GAAA,GAAc,EAAd;AACA,aAAAC,OAAA,GAAiB,EAAjB;AACC,O;;UAUUC,e;AAyBX,iCAAoBC,EAApB,EACUC,QADV,EACwCC,GADxC,EAEUC,MAFV,EAEiCC,YAFjC,EAEmEC,cAFnE,EAEkG;AAAA;;AAF9E,eAAAL,EAAA,GAAAA,EAAA;AACV,eAAAC,QAAA,GAAAA,QAAA;AAA8B,eAAAC,GAAA,GAAAA,GAAA;AAC9B,eAAAC,MAAA,GAAAA,MAAA;AAAuB,eAAAC,YAAA,GAAAA,YAAA;AAAkC,eAAAC,cAAA,GAAAA,cAAA;AAzBnE,eAAAC,SAAA,GAAY,IAAZ;AACS,eAAAC,kBAAA,GAAqB,CAAC,2DAAD,EAAQ,2DAAR,CAArB;AACT,eAAAC,IAAA,GAAc,EAAd;AACA,eAAAC,eAAA,GAAwB,EAAxB;AAGA,eAAAC,MAAA,GAAS,KAAT;AAQA,eAAAC,aAAA,GAA0B,CAAC,KAAD,EAAO,SAAP,CAA1B;AAEF,eAAAC,eAAA,GAA4B,CAAC,KAAD,EAAO,SAAP,CAA5B;AACA,eAAAC,gBAAA,GAA4B,KAA5B;AAGA,eAAAC,eAAA,GAAiB,EAAjB;AACE,eAAAC,iBAAA,GAAoB,EAApB;AAOC;;;;qCAEU;AACT,iBAAKC,UAAL,GADS,CAET;;AACD,iBAAKC,UAAL;AAEA;;;uCAES;AAER,iBAAKC,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAYF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAZ,CAApB;AAEA,iBAAKC,IAAL,GAAY,KAAKtB,EAAL,CAAQuB,KAAR,CAAc;AACzB;AAECC,mBAAK,EAAE,CAAC,EAAD,EAAI,CAAC/B,2BAA2B,EAA5B,EAA+B,0DAAWgC,QAA1C,CAAJ,CAHiB;AAIxBC,qBAAO,EAAE,CAAC,EAAD,EAAI,CAACjC,2BAA2B,EAA5B,EAA+B,0DAAWgC,QAA1C,CAAJ,CAJe;AAKxBf,oBAAM,EAAG,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B;AALb,aAAd,CAAZ;AAUD;;;mCAEQiB,a,EAAa;AAAA;;AACpB,gBAAI,KAAKL,IAAL,CAAUM,OAAd,EAAsB;AACpB;AACD,aAFD,MAEK;AACH,kBAAG,KAAKpB,IAAL,CAAUqB,MAAV,IAAkB,CAArB,EAAuB;AACrB,qBAAK5B,QAAL,CAAc6B,IAAd,CAAmB,kFAAgBC,QAAnC,EAA6C,SAA7C,EAAwD;AAAEC,0BAAQ,EAAE;AAAZ,iBAAxD;AACD,eAFD,MAGI;AACF,oBAAIC,UAAU,GAAG,KAAKX,IAAL,CAAU3B,KAA3B,CADE,CAEF;;AAGA,oBAAIuC,MAAM,GAAG;AACX;AACAC,0BAAQ,EAAE,KAAK3B,IAAL,CAAU4B,GAAV,CAAc,UAAAC,CAAC;AAAA,2BAAMA,CAAC,CAACxC,GAAR;AAAA,mBAAf,CAFC;AAGXyC,0BAAQ,EAACL,UAAU,CAACT,KAAX,CAAiBe,EAHf;AAIX7B,wBAAM,EAAI,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B,GAJ3B;AAKX8B,4BAAU,EAAG,KAAKtB,YAAL,CAAkBuB;AALpB,iBAAb;AASA,qBAAKrC,YAAL,CAAkBsC,qBAAlB,CAAwCR,MAAxC,EAAgDS,SAAhD,CACE,UAACC,IAAD,EAAa;AACZ,sBAAGA,IAAI,CAAClC,MAAL,IAAe,IAAlB,EAAuB;AACtB,yBAAI,CAACT,QAAL,CAAc6B,IAAd,CAAmB,iCAAnB,EAAsD,SAAtD,EAAiE;AAAEE,8BAAQ,EAAE;AAAZ,qBAAjE,EADsB,CAEtB;;;AACA,yBAAI,CAAClB,eAAL,GAAuB8B,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaC,UAApC;AACA,yBAAI,CAAC/B,iBAAL,GAAyB6B,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaE,cAAtC;AACApB,iCAAa,CAACqB,SAAd;;AACA,yBAAI,CAAC1B,IAAL,CAAU2B,KAAV;;AACA,yBAAI,CAACzC,IAAL,GAAU,EAAV;AACA,yBAAI,CAACK,gBAAL,GAAwB,IAAxB;;AACA,yBAAI,CAACI,UAAL;;AACA,yBAAI,CAACK,IAAL,CAAU4B,cAAV;;AACA,wBAAI,KAAI,CAACpC,eAAL,CAAqBe,MAArB,GAA4B,CAAhC,EAAkC,CACjC,CADD,MACK;AACA,2BAAI,CAAC3B,GAAL,CAASiD,aAAT;;AACC,2BAAI,CAACC,gBAAL,GAAwB,IAAI,0EAAJ,CAAuB,KAAI,CAACtC,eAA5B,CAAxB;AACF,2BAAI,CAACsC,gBAAL,CAAsBC,SAAtB,GAAkC,KAAI,CAACC,eAAvC;AACH;;AACD,wBAAI,KAAI,CAACvC,iBAAL,CAAuBc,MAAvB,GAA8B,CAAlC,EAAoC,CACnC,CADD,MACK;AACH,2BAAI,CAAC3B,GAAL,CAASiD,aAAT;;AACI,2BAAI,CAACI,kBAAL,GAA0B,IAAI,0EAAJ,CAAuB,KAAI,CAACxC,iBAA5B,CAA1B;AACA,2BAAI,CAACwC,kBAAL,CAAwBF,SAAxB,GAAoC,KAAI,CAACG,iBAAzC;AACL;;AACD,yBAAI,CAACvD,QAAL,CAAc6B,IAAd,CAAmB,kFAAgB2B,cAAnC,EAAmD,SAAnD,EAA8D;AAAEzB,8BAAQ,EAAE;AAAZ,qBAA9D;AACA,mBAxBD,MAwBM;AAEL,wBAAGY,IAAI,CAACc,QAAL,IAAiB,sBAApB,EAA2C;AACzC,2BAAI,CAAEC,QAAN,GAAiBf,IAAI,CAACgB,OAAtB;;AACA,0BAAIC,KAAK,GAAG,KAAI,CAAEF,QAAN,CAAeG,WAAf,CAA2B,GAA3B,CAAZ;;AAEA,2BAAI,CAACC,QAAL,GAAgB,KAAI,CAAEJ,QAAN,CAAeK,SAAf,CAAyBH,KAAK,GAAC,CAA/B,CAAhB;;AACA,0BAAG,KAAI,CAACE,QAAL,IAAiB,YAApB,EAAkC;AAChC,6BAAI,CAAC9D,QAAL,CAAc6B,IAAd,CAAmB,kFAAgBmC,iBAAnC,EAAsD,SAAtD,EAAiE;AAAEjC,kCAAQ,EAAE;AAAZ,yBAAjE;AACD;AAEF,qBATD,MASK;AACH,2BAAI,CAAC/B,QAAL,CAAc6B,IAAd,CAAmBc,IAAI,CAACgB,OAAxB,EAAiC,SAAjC,EAA4C;AAAE5B,gCAAQ,EAAE;AAAZ,uBAA5C;AACD,qBAbI,CAcN;;AACC;AAGD,iBA5CH,EA6CE,UAACkC,GAAD,EAAO;AACL,uBAAI,CAACjE,QAAL,CAAc6B,IAAd,CAAmB,kBAAnB,EAAuC,SAAvC,EAAkD;AAAEE,4BAAQ,EAAE;AAAZ,mBAAlD;AACD,iBA/CH;AAiDD;AAEF;AAGF;;;0CAEeV,I,EAAiB;AAC/B,mBAAOA,IAAI,CAAC6C,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,UAA3B,IACH,wBADG,GAEH9C,IAAI,CAAC6C,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,OAA3B,IACA,mBADA,GAEA,EAJJ;AAKD;;;uCACYC,K,EAAK;AAChB,iBAAK3D,MAAL,GAAc2D,KAAK,CAACC,OAApB;AACA,iBAAKC,GAAL,CAASD,OAAT,GAAmB,KAAK5D,MAAxB;AACD,W,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;uCACa8D,I,EAAS;AACpB,mBAAOA,IAAI,IAAIA,IAAI,CAACC,IAAb,GAAoBD,IAAI,CAACC,IAAzB,GAAgC,EAAvC;AACD;;;uCACoBA,I,EAAY;AAC/B,gBAAMC,WAAW,GAAGD,IAAI,CAACE,WAAL,EAApB;AACA,mBAAO,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACL,IAAP,CAAYE,WAAZ,GAA0BI,QAA1B,CAAmCL,WAAnC,CAAJ;AAAA,aAAzB,CAAP;AACD;;;6CACkBhD,O,EAAO;AAAA;;AACxB,iBAAKsD,WAAL,GAAmBtD,OAAO,CAACa,EAA3B;AACA,iBAAKnC,YAAL,CAAkB6E,iBAAlB,CAAoC,KAAKD,WAAzC,EAAsDrC,SAAtD,CACE,UAACuC,SAAD,EAAiB;AACf,oBAAI,CAACN,MAAL,GAAcM,SAAd;AACC,oBAAI,CAACC,mBAAL,GAA2B,MAAI,CAAC7D,IAAL,CAAU8D,QAAV,CAAmB5D,KAAnB,CAAyB6D,YAAzB,CACxBC,IADwB,CAEvB,iEAAU,EAAV,CAFuB,EAGvB,2DAAI,UAAA3F,KAAK;AAAA,uBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAAC8E,IAA9C;AAAA,eAAT,CAHuB,EAIvB,2DAAI,UAAAA,IAAI;AAAA,uBAAIA,IAAI,GAAG,MAAI,CAACc,YAAL,CAAkBd,IAAlB,CAAH,GAA6B,MAAI,CAACG,MAA1C;AAAA,eAAR,CAJuB,CAA3B;AAMC,aATN,EASO,UAACV,GAAD,EAAO,CAER,CAXN;AAaD;;;0CAEeG,K,EAAK;AACpB,iBAAKmB,kBAAL,CAAwBnB,KAAxB;AACA,iBAAKO,MAAL,GAAY,EAAZ;AACA,iBAAKtD,IAAL,CAAU6C,GAAV,CAAc,OAAd,EAAuBsB,QAAvB,CAAiC,EAAjC;AACA;;;uCACS;AAAA;;AACR,iBAAKpF,cAAL,CAAoBqF,aAApB,GAAoC/C,SAApC,CACE,UAACE,IAAD,EAAY;AACV,oBAAI,CAAC8C,SAAL,GAAiB9C,IAAjB;AACC,oBAAI,CAAC+C,qBAAL,GAA6B,MAAI,CAACtE,IAAL,CAAU8D,QAAV,CAAmB1D,OAAnB,CAA2B2D,YAA3B,CAC1BC,IAD0B,CAEzB,iEAAU,EAAV,CAFyB,EAGzB,2DAAI,UAAA3F,KAAK;AAAA,uBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAAC8E,IAA9C;AAAA,eAAT,CAHyB,EAIzB,2DAAI,UAAAA,IAAI;AAAA,uBAAIA,IAAI,GAAG,MAAI,CAACoB,cAAL,CAAoBpB,IAApB,CAAH,GAA+B,MAAI,CAACkB,SAA5C;AAAA,eAAR,CAJyB,CAA7B;AAMC,aATN,EASO,UAACzB,GAAD,EAAO,CAER,CAXN;AAaD;;;yCACcM,I,EAAS;AACtB,mBAAOA,IAAI,IAAIA,IAAI,CAACC,IAAb,GAAoBD,IAAI,CAACC,IAAzB,GAAgC,EAAvC;AACD;;;yCACsBA,I,EAAY;AACjC,gBAAMC,WAAW,GAAGD,IAAI,CAACE,WAAL,EAApB;AACA,mBAAO,KAAKgB,SAAL,CAAed,MAAf,CAAsB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACL,IAAP,CAAYE,WAAZ,GAA0BI,QAA1B,CAAmCL,WAAnC,CAAJ;AAAA,aAA5B,CAAP;AACD;;;8BACGL,K,EAAwB;AAC1B,gBAAMyB,KAAK,GAAGzB,KAAK,CAACyB,KAApB;AACA,gBAAMnG,KAAK,GAAG0E,KAAK,CAAC1E,KAApB,CAF0B,CAI1B;;AACA,gBAAI,CAACA,KAAK,IAAI,EAAV,EAAcoG,IAAd,EAAJ,EAA0B;AACxB,kBAAMC,QAAQ,GAAG,KAAKvF,eAAL,CAAqBwF,IAArB,CAA0B,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CAACrG,GAAF,IAASF,KAAK,CAACoG,IAAN,EAAb;AAAA,eAA3B,CAAjB;;AACA,kBAAGC,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,IAAIG,SAAnC,EAA6C;AAC3C,qBAAK3F,IAAL,CAAU4F,IAAV,CAAe;AAACvG,qBAAG,EAAEF,KAAK,CAACoG,IAAN;AAAN,iBAAf;AACD,eAFD,MAEK,CAEJ;AAEF,aAbyB,CAe1B;;;AACA,gBAAID,KAAJ,EAAW;AACTA,mBAAK,CAACnG,KAAN,GAAc,EAAd;AACD;AACF;;;iCAEM0G,G,EAAQ;AACb,gBAAMxC,KAAK,GAAG,KAAKrD,IAAL,CAAU8F,OAAV,CAAkBD,GAAlB,CAAd;;AAEA,gBAAIxC,KAAK,IAAI,CAAb,EAAgB;AACd,mBAAKrD,IAAL,CAAU+F,MAAV,CAAiB1C,KAAjB,EAAwB,CAAxB;AACD;AACF;;;wCACarC,K,EAAK;AAAA;;AACjB,iBAAKpB,YAAL,CAAkBoG,qBAAlB,CAAwChF,KAAK,CAACe,EAA9C,EAAkDI,SAAlD,CACE,UAACuC,SAAD,EAAiB;AACb,oBAAI,CAACzE,eAAL,GAAuByE,SAAS,CAACrC,IAAjC;AACA,aAHN,EAGO,UAACqB,GAAD,EAAO,CAER,CALN;AAOD;;;;;;;yBArPUnE,e,EAAe,2H,EAAA,wI,EAAA,gI,EAAA,uH,EAAA,4J,EAAA,gK;AAAA,O;;;cAAfA,e;AAAe,mC;AAAA;AAAA;;;;;;;;;;;;;;;;oFAFhB,CAAC,wDAAD,C;AAAU,iB;AAAA,gB;AAAA,mlG;AAAA;AAAA;;;AC3CtB;;AACC;;AACuD;AAAA;;AAAA;;AAAA,qBAAU,IAAA0G,QAAA,KAAV;AAAiC,aAAjC,EAAkC,eAAlC,EAAkC;AAAA,qBAAkBC,MAAM,CAACC,cAAP,EAAlB;AAAyC,aAA3E;;AACtD;;AACC;;AACC;;AAAW;;AAAO;;AAClB;;AAEA;;AACC;AAAA,qBAAkB,IAAAC,eAAA,qBAAlB;AAAsD,aAAtD;;AACA;;;;AAGD;;AACC;;AAA8E;;AAAW;;AAC1F;;AAED;;AACA;;AACC;;AAAW;;AAAK;;AAChB;;AAEA;;AACA;AAAA,qBAAkB,IAAAC,aAAA,qBAAlB;AAAoD,aAApD;;AACC;;;;AAGD;;AACC;;AAA4E;;AAAW;;AACxF;;AAED;;AACD;;AACA;;AACC;;AACC;;AACG;;AAGH;;AACD;;AAED;;AACA;;AACC;;AACC;;AAAY;;AAAU;;AACtB;;AACC;;AAIA;;AAOI;AAAA,qBAAwB,IAAAC,GAAA,QAAxB;AAAmC,aAAnC;;AAPJ;;AAQC;;AAEH;;AAED;;AACA;;AACC;;AACC;AAAA,qBAAU,IAAAC,YAAA,QAAV;AAA8B,aAA9B;;AACA;;AACD;;AACD;;AACA;;AACC;;AAAuD;;AAAI;;AAC3D;;AACqD;;AAAM;;AAC5D;;AACD;;AACA;;AAgED;;;;;;;;;;AA3IO;;AAAA;;AAKsE;;AAAA;;AAExB;;AAAA;;AAEjB;;AAAA;;AAKpB;;AAAA;;AAK2D;;AAAA;;AAExB;;AAAA;;AAEf;;AAAA;;AAKpB;;AAAA;;AAOkD;;AAAA;;AAWnC;;AAAA;;AAMtB;;AAAA,6FAA4B,+BAA5B,EAA4B,sBAA5B,EAA4B,uBAA5B,EAA4B,aAA5B;;AAY4E;;AAAA;;AAEjF;;AAAA;;AASG;;AAAA;;;;;;;;qBDlCU;;;;;;wEAGJhH,e,EAAe;gBAR3B,uDAQ2B;iBARjB;AACTiH,oBAAQ,EAAE,YADD;AAETC,uBAAW,EAAE,yBAFJ;AAGTC,qBAAS,EAAE,CAAC,yBAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAK,+DALN;AAMTC,qBAAS,EAAC,CAAC,wDAAD;AAND,W;AAQiB,U;;;;;;;;;;;;;;;AAOE/C,aAAG,EAAE,CAAF;kBAA9B,uDAA8B;mBAApB,e;AAAoB,WAAE,C;AAaLjB,yBAAe,EAAE,CAAF;kBAA5C,uDAA4C;mBAAlC,iB;AAAkC,WAAE,C;AACfE,2BAAiB,EAAE,CAAF;kBAAhD,uDAAgD;mBAAtC,mB;AAAsC,WAAE;;;;;;;;;;;;;;;;;;;AElEnD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACwBI;;AAKE;;AACF;;;;;;;;AAJG,kGAA2B,QAA3B,EAA2B,YAA3B;;AAGD;;AAAA;;;;;;;;;;;;;;;;ADxBN;;;;;UAUa+D,2B;AAYX,6CAAoBpH,MAApB,EAA4CD,GAA5C,EAA4EsH,eAA5E,EAA6G;AAAA;;AAAzF,eAAArH,MAAA,GAAAA,MAAA;AAAwB,eAAAD,GAAA,GAAAA,GAAA;AAAgC,eAAAsH,eAAA,GAAAA,eAAA;AAV5E,eAAAC,QAAA,GAAW,CACT;AACA;AAFS,WAAX;AAQA,eAAAC,SAAA,GAAY,EAAZ;AAIC;;;;qCAEU;AAAA;;AACT,iBAAKxG,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAX,CAApB;AACA,gBAAIsG,QAAQ,GAAG,KAAKzG,YAAL,CAAkB0G,iBAAjC;AACAD,oBAAQ,CAAC9C,MAAT,CAAgB,UAACgD,CAAD,EAAO;AACrB,kBAAIA,CAAC,CAACtF,EAAF,KAAS,mBAAb,EAAkC;AAChC,sBAAI,CAACuF,UAAL,GAAkBD,CAAlB;;AACA,oBAAI,MAAI,CAACC,UAAL,CAAgB1I,QAAhB,IAA4B,IAA5B,IAAoC,MAAI,CAAC0I,UAAL,CAAgB1I,QAAhB,IAA4B+G,SAApE,EAA+E;AAC7E,wBAAI,CAAC2B,UAAL,CAAgB1I,QAAhB,CAAyByF,MAAzB,CAAgC,UAACkD,CAAD,EAAO;AACrC,wBAAIA,CAAC,CAACxF,EAAF,KAAS,gBAAb,EAA+B;AAC7B,4BAAI,CAACyF,eAAL,GAAuBD,CAAvB;AACA,0BAAIE,sBAAsB,GAAG,KAA7B;;AACA,0BAAI,MAAI,CAACD,eAAL,CAAqB5I,QAArB,IAAiC,IAAjC,IAAyC,MAAI,CAAC4I,eAAL,CAAqB5I,QAArB,IAAiC+G,SAA9E,EAAyF;AACvF,8BAAI,CAAC6B,eAAL,CAAqB5I,QAArB,CAA8ByF,MAA9B,CAAqC,UAACqD,CAAD,EAAO;AAC1C,8BAAIA,CAAC,CAAC3F,EAAF,KAAS,gBAAb,EAA+B;AAC7B0F,kDAAsB,GAAG,IAAzB;;AACA,kCAAI,CAACP,SAAL,CAAetB,IAAf,CAAoB;AAAE+B,mCAAK,EAAE,kBAAT;AAA6BC,kCAAI,EAAE;AAAnC,6BAApB;AACD;;AACD,8BAAIF,CAAC,CAAC3F,EAAF,KAAS,QAAb,EAAuB;AACrB,kCAAI,CAACmF,SAAL,CAAetB,IAAf,CAAoB;AAAE+B,mCAAK,EAAE,SAAT;AAAoBC,kCAAI,EAAE;AAA1B,6BAApB;AACD;AACF,yBARD;AASD;;AAED,4BAAI,CAACX,QAAL,GAAgB,MAAI,CAACC,SAArB;;AACA,0BAAI,CAACO,sBAAL,EAA6B;AAC3B,8BAAI,CAAC9H,MAAL,CAAYkI,QAAZ,CAAqB,CAAC,uCAAuC,MAAI,CAACX,SAAL,CAAe,CAAf,EAAkBU,IAA1D,CAArB;AACD;AAEF;AAEF,mBAvBD;AAwBD;AAEF;AACF,aA/BD;AAgCD;;;4CACiB;AAAA;;AAChB,iBAAKZ,eAAL,CAAqBc,gBAArB,CAAsC3F,SAAtC,CAAgD,UAAA4F,eAAe,EAAI;AACjE,oBAAI,CAACC,SAAL,GAAiBD,eAAjB;;AACA,kBAAI,MAAI,CAACC,SAAL,IAAkB,IAAlB,IAA0B,MAAI,CAACA,SAAL,IAAkBrC,SAA5C,IAAyD,MAAI,CAACqC,SAAL,CAAeC,KAAf,IAAwB,IAAjF,IAAyF,MAAI,CAACD,SAAL,CAAeC,KAAf,IAAwBtC,SAArH,EAAgI;AAC9H,sBAAI,CAACqC,SAAL,GAAiBrH,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACG,OAAb,CAAqB,iBAArB,CAAX,CAAjB;AACD;;AACD,oBAAI,CAACnB,GAAL,CAASiD,aAAT;AACD,aAND;AAQD;;;;;;;yBA7DUoE,2B,EAA2B,uH,EAAA,gI,EAAA,2J;AAAA,O;;;cAA3BA,2B;AAA2B,kD;AAAA,iB;AAAA,e;AAAA,+pB;AAAA;AAAA;ACfxC;;AACE;;AAGE;;AAGI;;AAEI;;AAEI;;AACiD;;AACjD;;AAMJ;;AACF;;AACJ;;AACJ;;AACF;;AACI;;AAOF;;AACA;;AACF;;;;AArBsB;;AAAA;;AAA2C;;AAAA;;AAatC;;AAAA;;;;;;;qBDZb;;;;;;wEAEDA,2B,EAA2B;gBAPvC,uDAOuC;iBAP7B;AACTP,oBAAQ,EAAE,2BADD;AAETC,uBAAW,EAAE,wCAFJ;AAGTC,qBAAS,EAAE,CAAC,wCAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAE;AALH,W;AAO6B,U;;;;;;;;;;;UAyE3BqB,wB;;;;;yBAAAA,wB;AAAwB,O;;;cAAxBA,wB;AAAwB,6C;AAAA,gB;AAAA,e;AAAA;AAAA;AAFxB;;;;;;;;wEAEAA,wB,EAAwB;gBAJpC,uDAIoC;iBAJ1B;AACT1B,oBAAQ,EAAE,sBADD;AAET2B,oBAAQ,EAAE;AAFD,W;AAI0B,U;;;UAMxBC,wB;;;;;yBAAAA,wB;AAAwB,O;;;cAAxBA,wB;AAAwB,6C;AAAA,gB;AAAA,e;AAAA;AAAA;AAFxB;;;;;;;;wEAEAA,wB,EAAwB;gBAJpC,uDAIoC;iBAJ1B;AACT5B,oBAAQ,EAAE,sBADD;AAET2B,oBAAQ,EAAE;AAFD,W;AAI0B,U;;;UAMxBE,wB;;;;;yBAAAA,wB;AAAwB,O;;;cAAxBA,wB;AAAwB,6C;AAAA,gB;AAAA,e;AAAA;AAAA;AAFxB;;;;;;;;wEAEAA,wB,EAAwB;gBAJpC,uDAIoC;iBAJ1B;AACT7B,oBAAQ,EAAE,sBADD;AAET2B,oBAAQ,EAAE;AAFD,W;AAI0B,U;;;;;;;;;;;;;;;;;;AEpGriBY;;AACE;;AACF;;;;;;AAFiE;;AAC/D;;AAAA;;;;;;AAIJ;;AAA+C;;AAC/C;;;;;;AAME;;AACE;;AACF;;;;;;AAF+D;;AAC7D;;AAAA;;;;;;AAIJ;;AAA6C;;AAC7C;;;;;;AASA;;AAAyD;;AAAa;;;;;;AACtE;;AAAwD;;AACxD;;;;AD9BV,eAASlJ,2BAAT,GAAoC;AAClC,eAAO,UAACC,OAAD,EAA6D;AAClE,cAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,mBAAO;AAAE,2CAA6B;AAAEA,qBAAK,EAAED,OAAO,CAACC;AAAjB;AAA/B,aAAP;AACD;;AACD,iBAAO,IAAP;AAAa;AACd,SALD;AAMD;;UAaYmJ,qB;AAqBX,uCAAoB9I,EAApB,EAA4C+I,WAA5C,EAA8E3I,YAA9E,EAAiHH,QAAjH,EAA+I+I,QAA/I,EACmBC,SADnB,EACmGpG,IADnG,EAC+HxC,cAD/H,EACuKF,MADvK,EACwL;AAAA;;AADpK,eAAAH,EAAA,GAAAA,EAAA;AAAwB,eAAA+I,WAAA,GAAAA,WAAA;AAAkC,eAAA3I,YAAA,GAAAA,YAAA;AAAmC,eAAAH,QAAA,GAAAA,QAAA;AAA8B,eAAA+I,QAAA,GAAAA,QAAA;AAC5H,eAAAC,SAAA,GAAAA,SAAA;AAAgF,eAAApG,IAAA,GAAAA,IAAA;AAA4B,eAAAxC,cAAA,GAAAA,cAAA;AAAwC,eAAAF,MAAA,GAAAA,MAAA;AAnBvK,eAAA+I,UAAA,GAAa,KAAb;AAGA,eAAAxI,MAAA,GAAS,KAAT;AACA,eAAAJ,SAAA,GAAY,IAAZ;AACS,eAAAC,kBAAA,GAAqB,EAArB;AAKT,eAAAC,IAAA,GAAc,EAAd;AAS0L;;;;qCAE/K;AACT,iBAAKQ,UAAL;AACA,iBAAKC,UAAL;AACD;;;uCAES;AAER,iBAAKC,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAYF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAZ,CAApB;AAEA,iBAAKa,MAAL,GAAc,KAAKW,IAAnB;AAEA,iBAAKqG,UAAL,GAAkB,KAAKhH,MAAL,CAAYiH,MAAZ,IAAsB,QAAtB,GAAiC,KAAjC,GAAyC,IAA3D;AAEA,iBAAK7H,IAAL,GAAY,KAAKtB,EAAL,CAAQuB,KAAR,CAAc;AACxBC,mBAAK,EAAE,CAAC,EAAD,EAAK,CAAC/B,2BAA2B,EAA5B,EAAgC,0DAAWgC,QAA3C,CAAL,CADiB;AAExBC,qBAAO,EAAE,CAAC,EAAD,EAAK,CAACjC,2BAA2B,EAA5B,EAAgC,0DAAWgC,QAA3C,CAAL,CAFe;AAGxBjB,kBAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWiB,QAAZ,CAAL,CAHkB;AAIxBf,oBAAM,EAAE,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B;AAJZ,aAAd,CAAZ;;AAOA,gBAAI,KAAKwI,UAAT,EAAoB;AAClB,mBAAKE,YAAL,CAAkB,KAAKlH,MAAvB;AACD;AACF;;;kCAEO;AAEN,iBAAK+G,SAAL,CAAeI,KAAf;AACD;;;6CACe;AACd,iBAAKJ,SAAL,CAAeI,KAAf;AACD;;;uCAES;AAAA;;AACR,gBAAIpH,UAAU,GAAG,KAAKX,IAAL,CAAU3B,KAA3B;AACA,iBAAKa,IAAL,CAAU4F,IAAV,CAAenE,UAAU,CAACzB,IAA1B;AACA,gBAAM0B,MAAM,GAAQ;AAElBrC,iBAAG,EAAGoC,UAAU,CAACzB,IAFC;AAGlB8B,sBAAQ,EAACL,UAAU,CAACT,KAAX,CAAiBe,EAHR;AAIlB7B,oBAAM,EAAI,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B,GAJpB;AAKlB8B,wBAAU,EAAG,KAAKtB,YAAL,CAAkBuB;AALb,aAApB;;AAOA,gBAAI,KAAKyG,UAAT,EAAoB;AACpBhH,oBAAM,CAACK,EAAP,GAAY,KAAKL,MAAL,CAAYW,IAAZ,CAAiBN,EAA7B,EACAL,MAAM,CAACoH,SAAP,GAAmB,KAAKpI,YAAL,CAAkBuB,MADrC;AAED,aAHC,MAGI;AACJP,oBAAM,CAACM,UAAP,GAAoB,KAAKtB,YAAL,CAAkBuB,MAAtC;AACD;;AAEC,gBAAI,KAAKyG,UAAT,EAAoB;AACpB,mBAAK9I,YAAL,CAAkBmJ,qBAAlB,CAAwCrH,MAAxC,EAAgDS,SAAhD,CACE,UAAC6G,QAAD,EAAiB;AACf,oBAAGA,QAAQ,CAAC9I,MAAT,IAAmB,IAAtB,EAA2B;AAC1B,wBAAI,CAACT,QAAL,CAAc6B,IAAd,CAAmB,gCAAnB,EAAqD,SAArD,EAAgE;AAAEE,4BAAQ,EAAE;AAAZ,mBAAhE;;AACA,wBAAI,CAAC7B,MAAL,CAAYkI,QAAZ,CAAqB,CAAC,wCAAD,CAArB;AAEA,iBAJD,MAIM;AACL,sBAAGmB,QAAQ,CAAC9F,QAAT,IAAqB,sBAAxB,EAA+C;AAC7C,0BAAI,CAAEC,QAAN,GAAiB6F,QAAQ,CAAC5F,OAA1B;;AACA,wBAAIC,KAAK,GAAG,MAAI,CAAEF,QAAN,CAAeG,WAAf,CAA2B,GAA3B,CAAZ;;AAEA,0BAAI,CAACC,QAAL,GAAgB,MAAI,CAAEJ,QAAN,CAAeK,SAAf,CAAyBH,KAAK,GAAC,CAA/B,CAAhB;;AACA,wBAAG,MAAI,CAACE,QAAL,IAAiB,YAApB,EAAkC;AAChC,4BAAI,CAAC9D,QAAL,CAAc6B,IAAd,CAAmB,kFAAgBmC,iBAAnC,EAAsD,SAAtD,EAAiE;AAAEjC,gCAAQ,EAAE;AAAZ,uBAAjE;AACD;AAEF,mBATD,MASK;AACH,0BAAI,CAAC/B,QAAL,CAAc6B,IAAd,CAAmB0H,QAAQ,CAAC5F,OAA5B,EAAqC,SAArC,EAAgD;AAAE5B,8BAAQ,EAAE;AAAZ,qBAAhD;AACD,mBAZI,CAaN;;AACC;AAGD,eAvBJ,EAwBG,UAACkC,GAAD,EAAO;AACL,sBAAI,CAACjE,QAAL,CAAc6B,IAAd,CAAmB,kBAAnB,EAAuC,SAAvC,EAAkD;AAAEE,0BAAQ,EAAE;AAAZ,iBAAlD;AACD,eA1BJ;AA4BD,aA7BC,MA6BG,CAGJ;;AAEC,iBAAKiH,SAAL,CAAeI,KAAf,CAAqBnH,MAArB;AACD;;;0CAEeZ,I,EAAiB;AAC/B,mBAAOA,IAAI,CAAC6C,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,UAA3B,IACH,wBADG,GAEH9C,IAAI,CAAC6C,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,OAA3B,IACA,mBADA,GAEA,EAJJ;AAKD;;;uCAEYlC,M,EAAM;AACjB,gBAAIuH,MAAM,GAAGvH,MAAM,CAACW,IAAP,CAAYP,QAAzB;AACA,iBAAKhB,IAAL,CAAU6C,GAAV,CAAc,SAAd,EAAyBsB,QAAzB,CAAkCvD,MAAM,CAACW,IAAP,CAAY4B,IAA9C;AACA,iBAAKnD,IAAL,CAAU6C,GAAV,CAAc,OAAd,EAAuBsB,QAAvB,CAAgCvD,MAAM,CAACW,IAAP,CAAY6G,UAA5C;AACA,iBAAKpI,IAAL,CAAU6C,GAAV,CAAc,MAAd,EAAsBsB,QAAtB,CAA+BvD,MAAM,CAACW,IAAP,CAAYhD,GAA3C,EAJiB,CAKjB;;AAEA,iBAAKa,MAAL,GAAcwB,MAAM,CAACW,IAAP,CAAYnC,MAAZ,IAAsB,GAAtB,GAA4B,IAA5B,GAAmC,KAAjD;AACD;;;uCAGY2D,K,EAAK;AAChB,iBAAK3D,MAAL,GAAc2D,KAAK,CAACC,OAApB;AACA,iBAAKC,GAAL,CAASD,OAAT,GAAmB,KAAK5D,MAAxB;AACD;;;uCAES;AAAA;;AACR,iBAAKL,cAAL,CAAoBqF,aAApB,GAAoC/C,SAApC,CACE,UAACE,IAAD,EAAY;AACV,oBAAI,CAAC8C,SAAL,GAAiB9C,IAAjB;;AACA,kBAAG,MAAI,CAACqG,UAAR,EAAmB;AACjB;AACA,oBAAMlD,QAAQ,GAAG,MAAI,CAACL,SAAL,CAAeM,IAAf,CAAoB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAC3D,EAAF,IAAQ,MAAI,CAACL,MAAL,CAAYW,IAAZ,CAAiB8G,UAA7B;AAAA,iBAArB,CAAjB;;AACA,sBAAI,CAACrI,IAAL,CAAU6C,GAAV,CAAc,SAAd,EAAyBsB,QAAzB,CAAkCO,QAAlC;;AACA,sBAAI,CAACR,kBAAL,CAAwBQ,QAAxB;AAED;;AACD,oBAAI,CAACJ,qBAAL,GAA6B,MAAI,CAACtE,IAAL,CAAU8D,QAAV,CAAmB1D,OAAnB,CAA2B2D,YAA3B,CAC5BC,IAD4B,CAE3B,iEAAU,EAAV,CAF2B,EAG3B,2DAAI,UAAA3F,KAAK;AAAA,uBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAAC8E,IAA9C;AAAA,eAAT,CAH2B,EAI3B,2DAAI,UAAAA,IAAI;AAAA,uBAAIA,IAAI,GAAG,MAAI,CAACoB,cAAL,CAAoBpB,IAApB,CAAH,GAA+B,MAAI,CAACkB,SAA5C;AAAA,eAAR,CAJ2B,CAA7B;AAME,aAhBN,EAgBO,UAACzB,GAAD,EAAO,CAER,CAlBN;AAoBD;;;0CACeG,K,EAAK;AACnB,iBAAKmB,kBAAL,CAAwBnB,KAAxB;AACA,iBAAKO,MAAL,GAAY,EAAZ;AACA,iBAAKtD,IAAL,CAAU6C,GAAV,CAAc,OAAd,EAAuBsB,QAAvB,CAAiC,EAAjC;AACA;;;yCACajB,I,EAAS;AACtB,mBAAOA,IAAI,IAAIA,IAAI,CAACC,IAAb,GAAoBD,IAAI,CAACC,IAAzB,GAAgC,EAAvC;AACD;;;yCACsBA,I,EAAY;AACjC,gBAAMC,WAAW,GAAGD,IAAI,CAACE,WAAL,EAApB;AACA,mBAAO,KAAKgB,SAAL,CAAed,MAAf,CAAsB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACL,IAAP,CAAYE,WAAZ,GAA0BI,QAA1B,CAAmCL,WAAnC,CAAJ;AAAA,aAA5B,CAAP;AACD;;;6CAEkBhD,O,EAAS;AAAA;;AAC1B,iBAAKsD,WAAL,GAAmBtD,OAAO,CAACa,EAA3B;AACA,iBAAKnC,YAAL,CAAkB6E,iBAAlB,CAAoC,KAAKD,WAAzC,EAAsDrC,SAAtD,CACE,UAACuC,SAAD,EAAoB;AAClB,oBAAI,CAACN,MAAL,GAAcM,SAAd;;AACA,kBAAG,MAAI,CAACgE,UAAR,EAAmB;AACjB,oBAAMlD,QAAQ,GAAG,MAAI,CAACpB,MAAL,CAAYqB,IAAZ,CAAiB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAC3D,EAAF,IAAQ,MAAI,CAACL,MAAL,CAAYW,IAAZ,CAAiBP,QAA7B;AAAA,iBAAlB,CAAjB;;AACA,sBAAI,CAAChB,IAAL,CAAU6C,GAAV,CAAc,OAAd,EAAuBsB,QAAvB,CAAgCO,QAAhC;AAED;;AACD,oBAAI,CAACb,mBAAL,GAA2B,MAAI,CAAC7D,IAAL,CAAU8D,QAAV,CAAmB5D,KAAnB,CAAyB6D,YAAzB,CAC1BC,IAD0B,CAEzB,iEAAU,EAAV,CAFyB,EAGzB,2DAAI,UAAA3F,KAAK;AAAA,uBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAAC8E,IAA9C;AAAA,eAAT,CAHyB,EAIzB,2DAAI,UAAAA,IAAI;AAAA,uBAAIA,IAAI,GAAG,MAAI,CAACc,YAAL,CAAkBd,IAAlB,CAAH,GAA6B,MAAI,CAACG,MAA1C;AAAA,eAAR,CAJyB,CAA3B;AAMD,aAdH,EAcK,UAACV,GAAD,EAAS,CAEX,CAhBH;AAkBD;;;uCACYM,I,EAAS;AACpB,mBAAOA,IAAI,IAAIA,IAAI,CAACC,IAAb,GAAoBD,IAAI,CAACC,IAAzB,GAAgC,EAAvC;AACD;;;uCACoBA,I,EAAY;AAC/B,gBAAMC,WAAW,GAAGD,IAAI,CAACE,WAAL,EAApB;AACA,mBAAO,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACL,IAAP,CAAYE,WAAZ,GAA0BI,QAA1B,CAAmCL,WAAnC,CAAJ;AAAA,aAAzB,CAAP;AACD;;;;;;;yBArMUoE,qB,EAAqB,2H,EAAA,yJ,EAAA,2J,EAAA,wI,EAAA,yH,EAAA,sI,EAAA,gEAsB2C,wEAtB3C,C,EAsB0D,gK,EAAA,wH;AAAA,O;;;cAtB/EA,qB;AAAqB,0C;AAAA;AAAA;;;;;;;;;;oFAFtB,CAAC,wDAAD,C;AAAU,iB;AAAA,gB;AAAA,2vD;AAAA;AAAA;AChCtB;;AAA6D;AAAA,qBAAS,IAAAc,gBAAA,EAAT;AAA2B,aAA3B;;AACQ;;AAAK;;AAG1E;;AAAoC;;AAAgB;;AACpD;;AACE;;AACE;;AAEE;;AACE;;AACE;;AAAW;;AAAO;;AAClB;;AACA;;AACE;AAAA,qBAAkB,IAAAhD,eAAA,qBAAlB;AAAsD,aAAtD;;AACA;;;;AAGF;;AACA;;AAA8E;;AAAW;;AACzF;;AAEF;;AACA;;AACE;;AAAW;;AAAK;;AAChB;;AACA;;AACE;;;;AAGF;;AACA;;AAA4E;;AAAW;;AACvF;;AAEF;;AACF;;AAEA;;AACE;;AACE;;AAAW;;AAAI;;AACf;;AAEA;;AACA;;AAEF;;AAEF;;AACA;;AACE;;AACE;AAAA,qBAAU,IAAAG,YAAA,QAAV;AAA8B,aAA9B;;AACA;;AACF;;AACF;;AACA;;AACE;;AAAqE;AAAA,qBAAS,IAAA8C,UAAA,EAAT;AAAqB,aAArB;;AAAuB;;AACzE;;AACnB;;AAAkE;AAAA,qBAAS,IAAAR,KAAA,EAAT;AAAgB,aAAhB;;AAAkB;;AAAM;;AAC5F;;AACF;;AACF;;AACF;;;;;;;;AAtDU;;AAAA;;AAKkF;;AAAA;;AACjC;;AAAA;;AAEhB;;AAAA;;AAKrB;;AAAA;;AAK2D;;AAAA;;AACxB;;AAAA;;AACd;;AAAA;;AAKrB;;AAAA;;AAUA;;AAAA;;AACA;;AAAA;;AAMoE;;AAAA;;AAEhF;;AAAA;;AAI0F;;AAAA;;;;;;;;qBDxBnF;;;;;;wEAGJP,qB,EAAqB;gBARjC,uDAQiC;iBARvB;AACT9B,oBAAQ,EAAE,mBADD;AAETC,uBAAW,EAAE,gCAFJ;AAGTC,qBAAS,EAAE,CAAC,gCAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAK,+DALN;AAMTC,qBAAS,EAAC,CAAC,wDAAD;AAND,W;AAQuB,U;;;;;;;;;;;;;;;;oBAsBoC,oD;qBAAO,wE;;;;;;;;AAZ/C/C,aAAG,EAAE,CAAF;kBAA9B,uDAA8B;mBAApB,e;AAAoB,WAAE;;;;;;;;;;;;;;;;;;;AE9CnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAcO,UAAMuF,gBAAgB,GAAW,CACtC;AAAE7K,YAAI,EAAG,QAAT;AAAmBC,iBAAS,EAAG,wEAA/B;AAA+CC,mBAAW,EAAC,CAAC,4EAAD;AAA3D,OADsC,EAEtC;AAAEF,YAAI,EAAG,MAAT;AAAiBC,iBAAS,EAAG,kEAA7B;AAA2CC,mBAAW,EAAC,CAAC,4EAAD;AAAvD,OAFsC,EAGtC;AAAEF,YAAI,EAAE,EAAR;AAAY8K,kBAAU,EAAE,MAAxB;AAAgCC,iBAAS,EAAE;AAA3C,OAHsC,CAAjC;;;;;;;;;;;;;;;;ACdP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACiBY;;AACE;;AACF;;;;;;AAFiE;;AAC/D;;AAAA;;;;;;AAIJ;;AAA+C;;AAC/C;;;;;;AAOE;;AACE;;AACF;;;;;;AAF+D;;AAC7D;;AAAA;;;;;;AAIJ;;AAA6C;;AAC7C;;;;;;;;AAOE;;AAAmC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACjC;;AACA;;AAAwB;;AAAM;;AAChC;;;;;;AAFE;;AAAA;;;;AD5Bd,eAASvK,2BAAT,GAAoC;AAClC,eAAO,UAACC,OAAD,EAA6D;AAClE,cAAI,OAAOA,OAAO,CAACC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,mBAAO;AAAE,2CAA6B;AAAEA,qBAAK,EAAED,OAAO,CAACC;AAAjB;AAA/B,aAAP;AACD;;AACD,iBAAO,IAAP;AAAa;AACd,SALD;AAMD;;UAcYsK,mB;AAkBX,qCAAoBjK,EAApB,EAA6C+I,WAA7C,EAA+E3I,YAA/E,EAAmHH,QAAnH,EAAkJ+I,QAAlJ,EACSC,SADT,EACuFpG,IADvF,EACoHxC,cADpH,EACoJ;AAAA;;AADhI,eAAAL,EAAA,GAAAA,EAAA;AAAyB,eAAA+I,WAAA,GAAAA,WAAA;AAAkC,eAAA3I,YAAA,GAAAA,YAAA;AAAoC,eAAAH,QAAA,GAAAA,QAAA;AAA+B,eAAA+I,QAAA,GAAAA,QAAA;AACzI,eAAAC,SAAA,GAAAA,SAAA;AAA8E,eAAApG,IAAA,GAAAA,IAAA;AAA6B,eAAAxC,cAAA,GAAAA,cAAA;AAfpH,eAAA6I,UAAA,GAAa,KAAb;AAGA,eAAAxI,MAAA,GAAS,KAAT;AACA,eAAAJ,SAAA,GAAY,IAAZ;AACS,eAAAC,kBAAA,GAAqB,EAArB;AAKT,eAAAC,IAAA,GAAc,EAAd;AAKuJ;;;;qCAE5I;AACT,iBAAKQ,UAAL;AACA,iBAAKC,UAAL;AACD;;;uCAEY;AAEX,iBAAKC,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAX,CAApB;AAEA,iBAAKa,MAAL,GAAc,KAAKW,IAAnB;AAEA,iBAAKqG,UAAL,GAAkB,KAAKhH,MAAL,CAAYiH,MAAZ,IAAsB,QAAtB,GAAiC,KAAjC,GAAyC,IAA3D;AAEA,iBAAK7H,IAAL,GAAY,KAAKtB,EAAL,CAAQuB,KAAR,CAAc;AACxB;AAEAC,mBAAK,EAAE,CAAC,EAAD,EAAK,CAAC/B,2BAA2B,EAA5B,EAAgC,0DAAWgC,QAA3C,CAAL,CAHiB;AAIxBC,qBAAO,EAAE,CAAC,EAAD,EAAK,CAACjC,2BAA2B,EAA5B,EAAgC,0DAAWgC,QAA3C,CAAL,CAJe;AAKxBf,oBAAM,EAAE,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B;AALZ,aAAd,CAAZ;;AAQA,gBAAI,KAAKwI,UAAT,EAAqB;AACnB,mBAAKE,YAAL,CAAkB,KAAKlH,MAAvB;AACD;AACF;;;kCAEO;AAEN,iBAAK+G,SAAL,CAAeI,KAAf;AACD;;;6CACkB;AACjB,iBAAKJ,SAAL,CAAeI,KAAf;AACD;;;uCAEY;AACX,gBAAIpH,UAAU,GAAG,KAAKX,IAAL,CAAU3B,KAA3B;AAEA,gBAAMuC,MAAM,GAAQ;AAElBC,sBAAQ,EAAE,KAAK3B,IAAL,CAAU4B,GAAV,CAAc,UAAAC,CAAC;AAAA,uBAAMA,CAAC,CAACxC,GAAR;AAAA,eAAf,CAFQ;AAGlByC,sBAAQ,EAACL,UAAU,CAACT,KAAX,CAAiBe,EAHR;AAIlB7B,oBAAM,EAAI,KAAKA,MAAL,IAAe,IAAf,GAAsB,GAAtB,GAA4B,GAJpB;AAKlB8B,wBAAU,EAAG,KAAKtB,YAAL,CAAkBuB;AALb,aAApB;;AAQA,gBAAI,KAAKyG,UAAT,EAAqB;AACnBhH,oBAAM,CAACK,EAAP,GAAY,KAAKL,MAAL,CAAYW,IAAZ,CAAiBN,EAA7B,EACEL,MAAM,CAACoH,SAAP,GAAmB,KAAKpI,YAAL,CAAkBuB,MADvC;AAED,aAHD,MAGO;AACLP,oBAAM,CAACM,UAAP,GAAoB,KAAKtB,YAAL,CAAkBuB,MAAtC;AACD,aAhBU,CAkBX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,iBAAKwG,SAAL,CAAeI,KAAf,CAAqBnH,MAArB;AACD;;;0CAEeZ,I,EAAiB;AAC/B,mBAAOA,IAAI,CAAC6C,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,UAA3B,IACH,wBADG,GAEH9C,IAAI,CAAC6C,GAAL,CAAS,OAAT,EAAkBC,QAAlB,CAA2B,OAA3B,IACE,mBADF,GAEE,EAJN;AAKD;;;uCAEYlC,M,EAAQ;AACnB,gBAAIuH,MAAM,GAAGvH,MAAM,CAACW,IAAP,CAAYP,QAAzB;AACA,iBAAKhB,IAAL,CAAU6C,GAAV,CAAc,SAAd,EAAyBsB,QAAzB,CAAkCvD,MAAM,CAACW,IAAP,CAAY4B,IAA9C;AACA,iBAAKnD,IAAL,CAAU6C,GAAV,CAAc,OAAd,EAAuBsB,QAAvB,CAAgCvD,MAAM,CAACW,IAAP,CAAY6G,UAA5C,EAHmB,CAInB;;AACA,iBAAKQ,aAAL,CAAmBT,MAAnB;AAEA,iBAAK/I,MAAL,GAAcwB,MAAM,CAACW,IAAP,CAAYnC,MAAZ,IAAsB,GAAtB,GAA4B,IAA5B,GAAmC,KAAjD;AACD;;;wCACa6B,E,EAAE;AAAA;;AACd,iBAAKnC,YAAL,CAAkBoG,qBAAlB,CAAwCjE,EAAxC,EAA4CI,SAA5C,CACE,UAACuC,SAAD,EAAoB;AAClB,qBAAI,CAAC1E,IAAL,GAAY0E,SAAS,CAACrC,IAAtB;AACD,aAHH,EAGK,UAACqB,GAAD,EAAS,CAEX,CALH;AAOD;;;uCAEYG,K,EAAO;AAClB,iBAAK3D,MAAL,GAAc2D,KAAK,CAACC,OAApB;AACA,iBAAKC,GAAL,CAASD,OAAT,GAAmB,KAAK5D,MAAxB;AACD;;;uCAGS;AAAA;;AACR,iBAAKL,cAAL,CAAoBqF,aAApB,GAAoC/C,SAApC,CACE,UAACE,IAAD,EAAY;AACV,qBAAI,CAAC8C,SAAL,GAAiB9C,IAAjB;;AACA,kBAAG,OAAI,CAACqG,UAAR,EAAmB;AACjB;AACA,oBAAMlD,QAAQ,GAAG,OAAI,CAACL,SAAL,CAAeM,IAAf,CAAoB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAC3D,EAAF,IAAQ,OAAI,CAACL,MAAL,CAAYW,IAAZ,CAAiB8G,UAA7B;AAAA,iBAArB,CAAjB;;AACA,uBAAI,CAACrI,IAAL,CAAU6C,GAAV,CAAc,SAAd,EAAyBsB,QAAzB,CAAkCO,QAAlC;;AACA,uBAAI,CAACR,kBAAL,CAAwBQ,QAAxB;;AACA,uBAAI,CAACJ,qBAAL,GAA6B,OAAI,CAACtE,IAAL,CAAU8D,QAAV,CAAmB1D,OAAnB,CAA2B2D,YAA3B,CAC3BC,IAD2B,CAE1B,iEAAU,EAAV,CAF0B,EAG1B,2DAAI,UAAA3F,KAAK;AAAA,yBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAAC8E,IAA9C;AAAA,iBAAT,CAH0B,EAI1B,2DAAI,UAAAA,IAAI;AAAA,yBAAIA,IAAI,GAAG,OAAI,CAACoB,cAAL,CAAoBpB,IAApB,CAAH,GAA+B,OAAI,CAACkB,SAA5C;AAAA,iBAAR,CAJ0B,CAA7B;AAMD;AAEC,aAhBN,EAgBO,UAACzB,GAAD,EAAO,CAER,CAlBN;AAoBD;;;yCACcM,I,EAAS;AACtB,mBAAOA,IAAI,IAAIA,IAAI,CAACC,IAAb,GAAoBD,IAAI,CAACC,IAAzB,GAAgC,EAAvC;AACD;;;yCACsBA,I,EAAY;AACjC,gBAAMC,WAAW,GAAGD,IAAI,CAACE,WAAL,EAApB;AACA,mBAAO,KAAKgB,SAAL,CAAed,MAAf,CAAsB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACL,IAAP,CAAYE,WAAZ,GAA0BI,QAA1B,CAAmCL,WAAnC,CAAJ;AAAA,aAA5B,CAAP;AACD;;;0CAEeL,K,EAAO;AACrB,iBAAKmB,kBAAL,CAAwBnB,KAAxB;AACA,iBAAKO,MAAL,GAAc,EAAd;AACA,iBAAKtD,IAAL,CAAU6C,GAAV,CAAc,OAAd,EAAuBsB,QAAvB,CAAgC,EAAhC;AACD;;;6CACkB/D,O,EAAS;AAAA;;AAC1B,iBAAKsD,WAAL,GAAmBtD,OAAO,CAACa,EAA3B;AACA,iBAAKnC,YAAL,CAAkB6E,iBAAlB,CAAoC,KAAKD,WAAzC,EAAsDrC,SAAtD,CACE,UAACuC,SAAD,EAAoB;AAClB,qBAAI,CAACN,MAAL,GAAcM,SAAd;;AACA,kBAAG,OAAI,CAACgE,UAAR,EAAmB;AACjB,oBAAMlD,QAAQ,GAAG,OAAI,CAACpB,MAAL,CAAYqB,IAAZ,CAAiB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAAC3D,EAAF,IAAQ,OAAI,CAACL,MAAL,CAAYW,IAAZ,CAAiBP,QAA7B;AAAA,iBAAlB,CAAjB;;AACA,uBAAI,CAAChB,IAAL,CAAU6C,GAAV,CAAc,OAAd,EAAuBsB,QAAvB,CAAgCO,QAAhC;;AACA,uBAAI,CAACb,mBAAL,GAA2B,OAAI,CAAC7D,IAAL,CAAU8D,QAAV,CAAmB5D,KAAnB,CAAyB6D,YAAzB,CAC1BC,IAD0B,CAEzB,iEAAU,EAAV,CAFyB,EAGzB,2DAAI,UAAA3F,KAAK;AAAA,yBAAI,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAAC8E,IAA9C;AAAA,iBAAT,CAHyB,EAIzB,2DAAI,UAAAA,IAAI;AAAA,yBAAIA,IAAI,GAAG,OAAI,CAACc,YAAL,CAAkBd,IAAlB,CAAH,GAA6B,OAAI,CAACG,MAA1C;AAAA,iBAAR,CAJyB,CAA3B;AAMD;AAEF,aAdH,EAcK,UAACV,GAAD,EAAS,CAEX,CAhBH;AAkBD;;;uCACYM,I,EAAS;AACpB,mBAAOA,IAAI,IAAIA,IAAI,CAACC,IAAb,GAAoBD,IAAI,CAACC,IAAzB,GAAgC,EAAvC;AACD;;;uCACoBA,I,EAAY;AAC/B,gBAAMC,WAAW,GAAGD,IAAI,CAACE,WAAL,EAApB;AACA,mBAAO,KAAKC,MAAL,CAAYC,MAAZ,CAAmB,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACL,IAAP,CAAYE,WAAZ,GAA0BI,QAA1B,CAAmCL,WAAnC,CAAJ;AAAA,aAAzB,CAAP;AACD;;;wCACalD,K,EAAO;AAAA;;AACnB;AACA,iBAAKpB,YAAL,CAAkBoG,qBAAlB,CAAwChF,KAAK,CAACe,EAA9C,EAAkDI,SAAlD,CACE,UAACuC,SAAD,EAAoB;AACnB;AACC,qBAAI,CAAC1E,IAAL,GAAY0E,SAAS,CAACrC,IAAtB;AACD,aAJH,EAIK,UAACqB,GAAD,EAAS,CAEX,CANH;AAQD;;;8BACGG,K,EAAwB;AAC1B,gBAAMyB,KAAK,GAAGzB,KAAK,CAACyB,KAApB;AACA,gBAAMnG,KAAK,GAAG0E,KAAK,CAAC1E,KAApB,CAF0B,CAI1B;;AACA,gBAAI,CAACA,KAAK,IAAI,EAAV,EAAcoG,IAAd,EAAJ,EAA0B;AACxB,mBAAKvF,IAAL,CAAU4F,IAAV,CAAe;AAAEvG,mBAAG,EAAEF,KAAK,CAACoG,IAAN;AAAP,eAAf;AACD,aAPyB,CAS1B;;;AACA,gBAAID,KAAJ,EAAW;AACTA,mBAAK,CAACnG,KAAN,GAAc,EAAd;AACD;AACF;;;iCAEM0G,G,EAAQ;AACb,gBAAMxC,KAAK,GAAG,KAAKrD,IAAL,CAAU8F,OAAV,CAAkBD,GAAlB,CAAd;;AAEA,gBAAIxC,KAAK,IAAI,CAAb,EAAgB,CACf;AACA;AACF;;;;;;;yBAzOUoG,mB,EAAmB,2H,EAAA,yJ,EAAA,2J,EAAA,wI,EAAA,yH,EAAA,sI,EAAA,gEAmBiC,wEAnBjC,C,EAmBgD,+J;AAAA,O;;;cAnBnEA,mB;AAAmB,wC;AAAA;AAAA;;;;;;;;;;oFAFnB,CAAC,wDAAD,C;AAAU,iB;AAAA,gB;AAAA,kvD;AAAA;AAAA;ACjCvB;;AAA6D;AAAA,qBAAS,IAAAL,gBAAA,EAAT;AAA2B,aAA3B;;AACQ;;AAAK;;AAG1E;;AAAoC;;AAAgB;;AAClD;;AACE;;AAEE;;AACE;;AACE;;AAAW;;AAAO;;AAClB;;AAEA;;AACE;AAAA,qBAAkB,IAAAhD,eAAA,qBAAlB;AAAsD,aAAtD;;AACA;;;;AAGF;;AACA;;AAA2C;;AAAW;;AACtD;;AAEF;;AACA;;AACE;;AAAW;;AAAK;;AAChB;;AACA;;AACE;AAAA,qBAAkB,IAAAC,aAAA,qBAAlB;AAAoD,aAApD;;AACA;;;;AAGF;;AACA;;AAA2C;;AAAW;;AACtD;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAAY;;AAAU;;AACtB;;AACE;;AAIA;;AAEE;AAAA,qBAAwB,IAAAC,GAAA,QAAxB;AAAmC,aAAnC;;AAFF;;AAGF;;AAEF;;AAEF;;AACA;;AACE;;AACE;AAAA,qBAAU,IAAAC,YAAA,QAAV;AAA8B,aAA9B;;AACA;;AACF;;AACF;;AACA;;AACE;;AAAoD;AAAA,qBAAS,IAAAsC,KAAA,EAAT;AAAgB,aAAhB;;AAAkB;;AAAM;;AAC9E;;AACF;;AACJ;;;;;;;;;;AAzDU;;AAAA;;AAKyE;;AAAA;;AAExB;;AAAA;;AAEhB;;AAAA;;AAKrB;;AAAA;;AAK2D;;AAAA;;AACxB;;AAAA;;AAEd;;AAAA;;AAKrB;;AAAA;;AAQgB;;AAAA;;AAIyB;;AAAA,6FAA4B,+BAA5B,EAA4B,sBAA5B,EAA4B,uBAA5B,EAA4B,aAA5B;;AAS2B;;AAAA;;AAEhF;;AAAA;;;;;;;;qBDxBI;;;;;;wEAGDY,mB,EAAmB;gBAR/B,uDAQ+B;iBARrB;AACTjD,oBAAQ,EAAE,iBADD;AAETC,uBAAW,EAAE,8BAFJ;AAGTC,qBAAS,EAAE,CAAC,8BAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAE,+DALH;AAMTC,qBAAS,EAAE,CAAC,wDAAD;AANF,W;AAQqB,U;;;;;;;;;;;;;;;;oBAmB0B,oD;qBAAO,wE;;;;;;AARnC/C,aAAG,EAAE,CAAF;kBAA9B,uDAA8B;mBAApB,e;AAAoB,WAAE;;;;;;;;;;;;;;;;;;;AE/CnsBwB;;AAA2E;;AACvE;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,aAA1B;AAAuC,WAAvC;;AAA0C;;AAAM;;AAAY;;;;;;;;AACpF;;AACI;;AAAoC;AAAA;;AAAA;;AAAA;AAAA;;AAApC;;AACA;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,aAA1B;AAAuC,WAAvC;;AAA0C;;AAAa;;AAC/E;;;;;;AAFwC;;AAAA;;;;;;AAJ5C;;AACI;;AAEA;;AAIJ;;;;;;AANW;;AAAA;;AAEU;;AAAA;;;;;;AAKrB;;AAAoC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;;;AAIhC;;AAA0E;;AACtE;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,WAA1B;AAAqC,WAArC;;AAAwC;;AAAM;;AAAY;;;;;;;;AAClF;;AACI;;AAAuC;AAAA;;AAAA;;AAAA;AAAA;;AAAvC;;AACA;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,WAA1B;AAAqC,WAArC;;AAAwC;;AAAa;;AAC7E;;;;;;AAF2C;;AAAA;;;;;;AAJ/C;;AACI;;AAEA;;AAIJ;;;;;;AANW;;AAAA;;AAEU;;AAAA;;;;;;AAKrB;;AAAoC;;AAAY;;;;;;AAAZ;;AAAA;;;;;;;;AAOhC;;AAA4E;;AACxE;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,cAA1B;AAAwC,WAAxC;;AAA2C;;AAAM;;AAAY;;;;;;;;AACrF;;AACI;;AAAqC;AAAA;;AAAA;;AAAA;AAAA;;AAArC;;AACA;;AAAoB;AAAA;;AAAA;;AAAA,4CAA0B,cAA1B;AAAwC,WAAxC;;AAA2C;;AAAa;;AAChF;;;;;;AAFyC;;AAAA;;;;;;AAJ7C;;AACI;;AAEA;;AAIJ;;;;;;AANW;;AAAA;;AAEU;;AAAA;;;;;;AAKrB;;AACI;;AAAqB;;;;;;AADU;;AAC/B;;AAAA;;;;;;AAGJ;;AACI;;AAA+B;;AAAM;;AACzC;;;;;;;;AACA;;AACI;;AAA4C;AAAA;;AAAA;;AAAA;;AAAA,sCAAoB,MAApB,EAA0B,WAA1B;AAA0B,WAA1B;;AACjB;;AAAU;;AAAW;;AAChD;;AAA4C;AAAA;;AAAA;;AAAA;;AAAA,sCAAoB,MAApB,EAA0B,WAA1B;AAA0B,WAA1B;;AACjB;;AAAI;;AAAW;;AAE1C;;AAA2C;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACvC;;AAAM;;AACd;;;;;;AAIJ;;;;;;AACA;;;;;;;;UDtDH4F,c;;;AASb;;;;;UAWaC,a;AAiBX,+BAAoBhK,YAApB,EAAuDiK,MAAvD,EACUpK,QADV,EACkC;AAAA;;AAChC;AACA;AAHkB,eAAAG,YAAA,GAAAA,YAAA;AAAmC,eAAAiK,MAAA,GAAAA,MAAA;AAC7C,eAAApK,QAAA,GAAAA,QAAA;AAhBV,eAAAqK,gBAAA,GAA6B,CAAE,OAAF,EAAW,KAAX,EAAiB,QAAjB,EAA0B,QAA1B,CAA7B;AACA,eAAAC,IAAA,GAAO,CAAC,CAAC,YAAD,EAAc,UAAd,EAAyB,SAAzB,CAAD,CAAP;AAQA,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAAC,WAAA,GAAc,KAAd;AACA,eAAAC,YAAA,GAAe,KAAf,CAKkC,CAIhC;AACD;;;;qCAEU;AACT,iBAAKC,WAAL;AACA,iBAAKC,YAAL,GAAoB,IAAIT,cAAJ,EAApB;AACA,iBAAKU,UAAL,GAAkB,gEAAeC,QAAjC;AACA,iBAAK5J,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAYF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAAZ,CAApB;AACD;;;sCAEWgD,K,EAAc;AACxB,gBAAMK,WAAW,GAAIL,KAAK,CAAC0G,MAAN,CAAkCpL,KAAvD;AACA,iBAAKqL,UAAL,CAAgBnG,MAAhB,GAAyBH,WAAW,CAACqB,IAAZ,GAAmBpB,WAAnB,EAAzB;;AAEA,gBAAI,KAAKqG,UAAL,CAAgB3H,SAApB,EAA+B;AAC7B,mBAAK2H,UAAL,CAAgB3H,SAAhB,CAA0B4H,SAA1B;AACD;AACF;;;wCAEU;AAAA;;AACT,iBAAK7K,YAAL,CAAkB8K,qBAAlB,GAA0CvI,SAA1C,CACE,UAACwI,YAAD,EAAoB;AAClB,qBAAI,CAACC,cAAL,GAAsBD,YAAY,CAACtI,IAAnC;;AACA,mBAAI,IAAIwI,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,OAAI,CAACD,cAAL,CAAoBvJ,MAArC,EAA4CwJ,CAAC,EAA7C,EAAgD;AAC9C,oBAAG,OAAI,CAACD,cAAL,CAAoBC,CAApB,EAAuB3K,MAAvB,IAAiC,GAApC,EAAwC;AACtC,yBAAI,CAAC0K,cAAL,CAAoBC,CAApB,EAAuBC,YAAvB,GAAsC,UAAtC;AACD,iBAFD,MAEK;AACH,yBAAI,CAACF,cAAL,CAAoBC,CAApB,EAAuBC,YAAvB,GAAsC,QAAtC;AACD;AAGF;;AACD,qBAAI,CAACN,UAAL,GAAkB,IAAI,0EAAJ,CAAuB,OAAI,CAACI,cAA5B,CAAlB;AACA,qBAAI,CAACJ,UAAL,CAAgB3H,SAAhB,GAA4B,OAAI,CAACA,SAAjC;AACA,qBAAI,CAAC2H,UAAL,CAAgBO,IAAhB,GAAuB,OAAI,CAACA,IAA5B;AACD,aAfH,EAeI,UAACrH,GAAD,EAAO,CACR,CAhBH;AAkBD;;;kCAEM3B,E,EAAE;AAAA;;AAEP,iBAAKiJ,gBAAL,GAAwB,KAAKnB,MAAL,CAAYvI,IAAZ,CAAiB,mHAAjB,EAA6C;AACnE2J,0BAAY,EAAE;AADqD,aAA7C,CAAxB,CAFO,CAMT;;AAEA,iBAAKD,gBAAL,CAAsBE,WAAtB,GAAoC/I,SAApC,CAA8C,UAAAgJ,MAAM,EAAI;AACpD,kBAAKA,MAAL,EACA;AACE,uBAAI,CAACvL,YAAL,CAAkBwL,qBAAlB,CAAwCrJ,EAAxC,EAA4C,OAAI,CAACrB,YAAL,CAAkBuB,MAA9D,EAAsEE,SAAtE,CACE,UAACE,IAAD,EAAY;AACR,sBAAGA,IAAI,CAACnC,MAAL,IAAe,IAAlB,EAAuB;AACrB,2BAAI,CAACiK,WAAL;;AACJ,2BAAI,CAAC1K,QAAL,CAAc6B,IAAd,CAAmB,sBAAnB,EAA0C,SAA1C,EAAoD;AAACE,8BAAQ,EAAC;AAAV,qBAApD;AACG,mBAHD,MAGK;AACH,2BAAI,CAAC2I,WAAL;;AACA,2BAAI,CAAC1K,QAAL,CAAc6B,IAAd,CAAmB,2BAAnB,EAA+C,SAA/C,EAAyD;AAACE,8BAAQ,EAAC;AAAV,qBAAzD;AACD;AAEJ,iBAVH,EAUI,UAACkC,GAAD,EAAO,CAER,CAZH;AAcD;;AACD,qBAAI,CAACsH,gBAAL,GAAwB,IAAxB;AACH,aAnBD;AAoBC;;;qCAGUrC,M,EAAOtG,I,EAAI;AAAA;;AAEpB,gBAAIX,MAAM,GAAG;AACXiH,oBAAM,EAAGA,MADE;AAEXtG,kBAAI,EAAGA,IAFI;AAGXgJ,uBAAS,EAAE,KAHA;AAIXC,wBAAU,EAAE,mBAJD;AAKXL,0BAAY,EAAE;AALH,aAAb;AAQA,gBAAMxC,SAAS,GAAG,KAAKoB,MAAL,CAAYvI,IAAZ,CAAiB,4FAAjB,EAAwC;AACxDiK,mBAAK,EAAE,OADiD;AAExDlJ,kBAAI,EAAEX,MAFkD;AAGxD2J,uBAAS,EAAE,KAH6C;AAIxDC,wBAAU,EAAE,mBAJ4C;AAKxDL,0BAAY,EAAE;AAL0C,aAAxC,CAAlB;AAQAxC,qBAAS,CAACyC,WAAV,GAAwB/I,SAAxB,CAAkC,UAAAgJ,MAAM,EAAI;AAE1C;AACA,qBAAI,CAAChB,WAAL;AACD,aAJD;AAKD;;;qCACUxB,M,EAAOtG,I,EAAM;AAAA;;AACtB,gBAAIX,MAAM,GAAG;AACXiH,oBAAM,EAAGA,MADE;AAEXtG,kBAAI,EAAGA;AAFI,aAAb;AAKA,gBAAMoG,SAAS,GAAG,KAAKoB,MAAL,CAAYvI,IAAZ,CAAiB,sFAAjB,EAAsC;AACtDiK,mBAAK,EAAE,OAD+C;AAEtDlJ,kBAAI,EAAEX,MAFgD;AAGtD4J,wBAAU,EAAE,mBAH0C;AAItDD,uBAAS,EAAE,KAJ2C;AAKtDJ,0BAAY,EAAE;AALwC,aAAtC,CAAlB;AAQAxC,qBAAS,CAACyC,WAAV,GAAwB/I,SAAxB,CAAkC,UAAAgJ,MAAM,EAAI;AAE1C;AACA,qBAAI,CAAChB,WAAL;AACD,aAJD;AAKD;;;2CACgBqB,a,EAAa;AAK5B,gBAAGA,aAAa,IAAI,WAApB,EAAgC;AAC9B,mBAAKxB,SAAL,GAAiB,CAAC,KAAKA,SAAvB;AACA,mBAAKI,YAAL,CAAkB/K,GAAlB,GAAwB,EAAxB;AACD;;AACA,gBAAGmM,aAAa,IAAI,aAApB,EAAkC;AACjC,mBAAKvB,WAAL,GAAmB,CAAC,KAAKA,WAAzB;AACA,mBAAKG,YAAL,CAAkBpJ,KAAlB,GAA0B,EAA1B;AACD;;AACD,gBAAGwK,aAAa,IAAI,cAApB,EAAmC;AACjC,mBAAKtB,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,mBAAKE,YAAL,CAAkBU,YAAlB,GAAiC,EAAjC;AACD;AAED;;;wCAEU;AAET,iBAAKW,YAAL,GAAoB,EAApB;;AACD,iBAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,UAAL,CAAgBkB,YAAhB,CAA6BrK,MAAjD,EAAyDwJ,CAAC,EAA1D,EAA8D;AAC3D,kBAAIc,aAAa,GAAG,KAAKnB,UAAL,CAAgBkB,YAAhB,CAA6Bb,CAA7B,CAApB,CAD2D,CAE5D;AACA;;AACA,kBAAIxI,IAAI,GAAG;AAAC,8BAAasJ,aAAa,CAACzC,UAA5B;AAAuC,4BAAWyC,aAAa,CAACtM,GAAhE;AACC,yBAASsM,aAAa,CAACzC,UADxB;AACmC,2BAAUyC,aAAa,CAACb;AAD3D,eAAX;AAEA,mBAAKW,YAAL,CAAkB7F,IAAlB,CAAuBvD,IAAvB;AACD;;AACA,gBAAMuJ,SAAS,GAAG,2CAAWC,aAAX,CAAyB,KAAKJ,YAA9B,CAAlB;AACE,gBAAMK,QAAQ,GAAkB,2CAAWC,QAAX,EAAhC;AACA,uDAAWC,iBAAX,CAA6BF,QAA7B,EAAuCF,SAAvC,EAAkD,kBAAlD;AACA,2DAAeE,QAAf,EAAyB,uBAAzB,EAdO,CAeT;AACC;AACF;;;sCAEQ;AAAA;;AAER,gBAAIG,GAAG,GAAG,IAAI,4CAAJ,CAAU,CAAE;AAAF,aAAV,CAAV;AAGA,iBAAKR,YAAL,GAAoB,EAApB;;AACA,iBAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,UAAL,CAAgBkB,YAAhB,CAA6BrK,MAAjD,EAAyDwJ,CAAC,EAA1D,EAA8D;AAC5D,kBAAIc,aAAa,GAAG,KAAKnB,UAAL,CAAgBkB,YAAhB,CAA6Bb,CAA7B,CAApB,CAD4D,CAE7D;AACA;;AACA,kBAAIxI,IAAI,GAAE,CAACsJ,aAAa,CAACzC,UAAf,EAA0ByC,aAAa,CAACtM,GAAxC,EAA4CsM,aAAa,CAACb,YAA1D,CAAV;AAEA,mBAAKW,YAAL,CAAkB7F,IAAlB,CAAuBvD,IAAvB;AACD;;AACD,gBAAI6J,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACA,gBAAIC,QAAQ,GAAG,IAAID,KAAJ,EAAf;AACC,gBAAIE,GAAG,GAAG,2CAAV;AACA,gBAAIC,UAAU,GAAG,4CAAjB;AACDF,oBAAQ,CAACC,GAAT,GAAcC,UAAd;AACA,gBAAIC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,cAAX,CAA2B,OAA3B,CAAlB;AACAP,eAAG,CAACG,GAAJ,GAAUA,GAAV;AACAJ,eAAG,CAACS,WAAJ,CAAgB,EAAhB;AACAT,eAAG,CAACU,YAAJ,CAAiB,GAAjB;AACAV,eAAG,CAACS,WAAJ,CAAgB,EAAhB;AAEET,eAAW,CAACW,SAAZ,CAAsB;AACrB7C,kBAAI,EAAE,KAAKA,IADU;AAErB8C,kBAAI,EAAE,KAAKpB,YAFU;AAGrBqB,mBAAK,EAAE,MAHc;AAIrBC,wBAAU,EAAE;AAAEC,yBAAS,EAAE,SAAb;AAAuBC,yBAAS,EAAC,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV;AAAjC,eAJS;AAKrBC,oBAAM,EAAE;AACNC,2BAAW,EAAE,CADP;AAENC,wBAAQ,EAAE;AAFJ,eALa;AAWrBC,oBAAM,EAAE;AAAEC,mBAAG,EAAE;AAAP,eAXa;AAYrBC,yBAAW,EAAE,qBAAAlL,IAAI,EAAI,CACpB,CAboB;AAcrBmL,yBAAW,EAAC,qBAAAnL,IAAI,EAAE;AAChB4J,mBAAG,CAACwB,QAAJ,CAAavB,GAAb,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,EAA1B,EAA8B,CAA9B;AACAD,mBAAG,CAACwB,QAAJ,CAAarB,QAAb,EAAuB,GAAvB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,CAAnC;AAEAH,mBAAG,CAACyB,IAAJ,CAAS,yBAAT,EAAoCzB,GAAG,CAAC0B,QAAJ,CAAaC,QAAb,CAAsBC,QAAtB,KAAmC,CAAvE,EAA0E,EAA1E,EAA8E;AAAEC,uBAAK,EAAE;AAAT,iBAA9E;AAEA7B,mBAAG,CAACU,YAAJ,CAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB;AACAV,mBAAG,CAACS,WAAJ,CAAgB,EAAhB;AACAT,mBAAG,CAAC8B,SAAJ,CAAe9B,GAAG,CAAC+B,MAAJ,CAAW;AAACC,yBAAO,EAAE;AAAV,iBAAX,CAAf;AACAhC,mBAAG,CAACyB,IAAJ,CAAS,iCAAT,EAA2C,EAA3C,EAA8C,GAA9C,EAAkD,IAAlD,EAAuD,EAAvD;AACAzB,mBAAG,CAAC8B,SAAJ,CAAe9B,GAAG,CAAC+B,MAAJ,CAAW;AAACC,yBAAO,EAAE;AAAV,iBAAX,CAAf;AACAhC,mBAAG,CAACU,YAAJ,CAAiB,GAAjB;AACAV,mBAAG,CAACS,WAAJ,CAAgB,CAAhB;AACAT,mBAAG,CAACyB,IAAJ,CAAS,UAASnB,WAAlB,EAA+B,EAA/B,EAAmC,EAAnC;AAEAN,mBAAG,CAACyB,IAAJ,CAAS,kBAAiB,OAAI,CAAChN,YAAL,CAAkBwN,MAA5C,EAAoD,GAApD,EAAyD,EAAzD,EAA4D;AAAEJ,uBAAK,EAAE;AAAT,iBAA5D;AACA7B,mBAAG,GAAG,OAAI,CAACkC,YAAL,CAAkBlC,GAAlB,CAAN;AACD;AA/BoB,aAAtB,EAzBO,CA2DR;;AACAA,eAAG,CAACmC,MAAJ,CAAW,kBAAX,EA5DQ,CA6DR;;AACAnC,eAAG,CAACoC,IAAJ,CAAS,6BAAT;AAED;;;uCACYpC,G,EAAG;AACd,gBAAIqC,OAAO,GAAGrC,GAAG,CAACsC,gBAAJ,EAAd;AACA,gBAAM1D,CAAC,GAAGoB,GAAG,CAAC0B,QAAJ,CAAaY,gBAAb,EAAV;AACAtC,eAAG,CAACU,YAAJ,CAAiB,GAAjB;AACIV,eAAG,CAACS,WAAJ,CAAgB,EAAhB,EAJU,CAKb;;AAEAT,eAAG,CAACyB,IAAJ,CAAS,UAAWc,MAAM,CAAC3D,CAAD,CAAjB,GAAuB,MAAvB,GAAgC2D,MAAM,CAACF,OAAD,CAA/C,EAAyD,MAAI,EAA7D,EAAgE,MAAI,EAApE,EAAuE,IAAvE,EAA4E,IAA5E,EAAiF,OAAjF;AACD,mBAAOrC,GAAP;AAED;;;;;;;yBA3PUrC,a,EAAa,4J,EAAA,oI,EAAA,yI;AAAA,O;;;cAAbA,a;AAAa,iC;AAAA;AAAA;4EASb,wE,EAAc,I;;4EACd,8D,EAAS,I;;;;;;;;;;;;;;;AC/CtB;;AAGK;;AAAsC;AAAA,qBAAS,IAAA6E,WAAA,EAAT;AAAsB,aAAtB;;AACnC;;AAAU;;AAAiB;;AAC7B;;AAAS;;AACT;;AAAsC;AAAA,qBAAS,IAAAC,SAAA,EAAT;AAAoB,aAApB;;AACpC;;AAAU;;AAAc;;AAC1B;;AAEN;;AACA;;AACI;;AAEI;;AACI;;AAEI;;AACI;;AAQA;;AACJ;;AACA;;AACI;;AAQA;;AACJ;;AAIA;;AACI;;AAQA;;AAEJ;;AACA;;AACI;;AAGA;;AASJ;;AAGA;;AACA;;AAIJ;;AAEA;;AACJ;;AACJ;;AACJ;;;;AAjE4C;;AAAA,mGAAyB,eAAzB,EAAyB,gBAAzB,EAAyB,YAAzB,EAAyB,cAAzB;;AAuDR;;AAAA;;AACa;;AAAA;;AAMtB;;AAAA;;;;;;;qBD3CV;;;;;;wEAGJ9E,a,EAAa;gBARzB,uDAQyB;iBARf;AACTpD,oBAAQ,EAAE,UADD;AAETC,uBAAW,EAAE,uBAFJ;AAGTC,qBAAS,EAAE,CAAC,uBAAD,CAHF;AAITC,yBAAa,EAAE,gEAAkBC,IAJxB;AAKTC,sBAAU,EAAK;AALN,W;AAQe,U;;;;;;;;;AASiBhE,mBAAS,EAAE,CAAF;kBAAjD,uDAAiD;mBAAvC,wE,EAAc;AAAC,wBAAQ;AAAT,a;AAAyB,WAAE,C;AAChBkI,cAAI,EAAE,CAAF;kBAAvC,uDAAuC;mBAA7B,8D,EAAS;AAAC,wBAAQ;AAAT,a;AAAoB,WAAE;;;;;;;;;;;;;;;;;;;AEnD5C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AASA,UAAM4D,UAAU,GAAE,CAAC,kHAAD,EAA8B,wEAA9B,EAA+C,kEAA/C,CAAlB;AACA,UAAMC,kBAAkB,GAAE,CAAC,4FAAD,EAAuB,sFAAvB,CAA1B;;UAQaC,oB;;;;;cAAAA;;;;2BAAAA,oB;AAAoB,S;AAAA,kBALrB,CAAC,qEAAD,EAAe,4FAAf,EAA2C,oEAA3C,CAKqB;;;;4HAApBA,oB,EAAoB;AAAA,yBATd,kHASc,EATe,wEASf,EATgC,kEAShC,EARN,4FAQM,EARgB,sFAQhB;AARmC,oBAGvD,qEAHuD,EAGzC,4FAHyC,EAGb,oEAHa;AAQnC,S;AALsC,O;;;;;wEAK1DA,oB,EAAoB;gBANhC,sDAMgC;iBANvB;AACN9P,mBAAO,EAAC,CAAC,qEAAD,EAAe,4FAAf,EAA2C,oEAA3C,CADF;AAEN+P,wBAAY,EAAG,CAACH,UAAD,EAAYC,kBAAZ,CAFT;AAGNG,2BAAe,EAAG,CAACH,kBAAD;AAHZ,W;AAMuB,U","file":"manage-state-pin-manage-state-pin-module-es5.js","sourcesContent":["import { NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ManageStatePinCrudComponent } from './manage-state-pin-crud/manage-state-pin-crud.component';\r\nimport { TABS_DEMO_ROUTES } from './manage-state-pin-crud/routes';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\nconst routes : Routes = [\r\n    {\r\n        path : '',component : ManageStatePinCrudComponent,canActivate: [AuthGuard], children : TABS_DEMO_ROUTES\r\n    }\r\n    \r\n]\r\n\r\n@NgModule({\r\n    imports : [RouterModule.forChild(routes)],\r\n    exports : [RouterModule]\r\n})\r\n\r\nexport class ManageStatePinRoutingModule{}","import { ChangeDetectorRef, Component, OnInit,ViewChild } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup,FormControl,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport { MasterService } from 'app/shared/services/master/master.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { DatePipe } from '@angular/common';\r\nimport {CityService} from 'app/shared/services/geographics/city.service';\r\nimport{StateService} from 'app/shared/services/geographics/state.service';\r\nimport {CountryService} from 'app/shared/services/geographics/country.service';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport {MatChipInputEvent} from '@angular/material/chips';\r\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\r\nimport * as XLSX from 'xlsx';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ExcelService} from 'app/shared/services/excel.service'\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n} \r\nexport interface PIN {\r\n  PIN: string;\r\n}\r\nexport class PinData {\r\n  //SERIAL_No: string;\r\n  PIN: string = \"\";\r\n  remarks:string = \"\";\r\n  }\r\n\r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\nexport class CreateComponent implements OnInit {\r\n  form: FormGroup;\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n  pins: PIN[] = [];\r\n  preSelectedPins:PIN[] = [];\r\n  localStorage : any;\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  status = false;\r\n  states :any;\r\n  filteredOptionState: Observable<any[]>;\r\n  countries :any;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  countrty_id:any;\r\n  errorMsg:String;\r\n  splitted:String;\r\n  mappedColumns: string[] = ['PIN','remarks'];\r\nmappedDataSource :MatTableDataSource<PinData>;\r\nunmappedColumns: string[] = ['PIN','remarks'];\r\nreturnDataStatus :boolean = false;\r\n@ViewChild('mappedPaginator') mappedPaginator: MatPaginator;\r\n@ViewChild('unmappedPaginator') unmappedPaginator: MatPaginator;\r\nresponse_mapped =[];\r\n  response_unmapped = [];\r\nunmappedDataSource :MatTableDataSource<PinData>;\r\n  constructor(private fb: FormBuilder,\r\n    private snackBar: MatSnackBar,private cdr :ChangeDetectorRef,\r\n    private router : Router,public stateService: StateService,public countryService:CountryService) {\r\n     \r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n    // this.getState();\r\n   this.getCountry();\r\n   \r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.form = this.fb.group({\r\n     // name:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n     \r\n      state :['',[autocompleteObjectValidator(),Validators.required]],\r\n      country :['',[autocompleteObjectValidator(),Validators.required]],\r\n      status : this.status == true ? 'Y' : 'N'\r\n     });\r\n  \r\n   \r\n \r\n  }\r\n \r\n  onSubmit(formDirective){\r\n    if (this.form.invalid){\r\n      return;\r\n    }else{\r\n      if(this.pins.length<=0){\r\n        this.snackBar.open(MessageConstant.pinError, 'Dismiss', { duration: 5000 });\r\n      }\r\n      else{\r\n        let formValues = this.form.value;\r\n        ////\r\n    \r\n        \r\n        let params = {\r\n          //name :formValues.name, \r\n          PIN_data: this.pins.map(v => ( v.PIN)),\r\n          state_id:formValues.state.id,\r\n          status :  this.status == true ? 'Y' : 'N', \r\n          created_by : this.localStorage.userId \r\n        }\r\n    \r\n        \r\n        this.stateService.createStatePINMapping(params).subscribe(\r\n          (resp:any )=>{\r\n           if(resp.status == true){\r\n            this.snackBar.open('State Pin mapping successfully!', 'Dismiss', { duration: 5000 });\r\n            //this.router.navigate(['/manageGeographics/manageStatePin/list']);\r\n            this.response_mapped = resp.data[0].PIN_mapped;\r\n            this.response_unmapped = resp.data[0].PIN_not_mapped;\r\n            formDirective.resetForm();\r\n            this.form.reset();\r\n            this.pins=[];\r\n            this.returnDataStatus = true;\r\n            this.getCountry();\r\n            this.form.markAsPristine();\r\n            if (this.response_mapped.length<0){\r\n            }else{\r\n                 this.cdr.detectChanges();\r\n                  this.mappedDataSource = new MatTableDataSource(this.response_mapped);\r\n                this.mappedDataSource.paginator = this.mappedPaginator;\r\n            }\r\n            if (this.response_unmapped.length<0){\r\n            }else{\r\n              this.cdr.detectChanges();\r\n                  this.unmappedDataSource = new MatTableDataSource(this.response_unmapped);\r\n                  this.unmappedDataSource.paginator = this.unmappedPaginator;\r\n            }\r\n            this.snackBar.open(MessageConstant.statePinMapped, 'Dismiss', { duration: 5000 });\r\n           } else{\r\n             \r\n            if(resp.err_code == \"ERROR : ER_DUP_ENTRY\"){\r\n              this. errorMsg = resp.message;\r\n              var index=  this. errorMsg.lastIndexOf(\" \");\r\n             \r\n              this.splitted = this. errorMsg.substring(index+1); \r\n              if(this.splitted == \"'state_id'\" ){\r\n                this.snackBar.open(MessageConstant.nameDuplicateCity, 'Dismiss', { duration: 5000 });\r\n              }\r\n             \r\n            }else{\r\n              this.snackBar.open(resp.message, 'Dismiss', { duration: 5000 });\r\n            }\r\n           // this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n           }\r\n          \r\n    \r\n          },\r\n          (err)=>{\r\n            this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n          }\r\n        )\r\n      }\r\n      \r\n    }\r\n   \r\n\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n  // getState(){\r\n  //   this.stateService.getAllState().subscribe(\r\n  //     (data:any)=>{\r\n  //       this.states = data;\r\n  //        this.filteredOptionState = this.form.controls.state.valueChanges\r\n  //          .pipe(\r\n  //            startWith(''),\r\n  //            map(value => typeof value === 'string' ? value : value.name),\r\n  //            map(name => name ? this._filterState(name) : this.states)\r\n  //          );\r\n  //        },(err)=>{\r\n           \r\n  //        }\r\n  //   )\r\n  // }\r\n  displayState(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterState(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.states.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  getStatesByCountry(country){\r\n    this.countrty_id = country.id;\r\n    this.stateService.getStateByCountry(this.countrty_id).subscribe(\r\n      (stateData:any)=>{\r\n        this.states = stateData;\r\n         this.filteredOptionState = this.form.controls.state.valueChanges\r\n           .pipe(\r\n             startWith(''),\r\n             map(value => typeof value === 'string' ? value : value.name),\r\n             map(name => name ? this._filterState(name) : this.states)\r\n           );\r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  \r\n  onCountryChange(event){\r\n   this.getStatesByCountry(event);\r\n   this.states=[];\r\n   this.form.get('state').setValue( \"\");\r\n  }\r\n  getCountry(){\r\n    this.countryService.getAllCountry().subscribe(\r\n      (data:any)=>{\r\n        this.countries = data;\r\n         this.filteredOptionCountry = this.form.controls.country.valueChanges\r\n           .pipe(\r\n             startWith(''),\r\n             map(value => typeof value === 'string' ? value : value.name),\r\n             map(name => name ? this._filterCountry(name) : this.countries)\r\n           );\r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  displayCountry(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCountry(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.countries.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    // Add our fruit\r\n    if ((value || '').trim()) {\r\n      const toSelect = this.preSelectedPins.find(c => c.PIN == value.trim());\r\n      if(toSelect == null || toSelect == undefined){\r\n        this.pins.push({PIN: value.trim()});\r\n      }else{\r\n        \r\n      }\r\n      \r\n    }\r\n\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\r\n\r\n  remove(pin: PIN): void {\r\n    const index = this.pins.indexOf(pin);\r\n\r\n    if (index >= 0) {\r\n      this.pins.splice(index, 1);\r\n    }\r\n  }\r\n  onStateChange(state){\r\n    this.stateService.allActivePINByStateId(state.id).subscribe(\r\n      (stateData:any)=>{\r\n          this.preSelectedPins = stateData.data;\r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","<div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n\t<form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n\t\tfxFlex=\"1 0 auto\" name=\"form\" #formDirective=\"ngForm\" (submit)=\"onSubmit(formDirective)\" (keydown.enter)=\"$event.preventDefault()\">\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>Country</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"country\" autocomplete=\"off\" [matAutocomplete]=\"countryAuto\"\r\n\t\t\t\t\trequired>\r\n\t\t\t\t<mat-autocomplete #countryAuto=\"matAutocomplete\" [displayWith]=\"displayCountry\"\r\n\t\t\t\t\t(optionSelected)='onCountryChange($event.option.value)'>\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionCountry | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select country\">expand_more</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('country').invalid\">Please select country\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n\t\t\t\t<mat-label>State</mat-label>\r\n\t\t\t\t<input type=\"text\" matInput formControlName=\"state\" autocomplete=\"off\" [matAutocomplete]=\"stateAuto\"\r\n\t\t\t\t\trequired>\r\n\t\t\t\t<mat-autocomplete #stateAuto=\"matAutocomplete\" [displayWith]=\"displayState\"\r\n\t\t\t\t(optionSelected)='onStateChange($event.option.value)'>\r\n\t\t\t\t\t<mat-option *ngFor=\"let option of filteredOptionState | async\" [value]=\"option\">\r\n\t\t\t\t\t\t{{option.name}}\r\n\t\t\t\t\t</mat-option>\r\n\t\t\t\t</mat-autocomplete>\r\n\t\t\t\t\t<mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select state\">expand_more</mat-icon>\r\n\t\t\t\t<mat-error *ngIf=\"form.get('state').invalid\">Please select state\r\n\t\t\t\t</mat-error>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\t\t<div class=\"row\" style=\"padding-bottom: 10px;\">\r\n\t\t\t<div fxFlex=\"100\">\r\n\t\t\t\t<mat-chip-list class=\"example-chip\" cdkDropList cdkDropListOrientation=\"horizontal\">\r\n  \t\t\t\t\t<mat-chip  class=\"example-box\" cdkDrag *ngFor=\"let pindata of preSelectedPins\">\r\n    \t\t\t\t\t{{pindata.PIN}}\r\n  \t\t\t\t\t</mat-chip>\r\n\t\t\t\t</mat-chip-list>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-form-field appearance=\"outline\" fxFlex=\"100\" class=\"pr-4\">\r\n\t\t\t\t<mat-label> Pin Number</mat-label>\r\n\t\t\t\t<mat-chip-list #chipList aria-label=\"Pin selection\">\r\n\t\t\t\t\t<mat-chip *ngFor=\"let pin of pins\" (removed)=\"remove(pin)\">\r\n\t\t\t\t\t  {{pin.PIN}}\r\n\t\t\t\t\t\t<mat-icon matChipRemove>cancel</mat-icon>\r\n\t\t\t\t\t</mat-chip>\r\n\t\t\t\t\t<input placeholder=\"New Pin code...\"\r\n\t\t\t\t\t\t   type=\"number\"\r\n\t\t\t\t\t\t   [matChipInputFor]=\"chipList\"\r\n\t\t\t\t\t\t   max=\"6\"\r\n\t\t\t\t\t\t   min=\"6\"\r\n\t\t\t\t\t\t   [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n\t\t\t\t\t\t   [matChipInputAddOnBlur]=\"addOnBlur\"\r\n\t\t\t\t\t\t   (matChipInputTokenEnd)=\"add($event)\">\r\n\t\t\t\t  </mat-chip-list>\r\n\t\t\t\t\r\n\t\t\t</mat-form-field>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n\t\t\t<mat-slide-toggle fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n\t\t\t\t(change)=\"updateStatus($event)\" #toggleElement>\r\n\t\t\t\t{{status ? 'Active' : 'Inactive'}}\r\n\t\t\t</mat-slide-toggle>\r\n\t\t</div>\r\n\t\t<div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n\t\t\t<button mat-raised-button color=\"primary\" class=\"mr-8\">Save</button>\r\n\t\t\t<button mat-raised-button color=\"warn\" class=\"mr-8\" type=\"button\"\r\n\t\t\t\trouterLink=\"/manageGeographics/manageStatePin/list\">Cancel</button>\r\n\t\t</div>\r\n\t</form>\r\n\t<div *ngIf=\"returnDataStatus\" class=\"mat-card p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n\tstyle=\"padding-top:20px\">\r\n\t<div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\r\n\t  <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n\t\t<div style=\"margin-bottom: 12px;\">\r\n\t\t  <span style=\"font-size:16px;\">Charger Mapped</span> &nbsp;&nbsp;\r\n\t\t  <img (click)=\"mappedTableExport()\" src=\"/assets/images/excel_icon.png\" width=\"24px\" height=\"auto\"\r\n\t\t\tstyle=\"cursor:pointer\" />\r\n\t\t  <!-- <span class=\"material-icons\"  (click)=\"mappedTableExport()\" >\r\n\t\t\t  download_for_offline\r\n\t\t\t  </span> -->\r\n\r\n\r\n\t\t</div>\r\n\t\t<div id=\"mapTable\">\r\n\t\t  <mat-table #mappedTable [dataSource]=\"mappedDataSource\" [cdkTable]=\"mappedTable\" class=\"mat-elevation-z2\">\r\n\r\n\t\t\t<ng-container matColumnDef=\"PIN\">\r\n\t\t\t  <mat-header-cell mat-header-cell *matHeaderCellDef>Pins</mat-header-cell>\r\n\t\t\t  <mat-cell mat-cell *matCellDef=\"let element\">{{ element.PIN }}</mat-cell>\r\n\t\t\t</ng-container>\r\n\t\t\t<ng-container matColumnDef=\"remarks\">\r\n\t\t\t  <mat-header-cell mat-header-cell *matHeaderCellDef>Remarks </mat-header-cell>\r\n\t\t\t  <mat-cell mat-cell *matCellDef=\"let element\">{{ element.remarks }}</mat-cell>\r\n\t\t\t</ng-container>\r\n\t\t\t<mat-header-row mat-header-row *matHeaderRowDef=\"mappedColumns\"></mat-header-row>\r\n\t\t\t<mat-header-row mat-row *matRowDef=\"let row; columns: mappedColumns;\"></mat-header-row>\r\n\r\n\t\t  </mat-table>\r\n\t\t  <mat-paginator #mappedPaginator [pageSize]=\"5\" [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n\t\t</div>\r\n\t  </div>\r\n\t  <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\r\n\t\t<div style=\"margin-bottom: 12px;\">\r\n\t\t  <span style=\"font-size:16px;\">Charger not Mapped</span> &nbsp;&nbsp;\r\n\t\t  <img (click)=\"unmappedTableExport()\" src=\"/assets/images/excel_icon.png\" width=\"24px\" height=\"auto\"\r\n\t\t\tstyle=\"cursor:pointer\" />\r\n\t\t  <!-- <span class=\"material-icons\"   >\r\n\t\t\t  download_for_offline\r\n\t\t\t</span> -->\r\n\r\n\t\t</div>\r\n\r\n\t\t<div>\r\n\t\t  <mat-table #unmappedTable [dataSource]=\"unmappedDataSource\" [cdkTable]=\"unmappedTable\"\r\n\t\t\tclass=\"mat-elevation-z2\">\r\n\r\n\t\t\t<ng-container matColumnDef=\"PIN\">\r\n\t\t\t  <mat-header-cell mat-header-cell *matHeaderCellDef>Pins </mat-header-cell>\r\n\t\t\t  <mat-cell mat-cell *matCellDef=\"let element\">{{ element.PIN }}</mat-cell>\r\n\t\t\t</ng-container>\r\n\t\t\t<ng-container matColumnDef=\"remarks\">\r\n\t\t\t  <mat-header-cell mat-header-cell *matHeaderCellDef>Remarks </mat-header-cell>\r\n\t\t\t  <mat-cell mat-cell *matCellDef=\"let element\">{{ element.remarks }}</mat-cell>\r\n\t\t\t</ng-container>\r\n\t\t\t<mat-header-row mat-header-row *matHeaderRowDef=\"unmappedColumns\"></mat-header-row>\r\n\t\t\t<mat-header-row mat-row *matRowDef=\"let row; columns: unmappedColumns;\"></mat-header-row>\r\n\r\n\t\t  </mat-table>\r\n\t\t  <mat-paginator #unmappedPaginator [pageSize]=\"5\" [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n\t\t</div>\r\n\t  </div>\r\n\t</div>\r\n  </div>\r\n</div>","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { UtilityService } from 'app/shared/services/utility/utility.service';\r\n/**\r\n * @title Basic use of the tab group\r\n */\r\n@Component({\r\n  selector: 'app-manage-state-pin-crud',\r\n  templateUrl: './manage-state-pin-crud.component.html',\r\n  styleUrls: ['./manage-state-pin-crud.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations\r\n})\r\nexport class ManageStatePinCrudComponent implements OnInit {\r\n\r\n  tabLinks = [\r\n    // { label: 'Manage State Pin', link: 'list' },\r\n    // { label: 'Add New', link: 'create' }\r\n  ];\r\n  menuArray: any;\r\n  localStorage: any;\r\n  objectData: any;\r\n  objectChildData: any;\r\n  tempLinks = [];\r\n\r\n  constructor(private router: Router, private cdr: ChangeDetectorRef, private _utilityService: UtilityService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n    let nav_list = this.localStorage.nav_list_with_tab;\r\n    nav_list.filter((x) => {\r\n      if (x.id === \"manageGeographics\") {\r\n        this.objectData = x;\r\n        if (this.objectData.children != null && this.objectData.children != undefined) {\r\n          this.objectData.children.filter((y) => {\r\n            if (y.id === \"manageStatePin\") {\r\n              this.objectChildData = y;\r\n              let isDefaultRoutePermeted = false;\r\n              if (this.objectChildData.children != null && this.objectChildData.children != undefined) {\r\n                this.objectChildData.children.filter((z) => {\r\n                  if (z.id === \"manageStatePin\") {\r\n                    isDefaultRoutePermeted = true;\r\n                    this.tempLinks.push({ label: 'Manage State Pin', link: 'list' });\r\n                  }\r\n                  if (z.id === \"addNew\") {\r\n                    this.tempLinks.push({ label: 'Add New', link: 'create' });\r\n                  }\r\n                });\r\n              }\r\n\r\n              this.tabLinks = this.tempLinks;\r\n              if (!isDefaultRoutePermeted) {\r\n                this.router.navigate(['/manageGeographics/manageStatePin/' + this.tempLinks[0].link]);\r\n              }\r\n\r\n            }\r\n\r\n          });\r\n        }\r\n\r\n      }\r\n    });\r\n  }\r\n  ngAfterViewInit() {\r\n    this._utilityService.activeMenuItems$.subscribe(menuItemSelecte => {\r\n      this.menuArray = menuItemSelecte;\r\n      if (this.menuArray == null || this.menuArray == undefined || this.menuArray.title == null || this.menuArray.title == undefined) {\r\n        this.menuArray = JSON.parse(localStorage.getItem('activeMenuItems'));\r\n      }\r\n      this.cdr.detectChanges();\r\n    })\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'sunny-routed-content',\r\n  template: 'Having a lot of light from the sun.',\r\n})\r\nexport class SunnyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'rainy-routed-content',\r\n  template: 'A rainy period of time is one when it rains a lot',\r\n})\r\nexport class RainyTabContentComponent { }\r\n\r\n@Component({\r\n  selector: 'foggy-routed-content',\r\n  template: 'If the weather is foggy, there is fog',\r\n})\r\nexport class FoggyTabContentComponent { }\r\n","<div style=\"display: block;width: 100%;\">\r\n  <div id=\"\" class=\"page-layout simple right-sidebar\" fxLayout=\"row\">\r\n\r\n    <!-- CENTER -->\r\n    <div class=\"center\" fusePerfectScrollbar>\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header accent px-24 pt-16 pb-0\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n                <span class=\"mat-display-1 my-0 my-sm-24 welcome-message\"\r\n                      [@animate]=\"{value:'*',params:{x:'50px'}}\">{{menuArray?.title}}\r\n                </span>\r\n\r\n                <!--button mat-icon-button class=\"sidebar-toggle mr-8\" fxHide.gt-md\r\n                        (click)=\"toggleSidebar('project-dashboard-right-sidebar-1')\">\r\n                    <mat-icon>menu</mat-icon>\r\n                </button-->\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n<nav mat-tab-nav-bar aria-label=\"weather navigation links\">\r\n    <a mat-tab-link\r\n       *ngFor=\"let tabLink of tabLinks; let i = index\"\r\n       [routerLink]=\"tabLink.link\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{tabLink.label}}\r\n    </a>\r\n  </nav>\r\n  <router-outlet ></router-outlet>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators,FormControl,ValidatorFn,AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport {CityService} from 'app/shared/services/geographics/city.service';\r\nimport{StateService} from 'app/shared/services/geographics/state.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MessageConstant} from 'app/shared/utils/message.constant';\r\nimport { CountryService } from 'app/shared/services/geographics/country.service';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n} \r\nexport interface PIN {\r\n  PIN: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-action-dialog',\r\n  templateUrl: './action-dialog.component.html',\r\n  styleUrls: ['./action-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations,\r\n  providers:[DatePipe]\r\n})\r\nexport class ActionDialogComponent implements OnInit {\r\n\r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage : any;\r\n  status = false;\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes = [] as const;\r\n\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  states :any;\r\n  countrty_id: any;\r\n  pins: PIN[] = [];\r\n\r\n  filteredOptionState: Observable<any[]>;\r\n  countries: any;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  errorMsg:String;\r\n  splitted:String;\r\n \r\n  constructor(private fb: FormBuilder,private cityService: CityService, private stateService:StateService, private snackBar: MatSnackBar,private datePipe: DatePipe,\r\n              public dialogRef: MatDialogRef<ActionDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData,private countryService: CountryService, private router : Router) {}\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n    this.getCountry();\r\n  }\r\n\r\n  initialize(){\r\n\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n    \r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      state: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      country: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      pins: ['', [Validators.required]],\r\n      status: this.status == true ? 'Y' : 'N'\r\n     });\r\n\r\n    if (this.isEditMode){\r\n      this.assignValues(this.params);\r\n    }\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel(){\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onYesClick(){\r\n    let formValues = this.form.value;\r\n    this.pins.push(formValues.pins);\r\n    const params: any = {\r\n\r\n      PIN:  formValues.pins,\r\n      state_id:formValues.state.id,\r\n      status :  this.status == true ? 'Y' : 'N', \r\n      created_by : this.localStorage.userId \r\n  }\r\n    if (this.isEditMode){\r\n    params.id = this.params.data.id,\r\n    params.modify_by = this.localStorage.userId;\r\n  } else{\r\n    params.created_by = this.localStorage.userId;\r\n  }\r\n\r\n    if (this.isEditMode){\r\n    this.stateService.updateStatePinMapping(params).subscribe(\r\n      (cityData:any )=>{\r\n        if(cityData.status == true){\r\n         this.snackBar.open('State Pin Update successfully!', 'Dismiss', { duration: 5000 });\r\n         this.router.navigate(['/manageGeographics/manageStatePin/list']);\r\n\r\n        } else{\r\n         if(cityData.err_code == \"ERROR : ER_DUP_ENTRY\"){\r\n           this. errorMsg = cityData.message;\r\n           var index=  this. errorMsg.lastIndexOf(\" \");\r\n          \r\n           this.splitted = this. errorMsg.substring(index+1); \r\n           if(this.splitted == \"'state_id'\" ){\r\n             this.snackBar.open(MessageConstant.nameDuplicateCity, 'Dismiss', { duration: 5000 });\r\n           }\r\n          \r\n         }else{\r\n           this.snackBar.open(cityData.message, 'Dismiss', { duration: 5000 });\r\n         }\r\n        // this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n        }\r\n       \r\n \r\n       },\r\n       (err)=>{\r\n         this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n       }\r\n    )\r\n  }else{\r\n    \r\n\r\n  }\r\n\r\n    this.dialogRef.close(params);\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n\r\n  assignValues(params){\r\n    let sta_id = params.data.state_id;\r\n    this.form.get('country').setValue(params.data.name);\r\n    this.form.get('state').setValue(params.data.state_name);\r\n    this.form.get('pins').setValue(params.data.PIN);\r\n    //this.setDefaultPin(sta_id);\r\n    \r\n    this.status = params.data.status == 'Y' ? true : false;\r\n  }\r\n  \r\n\r\n  updateStatus(event){\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n  \r\n  getCountry(){\r\n    this.countryService.getAllCountry().subscribe(\r\n      (data:any)=>{\r\n        this.countries = data;\r\n        if(this.isEditMode){\r\n          //;\r\n          const toSelect = this.countries.find(c => c.id == this.params.data.country_id);\r\n          this.form.get('country').setValue(toSelect);\r\n          this.getStatesByCountry(toSelect);\r\n          \r\n        }\r\n        this.filteredOptionCountry = this.form.controls.country.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterCountry(name) : this.countries)\r\n        );\r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  onCountryChange(event){\r\n    this.getStatesByCountry(event);\r\n    this.states=[];\r\n    this.form.get('state').setValue( \"\");\r\n   }\r\n  displayCountry(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCountry(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.countries.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  getStatesByCountry(country) {\r\n    this.countrty_id = country.id;\r\n    this.stateService.getStateByCountry(this.countrty_id).subscribe(\r\n      (stateData: any) => {\r\n        this.states = stateData;\r\n        if(this.isEditMode){\r\n          const toSelect = this.states.find(c => c.id == this.params.data.state_id);\r\n          this.form.get('state').setValue(toSelect);\r\n         \r\n        }\r\n        this.filteredOptionState = this.form.controls.state.valueChanges\r\n        .pipe(\r\n          startWith(''),\r\n          map(value => typeof value === 'string' ? value : value.name),\r\n          map(name => name ? this._filterState(name) : this.states)\r\n        );\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  displayState(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterState(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.states.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon> \r\n  \r\n\r\n<mat-toolbar class=\"action_toolbar\">Manage State Pin</mat-toolbar>\r\n<div style=\"padding:24px\">\r\n  <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n    <form [formGroup]=\"form\" class=\" mat-elevation-z4 \" fxLayout=\"column\" fxLayoutAlign=\"start\" fxFlex=\"1 0 auto\"\r\n      name=\"form\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Country</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"country\" readonly autocomplete=\"off\" [matAutocomplete]=\"countryAuto\">\r\n          <mat-autocomplete #countryAuto=\"matAutocomplete\" [displayWith]=\"displayCountry\"\r\n            (optionSelected)='onCountryChange($event.option.value)'>\r\n            <mat-option *ngFor=\"let option of filteredOptionCountry | async\" [value]=\"option\">\r\n              {{option.name}}\r\n            </mat-option>\r\n          </mat-autocomplete>\r\n          <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select country\">expand_more</mat-icon>\r\n          <mat-error *ngIf=\"form.get('country').invalid\">Please select country\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>State</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"state\" autocomplete=\"off\" [matAutocomplete]=\"stateAuto\" readonly >\r\n          <mat-autocomplete #stateAuto=\"matAutocomplete\" [displayWith]=\"displayState\" >\r\n            <mat-option *ngFor=\"let option of filteredOptionState | async\" [value]=\"option\">\r\n              {{option.name}}\r\n            </mat-option>\r\n          </mat-autocomplete>\r\n          <mat-icon matSuffix class=\"secondary-text\" matTooltip=\"Please select state\">expand_more</mat-icon>\r\n          <mat-error *ngIf=\"form.get('state').invalid\">Please select state\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Pins</mat-label>\r\n          <input matInput placeholder=\"\" required autocomplete=\"off\" type=\"number\" maxlength=\"100\" autocomplete=\"off\"\r\n            formControlName=\"pins\">\r\n          <mat-error *ngIf=\"form.get('pins').hasError('required')\">Pins required</mat-error>\r\n          <mat-error *ngIf=\"form.get('pins').hasError('pattern')\">Special character are not allowed\r\n          </mat-error>\r\n        </mat-form-field>\r\n        \r\n      </div>\r\n      <div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-slide-toggle fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n          (change)=\"updateStatus($event)\" #toggleElement>\r\n          {{status ? 'Active' : 'Inactive'}}\r\n        </mat-slide-toggle>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n        <button mat-raised-button color=\"primary\" type=\"button\" class=\"mr-8\" (click)=\"onYesClick()\">{{isEditMode ?\r\n          'Save' : 'Save'}}</button>\r\n        <button mat-raised-button type=\"button\" color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { Routes } from '@angular/router';\r\nimport { AuthGuard } from 'app/shared/interceptors/auth-gaurd';\r\n\r\nimport { CreateComponent } from '../create/create.component';\r\nimport { ListComponent } from '../list/list.component';\r\n\r\nexport const TABS_DEMO_ROUTES: Routes = [\r\n  { path : 'create', component : CreateComponent,canActivate:[AuthGuard] },\r\n  { path : 'list', component : ListComponent,canActivate:[AuthGuard] },\r\n  { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n];\r\n","import { Component, OnInit, Inject, ElementRef, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MtxDialogData } from '@ng-matero/extensions';\r\nimport { CityService } from 'app/shared/services/geographics/city.service';\r\nimport { StateService } from 'app/shared/services/geographics/state.service';\r\nimport { DatePipe } from '@angular/common';\r\nimport { ViewEncapsulation } from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { MessageConstant } from 'app/shared/utils/message.constant';\r\nimport { CountryService } from 'app/shared/services/geographics/country.service';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nfunction autocompleteObjectValidator(): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } | null => {\r\n    if (typeof control.value === 'string') {\r\n      return { 'invalidAutocompleteObject': { value: control.value } }\r\n    }\r\n    return null  /* valid option selected */\r\n  }\r\n}\r\n\r\nexport interface PIN {\r\n  PIN: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-view-dialog',\r\n  templateUrl: './view-dialog.component.html',\r\n  styleUrls: ['./view-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: fuseAnimations,\r\n  providers: [DatePipe]\r\n})\r\nexport class ViewDialogComponent implements OnInit {\r\n\r\n \r\n  params: any;\r\n  isEditMode = false;\r\n  form: FormGroup;\r\n  localStorage: any;\r\n  status = false;\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes = [] as const;\r\n\r\n  @ViewChild(\"toggleElement\") ref: any;\r\n  states: any;\r\n  countrty_id: any;\r\n  pins: PIN[] = [];\r\n  filteredOptionState: Observable<any[]>;\r\n  countries: any;\r\n  filteredOptionCountry: Observable<any[]>;\r\n  constructor(private fb: FormBuilder, private cityService: CityService, private stateService: StateService, private snackBar: MatSnackBar, private datePipe: DatePipe,\r\n    public dialogRef: MatDialogRef<ViewDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: MtxDialogData, private countryService: CountryService) { }\r\n\r\n  ngOnInit() {\r\n    this.initialize();\r\n    this.getCountry();\r\n  }\r\n\r\n  initialize() {\r\n\r\n    this.localStorage = JSON.parse(localStorage.getItem('userDetails'));\r\n\r\n    this.params = this.data;\r\n\r\n    this.isEditMode = this.params.action == 'CREATE' ? false : true;\r\n\r\n    this.form = this.fb.group({\r\n      // name:['',[Validators.required,Validators.pattern(/^[a-zA-Z0-9 ]*$/)]],\r\n\r\n      state: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      country: ['', [autocompleteObjectValidator(), Validators.required]],\r\n      status: this.status == true ? 'Y' : 'N'\r\n    });\r\n\r\n    if (this.isEditMode) {\r\n      this.assignValues(this.params);\r\n    }\r\n  }\r\n\r\n  close() {\r\n\r\n    this.dialogRef.close();\r\n  }\r\n  closeActionPanel() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onYesClick() {\r\n    let formValues = this.form.value;\r\n\r\n    const params: any = {\r\n\r\n      PIN_data: this.pins.map(v => ( v.PIN)),\r\n      state_id:formValues.state.id,\r\n      status :  this.status == true ? 'Y' : 'N', \r\n      created_by : this.localStorage.userId \r\n    }\r\n    \r\n    if (this.isEditMode) {\r\n      params.id = this.params.data.id,\r\n        params.modify_by = this.localStorage.userId;\r\n    } else {\r\n      params.created_by = this.localStorage.userId;\r\n    }\r\n\r\n    // if (this.isEditMode) {\r\n    //   this.cityService.update(params).subscribe(\r\n    //     (cityData: any) => {\r\n    //       if (cityData.status == true) {\r\n    //         this.snackBar.open('Record updated successfully!', 'Dismiss', { duration: 5000 });\r\n    //         this.dialogRef.close();\r\n    //       } else {\r\n    //         this.snackBar.open(MessageConstant.errorMessage, 'Dismiss', { duration: 5000 });\r\n    //         this.dialogRef.close();\r\n    //       }\r\n\r\n    //     },\r\n    //     (err) => {\r\n    //       this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n    //     }\r\n    //   )\r\n    // } else {\r\n    //   this.cityService.create(params).subscribe(\r\n    //     (data: any) => {\r\n    //       this.snackBar.open('Rfid created!', 'Dismiss', { duration: 5000 });\r\n    //       this.dialogRef.close();\r\n    //     },\r\n    //     (err) => {\r\n    //       this.snackBar.open('Please try again', 'Dismiss', { duration: 5000 });\r\n    //     }\r\n    //   )\r\n\r\n    // }\r\n\r\n    this.dialogRef.close(params);\r\n  }\r\n\r\n  getErrorMessage(form: FormGroup) {\r\n    return form.get('email').hasError('required')\r\n      ? 'You must enter a value'\r\n      : form.get('email').hasError('email')\r\n        ? 'Not a valid email'\r\n        : '';\r\n  }\r\n\r\n  assignValues(params) {\r\n    let sta_id = params.data.state_id;\r\n    this.form.get('country').setValue(params.data.name);\r\n    this.form.get('state').setValue(params.data.state_name);\r\n    //this.form.get('pi_n').setValue(params.data.PIN);\r\n    this.setDefaultPin(sta_id);\r\n\r\n    this.status = params.data.status == 'Y' ? true : false;\r\n  }\r\n  setDefaultPin(id){\r\n    this.stateService.allActivePINByStateId(id).subscribe(\r\n      (stateData: any) => {\r\n        this.pins = stateData.data;\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n  updateStatus(event) {\r\n    this.status = event.checked;\r\n    this.ref.checked = this.status;\r\n  }\r\n\r\n\r\n  getCountry(){\r\n    this.countryService.getAllCountry().subscribe(\r\n      (data:any)=>{\r\n        this.countries = data;\r\n        if(this.isEditMode){\r\n          //;\r\n          const toSelect = this.countries.find(c => c.id == this.params.data.country_id);\r\n          this.form.get('country').setValue(toSelect);\r\n          this.getStatesByCountry(toSelect);\r\n          this.filteredOptionCountry = this.form.controls.country.valueChanges\r\n           .pipe(\r\n             startWith(''),\r\n             map(value => typeof value === 'string' ? value : value.name),\r\n             map(name => name ? this._filterCountry(name) : this.countries)\r\n           );\r\n        }\r\n         \r\n         },(err)=>{\r\n           \r\n         }\r\n    )\r\n  }\r\n  displayCountry(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterCountry(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.countries.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  onCountryChange(event) {\r\n    this.getStatesByCountry(event);\r\n    this.states = [];\r\n    this.form.get('state').setValue(\"\");\r\n  }\r\n  getStatesByCountry(country) {\r\n    this.countrty_id = country.id;\r\n    this.stateService.getStateByCountry(this.countrty_id).subscribe(\r\n      (stateData: any) => {\r\n        this.states = stateData;\r\n        if(this.isEditMode){\r\n          const toSelect = this.states.find(c => c.id == this.params.data.state_id);\r\n          this.form.get('state').setValue(toSelect);\r\n          this.filteredOptionState = this.form.controls.state.valueChanges\r\n          .pipe(\r\n            startWith(''),\r\n            map(value => typeof value === 'string' ? value : value.name),\r\n            map(name => name ? this._filterState(name) : this.states)\r\n          );\r\n        }\r\n        \r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  displayState(item: any): string {\r\n    return item && item.name ? item.name : '';\r\n  }\r\n  private _filterState(name: string): any[] {\r\n    const filterValue = name.toLowerCase();\r\n    return this.states.filter(option => option.name.toLowerCase().includes(filterValue));\r\n  }\r\n  onStateChange(state) {\r\n    //console.log(state);\r\n    this.stateService.allActivePINByStateId(state.id).subscribe(\r\n      (stateData: any) => {\r\n       // console.log(stateData);\r\n        this.pins = stateData.data;\r\n      }, (err) => {\r\n\r\n      }\r\n    )\r\n  }\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    // Add our fruit\r\n    if ((value || '').trim()) {\r\n      this.pins.push({ PIN: value.trim() });\r\n    }\r\n\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\r\n\r\n  remove(pin: PIN): void {\r\n    const index = this.pins.indexOf(pin);\r\n\r\n    if (index >= 0) {\r\n     // this.pins.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","<!-- <page-header title=\"Add Vehicle\"></page-header> -->\r\n<!-- close button on popup -->\r\n<mat-icon id=\"dialog_action_close\" matTooltip=\"Close window\" (click)=\"closeActionPanel()\"\r\n  style=\"cursor:pointer;color:white\" class=\"material-icons-outlined\">clear</mat-icon>\r\n\r\n\r\n<mat-toolbar class=\"action_toolbar\">Manage State Pin</mat-toolbar>\r\n  <div id=\"forms\" class=\"page-layout simple fullwidth\" fxLayout=\"column\">\r\n    <form [formGroup]=\"form\" class=\"mat-card mat-elevation-z4 p-24 \" fxLayout=\"column\" fxLayoutAlign=\"start\"\r\n      fxFlex=\"1 0 auto\" name=\"form\" >\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>Country</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"country\" autocomplete=\"off\" [matAutocomplete]=\"countryAuto\"\r\n            readonly>\r\n          <mat-autocomplete #countryAuto=\"matAutocomplete\" [displayWith]=\"displayCountry\"\r\n            (optionSelected)='onCountryChange($event.option.value)'>\r\n            <mat-option *ngFor=\"let option of filteredOptionCountry | async\" [value]=\"option\">\r\n              {{option.name}}\r\n            </mat-option>\r\n          </mat-autocomplete>\r\n          <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n          <mat-error *ngIf=\"form.get('country').invalid\">Please select country\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"50\" class=\"pr-4\">\r\n          <mat-label>State</mat-label>\r\n          <input type=\"text\" matInput formControlName=\"state\" autocomplete=\"off\" [matAutocomplete]=\"stateAuto\" readonly>\r\n          <mat-autocomplete #stateAuto=\"matAutocomplete\" [displayWith]=\"displayState\"\r\n            (optionSelected)='onStateChange($event.option.value)'>\r\n            <mat-option *ngFor=\"let option of filteredOptionState | async\" [value]=\"option\">\r\n              {{option.name}}\r\n            </mat-option>\r\n          </mat-autocomplete>\r\n          <mat-icon matSuffix class=\"secondary-text\">expand_more</mat-icon>\r\n          <mat-error *ngIf=\"form.get('state').invalid\">Please select state\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n      <div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-form-field appearance=\"outline\" fxFlex=\"100\" class=\"pr-4\">\r\n          <mat-label> Pin Number</mat-label>\r\n          <mat-chip-list #chipList aria-label=\"Pin selection\" >\r\n            <mat-chip *ngFor=\"let pin of pins\" (removed)=\"remove(pin)\" >\r\n              {{pin.PIN}}\r\n              <mat-icon matChipRemove>cancel</mat-icon>\r\n            </mat-chip>\r\n            <input placeholder=\"New Pin code...\" type=\"number\" [matChipInputFor]=\"chipList\" max=\"6\" min=\"6\"\r\n              [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"addOnBlur\" \r\n              (matChipInputTokenEnd)=\"add($event)\" readonly>\r\n          </mat-chip-list>\r\n\r\n        </mat-form-field>\r\n\r\n      </div>\r\n      <div fxLayout=\"row \" fxLayoutAlign=\"start center\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n        <mat-slide-toggle fxFlex=\"50\" class=\"pr-4\" class=\"example-margin\" color=\"primary\" [checked]=\"status\"\r\n          (change)=\"updateStatus($event)\" #toggleElemen disabled=\"true\">\r\n          {{status ? 'Active' : 'Inactive'}}\r\n        </mat-slide-toggle>\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\" style=\"padding-top:10px\">\r\n        <button mat-raised-button color=\"warn\" class=\"mr-8\" (click)=\"close()\">Cancel</button>\r\n      </div>\r\n    </form>\r\n</div>","\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator} from '@angular/material/paginator';\r\nimport {MatSort} from '@angular/material/sort';\r\nimport {MatTableDataSource} from '@angular/material/table';\r\nimport { ActionDialogComponent } from '../action-dialog/action-dialog.component';\r\nimport { MatDialog,MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport {CityService} from 'app/shared/services/geographics/city.service';\r\nimport {ViewEncapsulation} from '@angular/core';\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\nimport { ViewDialogComponent } from '../view-dialog/view-dialog.component';\r\nimport {FuseConfirmDialogComponent} from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport * as XLSX from 'xlsx';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport { StateService } from 'app/shared/services/geographics/state.service';\r\n\r\n\r\n\r\nexport class ManageStatePin {\r\n \r\n PIN:string;\r\n state:string;\r\n status:string;\r\n statusString:string;\r\n state_name:string;\r\n}\r\n\r\n/**\r\n * @title Data table with sorting, pagination, and filtering.\r\n */\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations   : fuseAnimations\r\n  \r\n})\r\nexport class ListComponent implements OnInit {\r\n \r\n  displayedColumns: string[] = [ 'state', 'PIN','status','action'];\r\n  head = [['State Name','PIN Code','Status ']];\r\n  dataSource: MatTableDataSource<ManageStatePin>;\r\n\r\n  manageStatePin : ManageStatePin[];\r\n  filterEntity: ManageStatePin;\r\n  filterType: MatTableFilter;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  pinSearch = false;\r\n  stateSearch = false;\r\n  statusSearch = false;\r\n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n  exportedData: any[];\r\n  localStorage : any;\r\n  constructor(private stateService : StateService,public dialog : MatDialog,\r\n    private snackBar : MatSnackBar) {\r\n    // Create 100 users\r\n    // const users = Array.from({length: 100}, (_, k) => createNewUser(k + 1));\r\n\r\n    // Assign the data to the data source for the table to render\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getStatePIN();\r\n    this.filterEntity = new ManageStatePin();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.localStorage = JSON.parse( localStorage.getItem('userDetails')); \r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  getStatePIN(){\r\n    this.stateService.getAllStatePINMapping().subscribe(\r\n      (statePinData:any)=>{\r\n        this.manageStatePin = statePinData.data;\r\n        for(var i=0; i < this.manageStatePin.length;i++){\r\n          if(this.manageStatePin[i].status == 'N'){\r\n            this.manageStatePin[i].statusString = 'Inactive';\r\n          }else{\r\n            this.manageStatePin[i].statusString = 'Active';\r\n          }\r\n          \r\n         \r\n        }\r\n        this.dataSource = new MatTableDataSource(this.manageStatePin);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n      },(err)=>{\r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id){\r\n    \r\n    this.confirmDialogRef = this.dialog.open(FuseConfirmDialogComponent, {\r\n      disableClose: true\r\n  });\r\n\r\n  //this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';\r\n\r\n  this.confirmDialogRef.afterClosed().subscribe(result => {\r\n      if ( result )\r\n      {\r\n        this.stateService.deleteStatePINMapping(id, this.localStorage.userId).subscribe(\r\n          (data:any)=>{\r\n              if(data.status == true){\r\n                this.getStatePIN();\r\n            this.snackBar.open('Deleted successfully','Dismiss',{duration:2000});\r\n              }else{\r\n                this.getStatePIN();\r\n                this.snackBar.open('Error while deleting data','Dismiss',{duration:2000});\r\n              }\r\n            \r\n          },(err)=>{\r\n            \r\n          }\r\n        )\r\n      }\r\n      this.confirmDialogRef = null;\r\n  });\r\n  }\r\n\r\n\r\n  openDialog(action,data): void {\r\n    \r\n    let params = {\r\n      action : action,\r\n      data : data,\r\n      autoFocus: false,\r\n      panelClass: 'app-action-dialog',\r\n      disableClose: true  \r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ActionDialogComponent, {\r\n      width: '800px',\r\n      data: params,\r\n      autoFocus: false,\r\n      panelClass: 'app-action-dialog',\r\n      disableClose: true      \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getStatePIN();\r\n    });\r\n  }\r\n  viewDialog(action,data) : void{\r\n    let params = {\r\n      action : action,\r\n      data : data\r\n    }\r\n\r\n    const dialogRef = this.dialog.open(ViewDialogComponent, {\r\n      width: '800px',\r\n      data: params,\r\n      panelClass: 'app-action-dialog',\r\n      autoFocus: false,\r\n      disableClose: true    \r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      \r\n      // this.moderate(result);\r\n      this.getStatePIN();\r\n    });\r\n  }\r\n  changeVisibility(visibleOption){\r\n   \r\n    \r\n    \r\n    \r\n    if(visibleOption == 'pinSearch'){\r\n      this.pinSearch = !this.pinSearch;\r\n      this.filterEntity.PIN = '';\r\n    }\r\n     if(visibleOption == 'stateSearch'){\r\n      this.stateSearch = !this.stateSearch;\r\n      this.filterEntity.state = '';\r\n    }\r\n    if(visibleOption == 'statusSearch'){\r\n      this.statusSearch = !this.statusSearch;\r\n      this.filterEntity.statusString = '';\r\n    }\r\n   \r\n   }\r\n   \r\n   tableExport()\r\n   {\r\n     this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n       var statePinModal = this.dataSource.filteredData[i];\r\n      //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n      //statusString: `statusString${i}`});\r\n      var data = {'State name':statePinModal.state_name,'Pin code':statePinModal.PIN,\r\n                  'State': statePinModal.state_name,'Status ':statePinModal.statusString};\r\n      this.exportedData.push(data);\r\n    }\r\n     const workSheet = XLSX.utils.json_to_sheet(this.exportedData);\r\n       const workBook: XLSX.WorkBook = XLSX.utils.book_new();\r\n       XLSX.utils.book_append_sheet(workBook, workSheet, 'Manage State Pin');\r\n       XLSX.writeFile(workBook, 'Manage State Pin.xlsx');\r\n     //XLSX.writeFileAsync('OCPP Logs.xlsx',workBook, this.cb)\r\n      //this.preloader.close();\r\n   }\r\n\r\n   pdfExport(){\r\n   \r\n    var doc = new jsPDF({ // set needed dimensions for any elemen\r\n      \r\n    });\r\n    this.exportedData = [];\r\n    for (let i = 0; i < this.dataSource.filteredData.length; i++) {\r\n      var statePinModal = this.dataSource.filteredData[i];\r\n     //this.exportedData.push({name: `name${i}`, description: `description${i}`,\r\n     //statusString: `statusString${i}`});\r\n     var data =[statePinModal.state_name,statePinModal.PIN,statePinModal.statusString] ;\r\n     \r\n     this.exportedData.push(data);\r\n   }\r\n   var img = new Image();\r\n   var imgRight = new Image();\r\n    var src = 'assets/images/logos/logo_sparkev_main.png';\r\n    var srcSparkEV = 'assets/images/logos/logo_SparkEV_black.png';\r\n   imgRight.src =srcSparkEV;\r\n   var createdDate = new Date().toLocaleString(('en-GB'));\r\n   img.src = src;\r\n   doc.setFontSize(11);\r\n   doc.setTextColor(100);\r\n   doc.setFontSize(18);\r\n   \r\n    (doc as any).autoTable({\r\n      head: this.head,\r\n      body: this.exportedData,\r\n      theme: 'grid',\r\n      headStyles: { fontStyle: 'majalla',fillColor:[11, 148, 68]},\r\n      styles: {\r\n        cellPadding: 1,\r\n        fontSize: 8,\r\n        \r\n      },\r\n     \r\n      margin: { top: 22 },\r\n      didDrawCell: data => {\r\n      },\r\n      didDrawPage:data=>{\r\n        doc.addImage(img , 15, 7, 15, 6);\r\n        doc.addImage(imgRight, 170, 7, 25, 6);\r\n        \r\n        doc.text('Manage State Pin Report' ,doc.internal.pageSize.getWidth() / 2, 11, { align: 'center'});\r\n        \r\n        doc.setTextColor(211,211,211);\r\n        doc.setFontSize(60);\r\n        doc.setGState( doc.GState({opacity: 0.6}));\r\n        doc.text('Confidential/Not for Public use',25,285,null,60, );\r\n        doc.setGState( doc.GState({opacity: 1}));\r\n        doc.setTextColor(100);\r\n        doc.setFontSize(9);\r\n        doc.text('Date:'+ createdDate ,15, 18);\r\n        \r\n        doc.text('Generated By:'+ this.localStorage.f_Name ,195, 18,{ align: 'right'});\r\n        doc = this.addWaterMark(doc);\r\n      }\r\n    })\r\n  \r\n    // below line for Open PDF document in new tab\r\n    doc.output('dataurlnewwindow');\r\n    // below line for Download PDF document  \r\n    doc.save('Manage State Pin report.pdf');\r\n   \r\n  }\r\n  addWaterMark(doc){\r\n    var newpage = doc.getNumberOfPages();\r\n    const i = doc.internal.getNumberOfPages();\r\n    doc.setTextColor(100);\r\n        doc.setFontSize(10);\r\n     //Print Page 1 of 4 for example\r\n     \r\n     doc.text('Page ' +  String(i) + ' of ' + String(newpage),210-20,297-10,null,null,\"right\");\r\n    return doc;\r\n  \r\n  }\r\n\r\n\r\n}\r\n\r\n","<!--mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"\" #input autocomplete=\"password\">\r\n</mat-form-field-->\r\n<div style=\"text-align: left ;\r\nmargin-left: 10px;\r\nmargin-bottom:10px;margin-top: 10px;\">\r\n     <button mat-mini-fab  color=\"primary\" (click)=\"tableExport()\"  matTooltip=\"Excel Download\">\r\n        <mat-icon>sim_card_download</mat-icon> \r\n      </button>&nbsp;&nbsp;\r\n      <button mat-mini-fab  color=\"primary\" (click)=\"pdfExport()\"  matTooltip=\"PDF Download\">\r\n        <mat-icon>picture_as_pdf</mat-icon> \r\n      </button>\r\n    <!-- <img      src=\"/assets/images/excel_icon.png\" matTooltip=\"export to excel\" width=\"36px\" height=\"auto\" style=\"cursor:pointer;margin-bottom: 18px;float:inline-end;\"/> -->\r\n</div>\r\n<div fxLayout=\"row wrap\" class=\"page-layout simple fullwidth\" style=\"overflow: scroll;\">\r\n    <div class=\"content\" style=\"min-width: auto;\">\r\n\r\n        <div class=\"mat-elevation-z8\">\r\n            <table mat-table matTableFilter [dataSource]=\"dataSource\" [exampleEntity]=\"filterEntity\"\r\n                [filterType]=\"filterType\" matSort class=\"mat-elevation-z8\">\r\n                <ng-container matColumnDef=\"state\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!stateSearch\" class=\"custom_font_size\" style=\"display: flex;\">State &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('stateSearch')\">search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"stateSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"State\" [(ngModel)]=\"filterEntity.state\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('stateSearch')\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.state_name}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"PIN\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!pinSearch\" class=\"custom_font_size\" style=\"display: flex;\"> Pin Code &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('pinSearch')\">search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"pinSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Pin Code\" [(ngModel)]=\"filterEntity.PIN\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('pinSearch')\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\"> {{row.PIN}} </td>\r\n                </ng-container>\r\n                \r\n\r\n               \r\n                <ng-container matColumnDef=\"status\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                        <span *ngIf=\"!statusSearch\" class=\"custom_font_size\" style=\"display: flex;\">Status &nbsp;&nbsp;\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch')\">search</mat-icon> </span>\r\n                        <mat-form-field *ngIf=\"statusSearch\" appearance=\"outline\" class=\"list_input\">\r\n                            <input matInput placeholder=\"Status\" [(ngModel)]=\"filterEntity.statusString\">\r\n                            <mat-icon matSuffix (click)=\"changeVisibility('statusSearch')\">highlight_off</mat-icon>\r\n                        </mat-form-field>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let row\" [style.color]=\"row.status == 'Y' ? 'green' : 'red'\">\r\n                        {{row.statusString}} </td>\r\n                </ng-container>\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef>\r\n                        <span class=\"custom_font_size\">Action</span>\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\">\r\n                        <mat-icon color=\"primary\" matTooltip=\"View\" (click)=\"viewDialog('VIEW',element)\"\r\n                            style=\"cursor:pointer\">visibility</mat-icon>&nbsp;&nbsp;\r\n                        <mat-icon color=\"primary\" matTooltip=\"Edit\" (click)=\"openDialog('EDIT',element)\"\r\n                            style=\"cursor:pointer\">edit</mat-icon>&nbsp;&nbsp;\r\n\r\n                        <mat-icon color=\"warn\" matTooltip=\"Remove\" (click)=\"delete(element.id)\" style=\"cursor:pointer\">\r\n                            delete</mat-icon>\r\n                    </td>\r\n                </ng-container>\r\n\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n                <!-- Row shown when there is no matching data. -->\r\n\r\n            </table>\r\n\r\n            <mat-paginator [pageSizeOptions]=\"[10,30,50,100]\"></mat-paginator>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Copyright 2020 Google LLC. All Rights Reserved.\r\n      Use of this source code is governed by an MIT-style license that\r\n      can be found in the LICENSE file at http://angular.io/license -->","import { NgModule } from '@angular/core'; \r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { ManageStatePinCrudComponent } from './manage-state-pin-crud/manage-state-pin-crud.component';\r\nimport { CreateComponent } from './create/create.component';\r\nimport { ListComponent } from './list/list.component';\r\nimport { ManageStatePinRoutingModule } from './manage-state-pin-routing.module';\r\nimport { ActionDialogComponent } from './action-dialog/action-dialog.component';\r\nimport { FuseSharedModule  } from '@fuse/shared.module';\r\nimport { ViewDialogComponent } from './view-dialog/view-dialog.component';\r\nconst COMPONENTS =[ManageStatePinCrudComponent, CreateComponent, ListComponent];\r\nconst COMPONENTS_DYNAMIC =[ActionDialogComponent,ViewDialogComponent];\r\n\r\n@NgModule({\r\n    imports:[SharedModule, ManageStatePinRoutingModule,FuseSharedModule],\r\n    declarations : [COMPONENTS,COMPONENTS_DYNAMIC],\r\n    entryComponents : [COMPONENTS_DYNAMIC]\r\n})\r\n\r\nexport class ManageStatePinModule{}"]}